{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Fast2 official documentation","text":"<p>This comprehensive resource is designed to provide you with all the information you need to effectively use and navigate our software. Whether you're a new user or a seasoned professional, this documentation will serve as your guide to understanding the features, functionalities, and best practices of Fast2.</p> Getting Started <p>If you're new to Fast2, we recommend starting with the Getting started section. Here, you'll find step-by-step instructions on how to install and set up the software, along with basic configuration and initial setup processes. This section will help you quickly get up and running with Fast2.</p> Components <p>The User Guides section contains detailed information on each aspect of the software. From the core functionalities to advanced features, these guides provide in-depth explanations, tutorials, and examples to help you make the most of Fast2. Whether you're looking to perform specific tasks, customize settings, or troubleshoot issues, the User Guides section has you covered.</p> Catalog <p>The catalog section lists all the different tasks available, to help you understand the basic and advanced configuration settings available.</p> Advanced <p>For developers and integrators, the API Reference section provides detailed documentation on the available APIs, libraries, and SDKs offered by Fast2. This resource will assist you in integrating Fast2 with other systems, extending its capabilities, and building custom applications.</p> Cookbooks <p>In this section, you'll unlock the power of data manipulation through concise code snippets. Discover a wealth of practical examples and operations to efficiently handle and transform your data. Whether you're a novice or a seasoned programmer, our comprehensive collection of code samples and step-by-step instructions will guide you in leveraging the full potential of our software. Enhance your data manipulation skills and unleash your creativity to achieve exceptional results in your coding endeavors.</p> <p>We hope this documentation proves valuable in your journey with Fast2. If you have any suggestions, feedback, or questions regarding the documentation, please don't hesitate to reach out. Enjoy exploring Fast2 and unlocking its full potential!</p> <p>Note</p> <p>For advanced questions or further assistance, please head out to the Fast2 Support Customer Portal.</p> <p>Fast2 Team \u270c\ufe0f</p>"},{"location":"tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"},{"location":"tags/#tag:aws-s3","title":"AWS S3","text":"<ul> <li>            Retrieve content and metadata from an S3 bucket          </li> <li>            Upload content and metadata in a S3 bucket          </li> </ul>"},{"location":"tags/#tag:drools","title":"Drools","text":"<ul> <li>            Drools          </li> </ul>"},{"location":"tags/#tag:excel","title":"Excel","text":"<ul> <li>            Drools          </li> </ul>"},{"location":"tags/#tag:java","title":"Java","text":"<ul> <li>            Drools          </li> <li>            Patterns          </li> </ul>"},{"location":"tags/#tag:boilerplate","title":"boilerplate","text":"<ul> <li>            Contents management          </li> <li>            Data from file name          </li> <li>            Dataset management          </li> <li>            Documents management          </li> <li>            Punnets management          </li> </ul>"},{"location":"tags/#tag:configuration","title":"configuration","text":"<ul> <li>            Patterns          </li> </ul>"},{"location":"tags/#tag:content","title":"content","text":"<ul> <li>            Contents management          </li> <li>            Documents management          </li> <li>            Punnets management          </li> <li>            Retrieve content and metadata from an S3 bucket          </li> </ul>"},{"location":"tags/#tag:csv","title":"csv","text":"<ul> <li>            CSV source : a step further          </li> </ul>"},{"location":"tags/#tag:data","title":"data","text":"<ul> <li>            Dataset management          </li> </ul>"},{"location":"tags/#tag:dataset","title":"dataset","text":"<ul> <li>            Dataset management          </li> <li>            Documents management          </li> </ul>"},{"location":"tags/#tag:document","title":"document","text":"<ul> <li>            Documents management          </li> <li>            Retrieve content and metadata from an S3 bucket          </li> <li>            Upload content and metadata in a S3 bucket          </li> </ul>"},{"location":"tags/#tag:java","title":"java","text":"<ul> <li>            Contents management          </li> <li>            Dataset management          </li> <li>            Documents management          </li> <li>            Punnets management          </li> </ul>"},{"location":"tags/#tag:javascript","title":"javascript","text":"<ul> <li>            Data from file name          </li> </ul>"},{"location":"tags/#tag:json","title":"json","text":"<ul> <li>            Data from file name          </li> </ul>"},{"location":"tags/#tag:pattern","title":"pattern","text":"<ul> <li>            Retrieve content and metadata from an S3 bucket          </li> <li>            Upload content and metadata in a S3 bucket          </li> </ul>"},{"location":"tags/#tag:punnet","title":"punnet","text":"<ul> <li>            Punnets management          </li> </ul>"},{"location":"tags/#tag:serialization","title":"serialization","text":"<ul> <li>            Upload content and metadata in a S3 bucket          </li> </ul>"},{"location":"tags/#tag:worker","title":"worker","text":"<ul> <li>            Data from file name          </li> </ul>"},{"location":"tags/#tag:xml","title":"xml","text":"<ul> <li>            Retrieve content and metadata from an S3 bucket          </li> <li>            Upload content and metadata in a S3 bucket          </li> </ul>"},{"location":"advanced/","title":"Advanced section","text":"<p>Learn here advanced handling of Fast2 for optimizing your migration process !</p> <p>This section related of diverse topics for more specific uses of Fast2, but you will need to have the basic understanding of the overall concepts closely related to the architecture,</p> <p>Dive right back in</p> <p>In case of any confusion, please refer to the appropriate sections of the documentation, such as :</p> <ul> <li>the broker details,</li> <li>how the workers work,</li> <li>tool architecture</li> </ul> <p>and any other relevant resources.</p>"},{"location":"advanced/custom-module/","title":"Custom module","text":"<p>Warning</p> <p>This page has been moved to the Knowledge-Base at \ud83d\udd17Build a custom module in Fast2</p>"},{"location":"advanced/drools/","title":"Drools: the Java rules engine","text":"<p>Based on Excel document, \u201cdrools\u201d is a rule engine used to execute code scripts, Java code in our context. Users can define business and/or functional rules as data transformations, mapping, etc. One of the key benefits is its adaptation to any structure and any level of complexity as long as your code respects the punnet structure (quick reminder here if need be \ud83d\ude09). It can easily be shared between your team members for complex project to have concerned people seamlessly involved. Another upside: no development skill is required to build your own rules. Fast2 supports such feature with the ApplyDroolsTask.</p> <p>A sample of Drools spreadsheet can be downloaded to help you getting started.</p> <p> Download drools template</p>","tags":["Drools","Java","Excel"]},{"location":"advanced/drools/#spreadsheet-structure","title":"Spreadsheet structure","text":"<p>The following picture represents a drool sheet as you could find one in an Excel document:</p> <p></p> <p>It\u2019s composed with :</p> <ul> <li>RuleSet</li> </ul> means that the current speadsheet is a decision table <ul> <li>Import</li> </ul> all java classes required, separated by a comma. These are the same packages that would be imported in a regular Java class in order to have the code running properly. <ul> <li>Sequential (optional)</li> </ul> specify here the order in which rules should apply <ul> <li>RuleTable rules</li> </ul> name of the table <ul> <li>NAME column</li> </ul> represents the name of the differents rules <ul> <li>CONDITION column</li> </ul> condition to verify to perform an action <ul> <li>ACTION column</li> </ul> action to perform if all previous conditions have been validated <ul> <li>Variables used are indicated below the column CONDITION (doc : Document)</li> </ul> <p></p>","tags":["Drools","Java","Excel"]},{"location":"advanced/drools/#how-to-read","title":"How to read","text":"<p>Quite simple! A rule is a row read from left to right, as regular code.</p> <p>An empty row is interpreted by the rules engine as the end of the process. Each rule will have to meet particular criteria. There must be at least one condition and one action per rule.</p>","tags":["Drools","Java","Excel"]},{"location":"advanced/drools/#read-a-condition","title":"Read a condition","text":"<ul> <li>A rule can have multiple conditions</li> <li>All conditions must be validated to apply the action of the same row</li> <li>If no value is present in the condition column, the condition is skipped (considered <code>true</code>)</li> </ul> <p>A condition cell will only hold one statement. If several conditions have to be met, they will be in the next columns.</p>","tags":["Drools","Java","Excel"]},{"location":"advanced/drools/#read-an-action","title":"Read an action","text":"<ul> <li>A rule can have multiple actions</li> <li>Actions are performed from left to right</li> <li>Inside a cell, the actions are separated by a semicolon ;</li> </ul> <p>The actions are read just like any code snippet, similarly to a regular script file.</p> <p></p>","tags":["Drools","Java","Excel"]},{"location":"advanced/drools/#parameters","title":"Parameters","text":"<p>There are two different ways to use parameters:</p> <ul> <li>You only need one parameter for your condition or action : <code>$param</code>.</li> <li>Otherwise, separate values by comma, and use <code>$1</code>, <code>$2</code> and so on in you condition/action.</li> </ul> <p></p>","tags":["Drools","Java","Excel"]},{"location":"advanced/drools/#write-a-condition","title":"Write a condition","text":"<p>Conditions, just as in a regular coding snippet, must be performed as a boolean. Actions are executed only if condition is TRUE. It\u2019s highly recommended to use <code>eval(&lt;condition&gt;)</code> or <code>!eval(&lt;condition&gt;)</code> for conditions.</p> <p>Check</p> <p>Just as you would write any condition in your code,</p> <ul> <li>Conditions must not end by a semi-colon (<code>;</code>)</li> <li>Characters allowed : <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>||</code>, <code>&amp;&amp;</code>, \u2026</li> </ul> <p>If you want to perform an action no matter what, do <code>eval($param)</code> with <code>$param = true</code>.</p> <p>If you need the document to have a specific data before making any action, do:</p> <p><code>doc.getDataSet().hasData($param)</code> with <code>$param = yourDataName</code>.</p> <p></p>","tags":["Drools","Java","Excel"]},{"location":"advanced/drools/#action-examples","title":"Action examples","text":"<p>Check</p> <p>You can put any Java code to perform an action, as long as you end each instruction by a semi-colon (<code>;</code>).</p>","tags":["Drools","Java","Excel"]},{"location":"advanced/drools/#add-new-data","title":"Add new data","text":"<p>To add a new data, if you know both the key/name and the value, use the following code :</p> <pre><code>doc.getDataSet().addData(\"&lt;key&gt;\", \"&lt;type&gt;\",\"&lt;value&gt;\");\n</code></pre> <p>In case the value is unknown at the moment or you object is too complex and you might need to add properties to the data object:</p> <pre><code>Data data = doc.getDataSet().addData(\"&lt;key&gt;\", \"&lt;type&gt;\");\n\ndata.setProperty(\"&lt;key&gt;\",\"&lt;value&gt;\");\n</code></pre> <p>When performing such operation, though, don\u2019t forget to add the proper Fast2 package to manipulate Data type.</p>","tags":["Drools","Java","Excel"]},{"location":"advanced/drools/#add-new-value-to-existing-data","title":"Add new value to existing data","text":"<p>Add one value:</p> <pre><code>doc.getDataSet().getData(\"&lt;data-key&gt;\").addValue(\"$param\");\n</code></pre> <p>Add multiple values to the same data:</p> <pre><code>doc.getDataSet().getData(\"&lt;data-key&gt;\").getValues().addAll(&lt;list-of-values&gt;);\n</code></pre>","tags":["Drools","Java","Excel"]},{"location":"advanced/drools/#stop-a-rule","title":"Stop a rule","text":"<p>You can stop the rule execution at a specific time when an action has been performed. Use <code>drools.halt();</code> in the action section.</p> <p>The next action(s) will not be performed as the rule execution is stopped (useful in case of error management).</p>","tags":["Drools","Java","Excel"]},{"location":"advanced/drools/#good-practices","title":"Good practices","text":"<p>We advise you to create a folder at the root of Fast2 and name it Rules. However, Fast2 will be able to fetch your drools files anywhere as long as the specified path is accessible to the Fast2 server.</p> <p>This path will be fill in the the task ApplyDroolsTask.</p> <p></p>","tags":["Drools","Java","Excel"]},{"location":"advanced/javascript/","title":"JavaScript","text":"<p>Using the JSTransform task can comes in quite handy for any tweaking of metadata, but will also get you covered in case of heavier operations, as long as your JavaScript talents match you problem solving skills ! To iterate through all documents crossing your JS task, here is a short code snippet to help you get started:</p> <pre><code>punnet.getDocuments().forEach(function (doc) {\n  // do something\n});\n</code></pre> <p>Any data within a punnet can be accessed, added, edited or remove ! Make sure beforehand to respect the punnet object architecture (quick reminder here if need be \ud83d\ude09).</p> <p>Let's now go through 3 quick scenarios.</p>"},{"location":"advanced/javascript/#map-from-json","title":"Example #1 Map document properties from JSON","text":"<p>Depending on your use-case, the metadata could have been stored within a JSON file. Parsing such file and build a punnet based on its content is another kind of operation where this Fast2 task comes in handy !</p> <p>The following script is one way to parse a basic JSON metadata file.</p> <pre><code>// First, get content as String\nvar content = punnet\n  .getDocumentList()\n  .get(0)\n  .getContentSet()\n  .getContent()\n  .get(0);\nvar bytes = manager.getPunnetContentFactory().getContentAsByteArray(content);\n\nvar String = Java.type(\"java.lang.String\");\nvar lines = new String(bytes);\n\n// Then, parse this fragment as JSON\nvar jsonObject = JSON.parse(lines);\n\n// Clear existing document and create a new one\npunnet.getDocumentList().clear();\nvar doc = punnet.addDocument(com.fast2.model.punnet.DocumentId.id());\n\n// Fetch all properties from existing fragment and create them as Document data\nfor (pty in jsonObject)\n  doc.getDataSet().addData(pty, \"String\", jsonObject[pty]);\n</code></pre> <p>Once this script is executed, you'll end up with a punnet whose first and only document will have its dataset full of metadata matching both keys and values from the JSON file.</p> <p>Considering the following input embedded in a JSON file:</p> <pre><code>{\n  \"name\": \"testName\",\n  \"contentPath\": \"C:/path/to/sample.pdf\",\n  \"key\": \"value\"\n}\n</code></pre> <p>the ouput punnet would then look like this:</p> <pre><code>{\n  \"documents\": [\n    {\n      \"data\": {\n        \"contentPath\": \"C:/path/to/sample.pdf\",\n        \"key\": \"value\",\n        \"name\": \"testName\"\n      },\n      \"documentId\": \"ffde4769-3acd-4964-ab72-5912f1e65e1e\"\n    }\n  ],\n  \"punnetId\": \"punnet.json#1\"\n}\n</code></pre> <p>Next step could be to attach the document content to your document, now that you have the <code>contentPath</code> data with its value easily resolved by the AlterDocumentContent task.</p>"},{"location":"advanced/javascript/#delete-content","title":"Example #2 Delete content based on property","text":"<p>Let us now supposed we want to filter out document contents based on a given property. For convenience, the reference value is stored at the punnet level, under the property <code>punnetKeyA</code>.</p> <p>The filter criterion is the following: if the content has the value of its data <code>contentKeyA</code> matching the punnet value, the content is left in place. Otherwise, the content is deleted.</p> <p>Before the punnet enters the JSTransform task, its structure looks like this:</p> <pre><code>&lt;?xml version='1.0' encoding='UTF-8'?&gt;\n&lt;ns:punnet xmlns:ns=\"http://www.arondor.com/xml/document\" punnetId=\"doc_0_0#1\"&gt;\n    &lt;ns:documentset&gt;\n        &lt;ns:document documentId=\"doc_0_0\"&gt;\n            &lt;ns:contentset&gt;\n                &lt;ns:content&gt;\n                    &lt;ns:property name=\"contentKeyA\" value=\"valueA\" /&gt;\n                    &lt;ns:url&gt;path/of/first/content&lt;/ns:url&gt;\n                &lt;/ns:content&gt;\n                &lt;ns:content&gt;\n                    &lt;ns:url&gt;path/of/second/content&lt;/ns:url&gt;\n                &lt;/ns:content&gt;\n            &lt;/ns:contentset&gt;\n            &lt;ns:dataset /&gt;\n            &lt;ns:folderset /&gt;\n            &lt;ns:annotationset /&gt;\n        &lt;/ns:document&gt;\n    &lt;/ns:documentset&gt;\n    &lt;ns:dataset&gt;\n        &lt;ns:data name=\"punnetKeyA\" type=\"String\"&gt;\n            &lt;ns:value&gt;valueA&lt;/ns:value&gt;\n        &lt;/ns:data&gt;\n    &lt;/ns:dataset&gt;\n    &lt;folderSet /&gt;\n&lt;/ns:punnet&gt;\n</code></pre> <p>The first content should then remain as is, while the second one is expected to be removed by the script of our task.</p> <p>Speaking of it, the strategy will be to iterate through all the documents of the punnet; and for each document, iterate through all its contents. Finally, a simple condition will evaluate whether the content is to be kept.</p> <pre><code>punnet.getDocuments().forEach(function (document) {\n  var duplicate = [].concat(document.getContentSet());\n\n  duplicate.forEach(function (content) {\n    if (\n      content.getProperty(\"contentKey\") !=\n      punnet.getDataSet().getDataValue(\"punnetKey\")\n    )\n      document.getContentSet().remove(content);\n  });\n});\n</code></pre> <p>Once the task is completed (in other terms, once the script has been executed), the output punnet new structure is lightened:</p> <pre><code>&lt;?xml version='1.0' encoding='UTF-8'?&gt;\n&lt;ns:punnet xmlns:ns=\"http://www.arondor.com/xml/document\" punnetId=\"doc_0_0#1\"&gt;\n    &lt;ns:documentset&gt;\n        &lt;ns:document documentId=\"doc_0_0\"&gt;\n            &lt;ns:contentset&gt;\n                &lt;ns:content&gt;\n                    &lt;ns:property name=\"contentKeyA\" value=\"valueA\" /&gt;\n                    &lt;ns:url&gt;path/of/first/content&lt;/ns:url&gt;\n                &lt;/ns:content&gt;\n            &lt;/ns:contentset&gt;\n            &lt;ns:dataset /&gt;\n            &lt;ns:folderset /&gt;\n            &lt;ns:annotationset /&gt;\n        &lt;/ns:document&gt;\n    &lt;/ns:documentset&gt;\n    &lt;ns:dataset&gt;\n        &lt;ns:data name=\"punnetKeyA\" type=\"String\"&gt;\n            &lt;ns:value&gt;valueA&lt;/ns:value&gt;\n        &lt;/ns:data&gt;\n    &lt;/ns:dataset&gt;\n    &lt;folderSet /&gt;\n&lt;/ns:punnet&gt;\n</code></pre> <p>As expected, the second content is gone. If the content to filter out was inside a parent content of this document (i.e. punnet &gt; document &gt; first level content &gt; second level content), this JS code should have been adapted to add one deeper level of content scanning:</p> <pre><code>punnet.getDocuments().forEach(function (document) {\n  document.getContentSet().forEach(function (firstLevelContent) {\n    var duplicate = [].concat(firstLevelContent.getSubContents());\n    duplicate.forEach(function (secondLevelContent) {\n      if (\n        secondLevelContent.getProperty(\"contentKeyA\") !=\n        punnet.getDataSet().getDataValue(\"punnetKeyA\")\n      )\n        firstLevelContent.getSubContents().remove(secondLevelContent);\n    });\n  });\n});\n</code></pre>"},{"location":"advanced/javascript/#get-content-path","title":"Example #3 Get content path","text":"<p>Another application of this task could be to reach values outside the scope of the document dataset, like for example the path of the associated content.</p> <p>This value is stored tightly within the content, which is why passing via the manager component of the JSTransform task is required.</p> <pre><code>punnet.getDocuments().forEach(function (doc) {\n    var path = manager.getPunnetContentFactory().getContentAsFile(doc.getContentSet().get(0)).getPath();\n    doc.getDataSet().addData(\"pathCopy\", \"String\", path);\n});\n</code></pre> <p>The temporary variable <code>path</code>, which the value of the absolute path will be stored into, can thereafter be accessed as a regular metadata under the key <code>pathCopy</code> alongside the other document metadata.</p> <p>We can envision further operations of this value (or any other from the dataset), such as truncating, hashing, comparison etc.</p>"},{"location":"advanced/javascript/#bonus-tip","title":"Bonus tip","text":"<p>When a Java class needs to be manipulated within the JavaScript code, a variable analogous to a Java class needs to be created:</p> <pre><code>var Id = Java.type(\"com.example.package.Id\");\n\npunnet.getDocuments().forEach(function (doc) {\n  var id = Id.id(\"myStringId\");\n\n  ...\n});\n</code></pre>"},{"location":"advanced/javascript/#in-the-end-its-all-just-about-you","title":"In the end, it's all just about you","text":"<p>As you can imagine, several other use-cases can be addressed by implementing on-the-fly JS scripts, just like the ones showed above. The capabilities of this task are endless: team with Fast2 on this fight floor, and tackle your migration with your sharpened coding skills !</p>"},{"location":"advanced/optimization/","title":"TODO","text":"<p>thread management, components configuration (why, how)</p>"},{"location":"advanced/patterns/","title":"Patterns","text":"<p>A pattern is a sequence of instructions, a model, which can be easily recognized by an aware glance. It is strictly under this definition that Fast2 patterns stand.</p> <p>Our migration tool relies on a specific syntax used to dynamically retrieve information from different data-layer of the whole process, whether document, map execution or else.</p> <p>Tips</p> <p>For a successful pattern recognition, only use the data known by Fast2, such as :</p> <ul> <li>Data stored in the punnet and/or documents datasets</li> <li>Migration specific details, listed down below.</li> </ul>","tags":["configuration","Java"]},{"location":"advanced/patterns/#context-and-definition","title":"Patterns, what are they anyway ?","text":"<p>In Fast2, several data can be retrieved and accessed dynamically from a dedicated syntax which Fast2 supports for your convenience. This <code>${...}</code> syntax can be used in most of the configuration fields of the tasks composing your migration workflow.</p> <p></p> <p>Using such syntax will comes in handy when you will have to rely on a value whose you only know the name. In other words, retrieving a metadata whose key is <code>doc_mimeType</code> and value is unique for every document, will just be <code>${doc_mimeType}</code>.</p> <p>No need to list all your possible values, Fast2 will resolve this expression by looking first at the document dataset level, then at the punnet level, an later at map/campaign level. Some applications of the latter could be to store the name of the map, or even accessing map- or global-scoped shared ojects for cross-campaign communications.</p>","tags":["configuration","Java"]},{"location":"advanced/patterns/#patterns-in-links","title":"Patterns in links","text":"<p>Although links are designed to offer basic statements for conditional routing, they also digest pattern for higher-complexity conditions. For example, new conditions can be value-dependent: not only you can check whether the document has a given data, but now it is possible to narrow down the eligible documents based on the value itself of this data.</p> <p>Note</p> <p>Pattern-related syntax <code>${...}</code> is not required, fill the field with your expression directly !</p> <p>Based on SpEL (Spring Expression Language), the syntax of these conditions will sound familiar to anyone who's already coded one day:</p> <p></p> <p>In the same way, you'll now be able to sort documents based on their mime-types, on their structure (does my document has a content ? Is its creation date matching the time range which this campaign is focusing on? ).</p> <p>As mentioned earlier, the list of data which you can evaluate in a condition is the same list as in a task configuration (document properties, punnet properties, map and campaign names).</p>","tags":["configuration","Java"]},{"location":"advanced/patterns/#as-long-as-it-returns-true-of-false","title":"As long as it returns <code>true</code> of <code>false</code>...","text":"<p>More complex use-cases can be built out of the given tools, as long as the syntax matches the SpEL expression. Java-based condition are therefore supported, here are some examples to help you getting started :</p> <ul> <li><code>documentId.endsWith(\"0\")</code></li> <li><code>mimeType.startsWith(\"image/\")</code></li> <li><code>documents.size() &gt;= 2 || punnet.getDataSet().hasData(\"multiversioned\")</code></li> </ul> <p>And the list goes on, it's your turn now to build the condition meeting your needs!</p>","tags":["configuration","Java"]},{"location":"advanced/patterns/#patterns-subtleties","title":"Patterns subtleties","text":"","tags":["configuration","Java"]},{"location":"advanced/patterns/#properties-with-colon","title":"Properties with colon","text":"<p>As handy as they may sound, patterns do embed specifications due to the particular syntax they are subjected to.</p> <p>The most common issue is when dealing with colon character <code>:</code>, but the approach also addressed data name with space characters. To prevent running into a SpEL syntax error which would wipe its interest out, the syntax has to be slightly expanded. Where before you were accessing the value with <code>${key}</code>, you now need to write it as follows:</p> <pre><code>${property('prefix:suffix')}\n\n${property('with space')}\n</code></pre> <p>You can now safely extract data with namespaces, or any special character which may eventually break the SpEL syntax.</p>","tags":["configuration","Java"]},{"location":"advanced/patterns/#propose-default-value","title":"Propose default value","text":"<p>In case the pattern value is not known by Fast2, an empty String is return. However, you might be willing to set a default value to ease the upcoming operations.</p> <p>To do so, use the Elvis ternary operator along the <code>property()</code> function:</p> <pre><code>${property('missingData')?:'defaultValue'}\n</code></pre> <p>From now on, if the 'missingData' is not fount either at the punnet or document level, the value you earlier planned to retrieve will be replaced with the value set as default, although no additional property is created.</p>","tags":["configuration","Java"]},{"location":"advanced/patterns/#access-data-of-fast2-objects","title":"Access data of Fast2 objects","text":"<p>Whether you need subtypes properties for conditional routing or metadata elaboration, Fast2 gives you access to any data stored in the punnet.</p> <p>However targetting object is not always intuitive, so here are the different keywords required to access the Fast2 objects :</p> Keyword Description Examples <code>${CurrentDocument}</code> Access the focused document, to call its metadata. This can be quite useful when dealing with multi-document punnets. <code>${CurrentDocument.getDataSet().getData('multivalued data').getValues().get(0).split('\\.')[0]}</code> <code>${CurrentContainer}</code> Access the focused content, to call its properties. This can be quite useful when dealing with multi-contented documents. <code>${CurrentContainer.mimetype}</code> <code>${CurrentAnnotation}</code> Access the annotation of the document. <code>${CurrentAnnotation.annotationId}</code> <code>${punnet}</code> Access the punnet as an object. From there, all datasets and subobjects can be accessed.The accessor is generally used for conditions. <code>${punnetId.toString().startsWith('My')}</code> <code>${documents}</code> The list of the documents stored in the punnet. <code>${documents.size()}</code> <code>${documents.get(0)}</code> <code>${step}</code> The name of the step where the pattern is called. <code>${map}</code> The name of the map which is run during this campaign. Often used for output directory names <code>${map}/my_output_file.csv</code> <code>${campaign}</code> The name of the campaign. Often used for output directory names <code>${map}/${campaign}/my_output_file.csv</code>","tags":["configuration","Java"]},{"location":"advanced/patterns/#using-java-classes","title":"Using Java classes","text":"<p>Pattern can also be used to enrich data, relying on the basic Java classes.</p> <p>Hint</p> <p>The required syntax is <code>T(clazz)</code>.</p> <p>For example, adding an UUID created on-the-fly would just required using the following pattern:</p> <pre><code>${T(java.util.UUID).randomUUID().toString()}\n</code></pre> <p></p> <p>An other example could be to add today's date as a new data. Such a pattern might go like:</p> <pre><code>${T(java.time.LocalDate).now().toString()}\n</code></pre> <p>Bringing it further, we might also want the time when the document got through the migration (namely this AlterDocumentProperties task), with</p> <pre><code>${T(java.time.LocalDateTime).now().toString()}\n</code></pre> <p>Mapping these patterns respectively to a new <code>today</code> and <code>currentTime</code> data will result in the following punnet :</p> <pre><code>{\n    \"punnetId\": \"doc_0_0#1\",\n    \"data\": {\n        ...\n    },\n    \"documents\": [\n        {\n            \"documentId\": \"doc_0_0\",\n            \"data\": {\n                ...\n                \"currentTime\": \"2023-06-14T10:42:15.204958800\",\n                \"today\": \"2023-06-14\"\n            }\n        }\n    ]\n}\n</code></pre>","tags":["configuration","Java"]},{"location":"advanced/scheduler/","title":"Schedule your campaigns","text":"<p>Fast2 has a module allowing you to schedule your next runs. This feature is accessible only through the run place. Click on the clock icon at the top banner and you're in.</p>"},{"location":"advanced/scheduler/#jobs-purpose","title":"Jobs purpose","text":"<p>A table of jobs is displayed, each line representing a job. The latter will be used to plan your next runs. However, a few details are needed in order to let the job perform the given action.</p> <p>A job is composed as follow :</p> <ul> <li>A unique name composed exclusively of alphanumerical characters. Dash and underscore are accepted, others are forbidden. It's imposible to create two jobs with the same name.</li> <li>The map to run : you can pick in the dropdown list any map created earlier.</li> <li>A campaign : specify the name the dedicated input field. You can either write the name of an already existing campaign or a new one.</li> <li>A CRON expression to schedule precisely your runs.</li> <li>An action among <code>Start as new</code>, <code>Rerun</code>, <code>Stop</code> or <code>Resume</code>. It's precisely the same actions you can do in the run place.</li> <li>A maximum number of executions, if you want to limit the number of times the job will run.</li> <li>A boolean activate to indicate if you're job must be ran or not (useful feature to have a job stand by, already configured for later operations).</li> </ul> <p>The other columns are purely indicatives. You will find the number of executions for each job, the date of the last and when the next run has been planned.</p> <p>Jobs are automatically saved when all their fields are correctly filled. If the name or the CRON expression have errors, you have to fix these errors to make the job savable.</p>"},{"location":"advanced/scheduler/#jobs-creation-and-deletion","title":"Jobs creation and deletion","text":"<ul> <li> <p>Button CREATE: Located at the end of the first row of the table, this button allows adding the entered values to create a new job. Once clicked, the entered values are used to create a new job, which is then added to the list of already created jobs. Users can then see their new job appear in the list of jobs.</p> </li> <li> <p>Button DELETE: Found at the end of each row representing an existing job, this button allows users to delete a job from the list. By clicking on this button, users can permanently delete a selected job. Before confirming the deletion, a confirmation is requested to prevent any accidental deletion.</p> </li> </ul>"},{"location":"advanced/scheduler/#caution","title":"Caution","text":"<p>Despite Fast2 validates the name and the CRON expression, the match between the campaign and the job action is not tested. It is the user's responsibility to have a clear idea about what to do with which campaign.</p> <p>If the action of a job is to stop a campaign, nothing will happen if the campaign is not running. The behavior is the same as the run place. See our run section as a reminder in case you need it.</p> <p>Additionally, it is important to note that when executing a job as START AS NEW, the next-to-come campaign will be triggered only once the previous campaign ends (status FINISHED). This ensures sequential execution and prevents overlapping campaigns, maintaining the integrity of the workflow.</p> <p>For example</p> <p>For example, even if the CRON expression indicates a frequency of 10 seconds with the CRON expression <code>*/10 * * * * *</code> between each trigger, the next campaign will only start once the previous one is finished.</p>"},{"location":"advanced/scheduler/#cron-expression","title":"Cron expression","text":"<p>A CRON is a String composed of 6 or 7 fields separated by spaces. Each field represents a specific section of time. The 1st field will be the second unit, the 2nd one will concern the minutes and so on. All the fields are listed below with the allowed characters.</p> Field Name Mandatory Allowed Values Allowed Special Characters Seconds 0-59 , - * / Minutes 0-59 , - * / Hours 0-23 , - * / Day of month 1-31 , - * ? / L W Month 1-12 or JAN-DEC , - * / Day of week 1-7 or SUN-SAT , - * ? / L ## Year empty, 1970-2099 , - * /"},{"location":"advanced/scheduler/#examples-of-cron","title":"Examples of cron","text":"<p>These examples are basic ones but they highlight the interest of using cron expressions.</p> <ul> <li>Every 2 minutes</li> </ul> Seconds Minutes Hours Day Of Month Month Day Of Week Year 0 0/2 * ? * * * <ul> <li>Fire at 10:15am every day</li> </ul> Seconds Minutes Hours Day Of Month Month Day Of Week Year 0 15 10 ? * * * <ul> <li>Fire every Sunday at noon</li> </ul> Seconds Minutes Hours Day Of Month Month Day Of Week Year 0 0 12 ? * SUN * <p>Cron expressions can be really useful but might quite hard to use.</p> <p>Build it yourself</p> <p>To generate your own cron expressions easily, we suggest you to use some web generator (like freeformatter.com).</p>"},{"location":"advanced/scheduler/#maximum-number-of-executions","title":"Maximum number of executions","text":"<p>The Max # of executions input field allows users to specify the maximum number of times a campaign should be executed.</p> <ul> <li> <p>Blank: If left blank, the campaign will be executed indefinitely.</p> </li> <li> <p>Invalid Input: If the user enters a number that is equal to or less than the number of runs already completed, an error message \"Must be higher than actual # of executions\" will be displayed. The input field will retain its last valid entry.</p> </li> <li> <p>Valid Input: A valid input is one where the number entered is greater than the number of executions already performed, or left blank. Upon entering a valid number, the value will be saved. If the \"Active\" checkbox was disabled and all other fields are valid, it will become enabled.</p> </li> <li> <p>Execution Limit Reached: Once the number of runs reaches the value entered in this field, returning to the scheduler will display the message \"Number of executions reached.\"</p> </li> </ul>"},{"location":"advanced/shared-objects/","title":"Shared objects","text":"<p>Warning</p> <p>This page has been moved to the Knowledge-Base at \ud83d\udd17Understand the Shared Objects in Fast2</p>"},{"location":"advanced/ui-as-https/","title":"HTTPS Configuration Guide","text":"<p>This guide outlines the steps to enable HTTPS for your application, including generating a self-signed SSL certificate, importing it into the Java keystore, and configuring your server to use HTTPS. </p>"},{"location":"advanced/ui-as-https/#tldr","title":"TL;DR","text":"<p>Generate a self-signed certificate</p> <pre><code>`keytool -genkeypair -v -keystore fast2_ui.jks -keyalg RSA -keysize 2048 -storepass changeit -validity 365 -alias fast2_ui` \n</code></pre> <p>Export the public certificate</p> <pre><code>`keytool -export -keystore fast2_ui.jks -alias fast2_ui -file fast2_ui.crt -storepass changeit` \n</code></pre> <p>Import the certificate into the Java keystore</p> <pre><code>`keytool -importcert -file /path/to/fast2_ui.crt -keystore /path/to/your/jdk/lib/security/cacerts -alias fast2_ui` \n</code></pre> <p>Configure the server in <code>application.properties</code> <pre><code>server.protocol=https\nserver.ssl.key-store: config/fast2_ui.p12\nserver.ssl.key-store-password: password\nserver.ssl.key-store-type: pkcs12\nserver.ssl.key-alias: fast2_ui\nserver.ssl.key-password: password\nserver.ssl.trust-store=config/truststore.jks\n</code></pre></p>"},{"location":"advanced/ui-as-https/#1-generate-a-self-signed-ssl-certificate","title":"1. Generate a Self-Signed SSL Certificate","text":"<p>To configure HTTPS, the first step is to generate an SSL certificate. For testing purposes, we will use a self-signed certificate. Run the following command to create a new keystore and generate the certificate:</p> <pre><code>`keytool -genkeypair -v -keystore fast2_ui.jks -keyalg RSA -keysize 2048 -storepass changeit -validity 365 -alias fast2_ui`\n</code></pre> <p>Explanation of the command: -   <code>-genkeypair</code>: This generates a key pair (private key and public key). -   <code>-v</code>: This option enables verbose output, so you can see detailed information during the key generation process. -   <code>-keystore fast2_ui.jks</code>: The name of the keystore file that will store the private key and certificate. -   <code>-keyalg RSA</code>: The algorithm used to generate the key (RSA). -   <code>-keysize 2048</code>: The size of the key in bits (2048 bits is a good size for security). -   <code>-storepass changeit</code>: The password for the keystore (you can choose any password you like). -   <code>-validity 365</code>: The validity of the certificate, which in this case is set to 365 days. -   <code>-alias fast2_ui</code>: The alias used to identify the key in the keystore.</p> <p>This command will generate a keystore file (<code>fast2_ui.jks</code>) containing a private key and a self-signed certificate.</p>"},{"location":"advanced/ui-as-https/#2-export-the-public-certificate","title":"2. Export the Public Certificate","text":"<p>Next, you need to extract the public certificate from the keystore to import it into the Java system keystore. Use the following command to export the certificate:</p> <p><pre><code>`keytool -export -keystore fast2_ui.jks -alias fast2_ui -file fast2_ui.crt -storepass changeit`\n</code></pre> This command extracts the public certificate (<code>fast2_ui.crt</code>) from the keystore. This certificate will later be imported into the Java system keystore to be trusted by Java applications.</p>"},{"location":"advanced/ui-as-https/#3-import-the-certificate-into-the-java-keystore","title":"3. Import the Certificate into the Java Keystore","text":"<p>Now that you have the public certificate, you need to import it into the Java system keystore (<code>cacerts</code>) so that the Java environment can trust it. Use the following command to import the certificate:</p> <pre><code>`keytool -importcert -file /path/to/fast2_ui.crt -keystore /usr/lib/jvm/java-11-openjdk-amd64/lib/security/cacerts -alias fast2_ui` \n</code></pre> <ul> <li>Replace <code>/path/to/fast2_ui.crt</code> with the actual path to the <code>fast2_ui.crt</code> file you exported earlier.</li> <li>The <code>-keystore</code> option points to the Java system keystore (<code>cacerts</code>), which stores trusted certificates.</li> <li>The <code>-alias</code> is used to identify the certificate in the keystore.</li> </ul> <p>When prompted, enter the password for the Java keystore (the default is <code>changeit</code>).</p> <p>If the alias already exists in the keystore, you will see a warning. You can confirm that the certificate should be imported anyway.</p>"},{"location":"advanced/ui-as-https/#4-configure-the-server-for-https","title":"4. Configure the Server for HTTPS","text":"<p>With the certificate installed, the next step is to configure your server to use HTTPS. Below are the typical configuration steps for a Spring Boot application:</p>"},{"location":"advanced/ui-as-https/#a-update-applicationproperties","title":"a. Update <code>application.properties</code>","text":"<p>For Spring Boot, you need to configure the application to use HTTPS. In the <code>application.properties</code> file, add the following settings:</p> <pre><code>server.protocol=https\nserver.ssl.key-store: config/fast2_ui.p12\nserver.ssl.key-store-password: password\nserver.ssl.key-store-type: pkcs12\nserver.ssl.key-alias: fast2_ui\nserver.ssl.key-password: password\nserver.ssl.trust-store=config/truststore.jks\n</code></pre> <p>Explanation of the properties: - <code>server.protocol=https</code>: The new secured protocol  - <code>server.ssl.key-store=&lt;path_to_fast2_ui.jks&gt;</code>: Specifies the location of the keystore containing the certificate and private key. You can place this file in your classpath. -   <code>server.ssl.key-store-password=changeit</code>: The password for the keystore. -   <code>server.ssl.key-store-type:pkcs12</code>: The type of the key store (JKS or PKCS12). - <code>server.ssl.key-alias: fast2_ui</code>: The alias that identifies the key in the key store. - <code>server.ssl.key-password: password</code>: The password used to access the key in the key store. - <code>server.ssl.trust-store=config/truststore.jks</code>: The trust store path in case of self signed certificate</p>"},{"location":"advanced/ui-as-https/#b-use-a-valid-ssl-certificate","title":"b. Use a Valid SSL Certificate","text":"<p>For production, it's recommended to use an SSL certificate signed by a trusted certificate authority (CA) rather than a self-signed certificate. However, if you're using a self-signed certificate for testing, you need to ensure that clients trust this certificate.</p>"},{"location":"advanced/ui-as-https/#5-verify-and-test-the-https-setup","title":"5. Verify and Test the HTTPS Setup","text":"<p>Once the keystore is set up and the server configuration is updated, restart your application and verify that it is correctly serving traffic over HTTPS.</p> <p>To test, open your browser and visit <code>https://localhost:1789</code> (or the appropriate URL/port for your application). You should see that the connection is secured, and the SSL certificate is correctly applied.</p> <p>If everything is configured correctly, you will no longer see SSL errors, and the connection should be encrypted using HTTPS.</p>"},{"location":"advanced/ui-as-https/#6-troubleshooting-ssl-errors","title":"6. Troubleshooting SSL Errors","text":"<p>If you encounter SSL errors such as \"PKIX path building failed\" or \"SSLHandshakeException\", it is usually because the Java environment does not trust the certificate. You can resolve this by ensuring that the certificate is correctly imported into the Java keystore (<code>cacerts</code>), as described in step 3.</p> <p>If using a self-signed certificate, you may need to manually add it to the list of trusted certificates in all client environments.</p>"},{"location":"blog/","title":"Index","text":"<p>all my blogs</p>"},{"location":"blog/first-blog/","title":"my first blog [title]","text":""},{"location":"catalog/","title":"Catalog","text":"<p>All along this documentation concerning the configuration of Fast2 objects (either tasks or tools used within tasks), consider the default value set to <code>false</code> if no default value is mentionned for boolean fields.</p> <p>Here are the 8 categories we cover:</p> <ol> <li> <p>Sources</p> <p>Scan the source environment to identify documents for migration based on criteria.</p> </li> <li> <p>Content Sources</p> <p>Extract content, metadata, folder references, and all versions from the source environment.</p> </li> <li> <p>Credentials</p> <p>Establish connections with remote systems to enable communication with our migration tool.</p> </li> <li> <p>Conversion Tasks</p> <p>Convert contents, including documents and annotations, as part of the migration process.</p> </li> <li> <p>Transformation Tasks</p> <p>Focus on metadata-oriented operations, such as transforming, enriching, validating, or changing metadata formats.</p> </li> <li> <p>Helpers</p> <p>Perform handy tasks for side operations to support and enhance your migration process.</p> </li> <li> <p>Tools</p> <p>Perform intermediate tasks for basic operations, independent of the source or destination environments.</p> </li> <li> <p>Injectors</p> <p>Upload or inject migration data and documents into the destination system.</p> </li> </ol> <p>In each category, you'll find detailed information about the specific configuration fields for each workflow task, providing comprehensive guidance for your migration needs.</p>"},{"location":"catalog/contentsource/","title":"Content sources","text":""},{"location":"catalog/contentsource/#AWSContentSource","title":"AWSContentSource  - Extract content from AWS S3 bucket","text":"<p>Mandatory settings</p> Key Type Description AWS access credentials AWSConnectionProvider Credentials of the user (must have been granted AmazonS3FullAccess permission). <p>Optional settings</p> Key Type Description Default value ARN key for getAwsPrefixKMS encryption <code>String</code> Bucket name <code>String</code> Name of the S3 bucket where the content is stored. <code>${bucket}</code> Content path (S3 object key) <code>String</code> Path leading to S3 object corresponding to the content you intend to extract from the bucket. To use this options, you must enable the content extraction option.  <p> Ex/  ${contentPath}</p> Extract contents <code>Boolean</code> All existing contents of documents will be replaced by the newly found contents, retrieved from the S3 bucket. If the S3 objects are parsed as punnets, then the contents will be attached based on the 'Content path' input field. Process s3 objects as punnets <code>Boolean</code>"},{"location":"catalog/contentsource/#AlfrescoContentExtractor","title":"AlfrescoContentExtractor  - Alfresco content extractor using CMIS technology","text":"<p>This alfresco extractor will use the CMIS technology to fetch your document content from a given Alfresco repository</p> <p>Mandatory settings</p> Key Type Description Alfresco connection provider AlfrescoCMISConnectionProvider CMIS version must be 1.1 <p>Optional settings</p> Key Type Description Default value Property Helper PropertyHelper Extract document content <code>Boolean</code> <code>true</code>"},{"location":"catalog/contentsource/#AlfrescoRestContentExtractor","title":"AlfrescoRestContentExtractor  - Alfresco content extractor using Alfresco REST protocol","text":"<p>This task relies on the Alfresco public REST API (with v1.0.4 of the Alfresco REST client) to retrieve documents and metadata into a given Alfresco instance</p> <p>Mandatory settings</p> Key Type Description Alfresco connection provider AlfrescoRESTConnectionProvider <p>Optional settings</p> Key Type Description Default value Date format <code>String</code> <code>E MMM dd HH:mm:ss Z YYYY</code> CMIS query <code>String</code> CMIS SQL query, pattern resolvable, to fetch document based on alternative data. Using this feature will create new docs in the punnet with corresponding ID of documents. Consider following this task with a secondary AlfrescoRestContentExtractor task to extract data and contents. Extract content <code>Boolean</code> Extract all versions <code>Boolean</code> Extract the superseded versions of the documents matching the query Extract parent site <code>Boolean</code> If the document is not stored in an Alfresco site, nothing will happen. Otherwise, the site details will be attached to the punnet dataset. Map permissions <code>Boolean</code> Map permissions to either the document, folder or site. Map parent folder <code>Boolean</code> Map direct parent folder info onto the related document. Extract folders as tree <code>Boolean</code> Extract folders as tree, with all parent folders. This option must be selected if you wish to map permissions of parent folders. Extract users as email addresses <code>Boolean</code>"},{"location":"catalog/contentsource/#AlfrescoRestSiteExtractor","title":"AlfrescoRestSiteExtractor  - Alfresco Site extractor using Alfresco REST protocol","text":"<p>This task relies on the Alfresco public REST API (with v1.0.4 of the Alfresco REST client) to retrieve sites into a given Alfresco instance.</p> <p>Mandatory settings</p> Key Type Description Default value Alfresco connection provider AlfrescoRESTConnectionProvider AFTS query <code>String</code> Query used to retrieve all sites from Alfresco TYPE:\\\"st:site\\\""},{"location":"catalog/contentsource/#CMContentExtractor","title":"CMContentExtractor  - Basic content extractor from Content Manager","text":"<p>This class is dedicated to the extraction of content for the Content Manager solution. You'll have the possiblity to extract annotations, custom properties or even logs.</p> <p>Mandatory settings</p> Key Type Description CM connection provider CMConnectionProvider <p>Optional settings</p> Key Type Description Default value Extact history logs <code>Boolean</code> <code>true</code> Extract standard system properties <code>Boolean</code> <code>true</code> Extract advanced system properties from DKDDO object <code>Boolean</code> <code>true</code> Extract document annotation <code>Boolean</code> <code>false</code> Extract note logs <code>Boolean</code> <code>false</code> Extract custom properties <code>Boolean</code> <code>true</code> Extract note logs as annotations <code>Boolean</code> <code>false</code> Extract document content <code>Boolean</code> <code>true</code>"},{"location":"catalog/contentsource/#CMODContentExtractor","title":"CMODContentExtractor  - Basic CMOD content extractor","text":"<p>Mandatory settings</p> Key Type Description CMOD Connection Settings CMODConnectionProvider <p>Optional settings</p> Key Type Description Default value Pattern to store resource files <code>String</code> <code>${resourceId}</code> Export attached CMOD resources <code>Boolean</code> <code>true</code>"},{"location":"catalog/contentsource/#DctmContentExtractor","title":"DctmContentExtractor  - Extract document-related details from Documentum","text":"<p>This Documentum connector is designed for extraction of document versions, metadata, folders and content (only the 1st content of a document) from a Documentum repository. Multiversion documents will be retrieved from the shared 'i_chronicle_id'. Since Documentum architecture involves particular port and access management, a worker should be started on the same server where Documentum is running; Make sure to check the basic requirements at the setup for Documentum on the official Fast2 documentation.</p> <p>Optional settings</p> Key Type Description Default value Connexion information to Documentum Repository DctmConnectionProvider Extract folders <code>Boolean</code> <code>true</code> Map empty or unset properties <code>Boolean</code> Attach Documentum metadata onto document dataset even if the value is missing or unset. Extract renditions <code>Boolean</code> Check this option to extract renditions of each document. They will be attached as side-contents in the document, with properties populated from original renditions properties. Whitelist for metadata to extract <code>String</code> All values need to be separated by comma <code>,</code>. Extract metadata <code>Boolean</code> <code>true</code> Continue on fail <code>Boolean</code> If <code>true</code>, any error which occurs during extraction of either metadata, content or folders will trigger an exception. Otherwise, the error will be found in the logs. Extract content <code>Boolean</code> <code>true</code> Extract all versions <code>Boolean</code>"},{"location":"catalog/contentsource/#FileNet35ContentSource","title":"FileNet35ContentSource  - Extract content from FileNet 3.5","text":"<p>Use this task to retrieve content of documents to extract from a given FileNet instance. This task needs to be preceeded by a FileNet35Source task.</p> <p>Mandatory settings</p> Key Type Description FileNet 3.5 connection provider FileNet35ConnectionProvider Connection parameters to the FileNet instance <p>Optional settings</p> Key Type Description Default value Ignore documents with zero-sized content <code>Boolean</code> Document without any content will not be processed <code>false</code>"},{"location":"catalog/contentsource/#FileNetContentExtractor","title":"FileNetContentExtractor  - Extract document content from FileNet P8","text":"<p>This task is not a real source task. The documents to be extracted are identified by an BlankSource task generating a set of 'empty' Punnets, i.e. containing only documents each bearing a document number (documentId) to extract.</p> <p>Mandatory settings</p> Key Type Description FileNet connection provider FileNetConnectionProvider Connection parameters to the FileNet instance <p>Optional settings</p> Key Type Description Default value Property Helper to use PropertyHelper Extract object type properties <code>Boolean</code> The FileNet P8 metadata of the document which are Object type will be saved at the punnet level <code>false</code> Compound parent data for children references <code>String</code> Name of the parent document property under which the children properties will be stored. Object store name <code>String</code> Name of the repository to extract from Compound children data to record <code>String</code> Name of the child property to store in the parent. Consider setting parent data name as well. Extract FileNet system properties <code>Boolean</code> Save the FileNet system properties as document metadata <code>false</code> Default mimetype <code>String</code> Default mimetype to set if the one from FileNet is empty Skip annotation exceptions <code>Boolean</code> Extract documents even if related annotations are in exception like null content <code>false</code> Extract FileNet security <code>Boolean</code> The security of the document will be saved at the punnet level <code>false</code> SQL fetch query <code>String</code> Use this SQL to fetch documents based on your criteria.  <p> Ex/  SELECT [Id],[DocumentTitle] FROM Document WHERE [Property] = '${myCriterion}'</p> Extract folders absolute path <code>Boolean</code> The absolute path of the folder inside the FileNet instance will be extracted during the process <code>false</code> Extract content <code>Boolean</code> The document content will be extracted during the process <code>true</code> Extract all versions <code>Boolean</code> Extract the superseded versions of the documents matching the query Extract annotations <code>Boolean</code> All annotations owned by the document will be extracted <code>true</code>"},{"location":"catalog/contentsource/#FlowerContentExtractor","title":"FlowerContentExtractor  -","text":"<p>Mandatory settings</p> Key Type Description Flower component category (DOCUMENT, TASK, FOLDER or VIRTUAL_FOLDER) <code>String</code> <p>Optional settings</p> Key Type Description Default value Extract document annotations <code>Boolean</code> <code>false</code> Extract component facts <code>Boolean</code> <code>false</code> FlowerDocsConnectionProvider Extract document file content <code>Boolean</code> <code>false</code>"},{"location":"catalog/contentsource/#IDMISContentExtractor","title":"IDMISContentExtractor  - ImageServices WAL JNI-bridged Extractor","text":"<p>This task extracts documents from the Panagon Image Services ECM (indexes, optional content and annotations). One punnet of one document for each ECM document. However, it's not a real source task. The documents to be extracted are identified by a BlankSource task generating a set of empty Punnets, i.e. containing only documents each bearing a document number (documentId) to extract.</p> <p>Mandatory settings</p> Key Type Description Password <code>String</code> Password of the aforementioned username Connection organization <code>String</code> Organization name for the connection Connection domain <code>String</code> Domain name of the connection Username <code>String</code> Login with scope to access the docbase with proper rights <p>Optional settings</p> Key Type Description Default value Annotations in ARender format <code>Boolean</code> Convert annotations to ARender format <code>false</code> Annotation converter ParseISAnnotation Specific converter from IS format. Allow to resize the extracted annotations Annotations in raw format <code>Boolean</code> Save annotation contents in raw format inside the punnet <code>false</code> Version of libIDMIS <code>String</code> This task is based on the WAL library and on the specific Fast2 library 'libIDMIS.dll'. This library must be in a directory of the Windows PATH. In the wrapper.conf or hmi-wrapper.conf file, activate the use of this library: wrapper.java.library.path.  = ../libIDMIS/w32For the moment, only 32-bit libraries are configured <code>libIDMIS-1.0.15</code> Test scenarios <code>Boolean</code> Empty testing stub instead of libIDMIS <code>false</code> Connection terminal <code>String</code> Terminal name for the connection Use opacity for annotations <code>Boolean</code> <code>false</code> Unrecognized annotation file path <code>String</code> Path of the alternative annotation xml file for unrecognized annotation. If not specified the punnet will go in exception Extract document content <code>Boolean</code> The document will be extracted with its content <code>true</code> Extract document annotation <code>Boolean</code> The associated annotations will be extracted <code>true</code>"},{"location":"catalog/contentsource/#MDOParserExternalContent","title":"MDOParserExternalContent  - Parse FWTF (Fixed Width Text File) with external content to a punnet description","text":"<p>An MDO file is a flat file defined such as: each line corresponds to a document and each line contains information about the document The extraction of information from each line is based on a CSV configuration file, which provides the name of the metadata to be inserted into the punnet document, as well as its characteristics.</p> <p>It consists of the following columns, separated by a comma:</p> <ul> <li>Field: name of the metadata to add \\n</li> <li>Length: length of the metadata. If the value is greater than this length, then it will be truncated. If the value is lower, it will be completed by spaces on the right \\n</li> <li>Offset: position in MDO file \\n</li> <li>Mandatory: Y / N \\n</li> <li>Occurs: number of occurrences allowed for the field. The successive values \u200b\u200bof the field will then be added to the values \u200b\u200bof the metadata (respecting the Length parameter for each one) \\n</li> <li>Type: Type of metadata to add to the punnet document \\n</li> </ul> <p>The MDOParserExternalContent task is used to retrieve external content for each document. To do this, the name of the column defining the content path is specified in the task settings.</p> <p>Mandatory settings</p> Key Type Description MDO format specification file path <code>String</code> CSV configuration absolute file path containing MDO format specification <p>Optional settings</p> Key Type Description Default value File scanner FileScanner Recovers your files Date format <code>String</code> Date format used in MDO file. Must be the same for each line of the document <code>yyyy-MM-dd</code> Property name containing path content <code>String</code> Name of the field in the configuration file that contains the path to the content. If not filled, the content will not be saved in the punnet Create one punnet for each document of FWTF <code>Boolean</code> If true then a punnet with one document will be created for each entry in the MDO file. Otherwise, one punnet will be created containing as many documents as there are entries in the MDO file <code>false</code> Dataline property name <code>String</code> Name of the metadata that will contain the MDO line read. If not specified, the line read will not be saved in the punnet contentLocationAbsolute <code>Boolean</code> Last punnet property name <code>String</code> Data name indicating which punnet is the last of document in punnet. If null, data isn't added in punnet. For multipunnet case only"},{"location":"catalog/contentsource/#MDOParserInternalContent","title":"MDOParserInternalContent  - FWTF (Fixed Width Text File) parser with internal content","text":"<p>Like the MDOParserExternalContent task, the MDOParserExternalContent source allows you to parse each line of the MDO file in Punnet. The difference between these two tasks is that the content is stored inside the MDO itself. The start and end of the content is defined by a tag specified in the task settings</p> <p>Mandatory settings</p> Key Type Description MDO format specification file path <code>String</code> CSV configuration absolute file path containing MDO format specification <p>Optional settings</p> Key Type Description Default value File scanner FileScanner Recovers your files Date format <code>String</code> Date format used in MDO file. Must be the same for each line of the document <code>yyyy-MM-dd</code> End tag <code>String</code> End tag property name signifying the end of the content Create one punnet for each document of FWTF <code>Boolean</code> If true then a punnet with one document will be created for each entry in the MDO file. Otherwise, one punnet will be created containing as many documents as there are entries in the MDO file <code>false</code> Dataline property name <code>String</code> Name of the metadata that will contain the MDO line read. If not specified, the line read will not be saved in the punnet Last punnet property name <code>String</code> Data name indicating which punnet is the last of document in punnet. If null, data isn't added in punnet. For multipunnet case only Original text content property name <code>String</code> Data name containing original text content. If null, data isn't added in the punnet"},{"location":"catalog/contentsource/#OpenTextContentSource","title":"OpenTextContentSource  - OpenText content extractor using OpenText REST protocol","text":"<p>Mandatory settings</p> Key Type Description OpenText credentials OpenTextCredentials OpenText client OpenTextRestClient <p>Optional settings</p> Key Type Description Default value Extract all versions <code>Boolean</code> Extract the superseded versions of the documents matching the query Extract document metadata <code>Boolean</code> Save metadata as document metadata <code>false</code> Extract document categories <code>Boolean</code> Save categories as document metadata <code>false</code> Extract content <code>Boolean</code> The document content will be extracted during the process <code>true</code> Ticket period <code>Integer</code> Time in seconds between two ticket creation <code>60</code>"},{"location":"catalog/contentsource/#SQLContentExtractor","title":"SQLContentExtractor  - Extract document content from SQL","text":"<p>Extract clob and blob object-types. Classic types like varchar are extraced as well</p> <p>Mandatory settings</p> Key Type Description SQL connection provider SQLQueryGenericCaller SQL query Pattern Select precisely documents you want to extract through a classic SQL query <p>Optional settings</p> Key Type Description SQL mapping for content <code>String/String map</code> Mapping of SQL properties to document content."},{"location":"catalog/converter/","title":"Conversion tasks","text":""},{"location":"catalog/converter/#ArchiveBuilder","title":"ArchiveBuilder  - Punnet zipper","text":"<p>Zip punnets into a zip file. A zip cannot contains a few punnets but documents carried by the punnet can be splitted into multiple zip files.</p> <p>Optional settings</p> Key Type Description Default value Zip all documents in a single zip file <code>Boolean</code> <code>false</code> Zip size limit <code>Integer</code> In megabytes Maximum number of documents per zip <code>Integer</code> The compression level between 0 and 9 (included) <code>Integer</code> Use large number for stronger compression Also include annotation contents <code>Boolean</code> <code>false</code>"},{"location":"catalog/converter/#ConvertCMToP8","title":"ConvertCMToP8  - Convert CM annotations to FileNet P8 annotations. Input annotation format is INI from a JSON file. Only supports one document per punnet. Supported contents are PDF, TIFF and PNG files","text":"<p>Supported types : <ul><li>CMBAnnotationConstants.ANN_TEXT</li><li>CMBAnnotationConstants.ANN_ARROW</li><li>CMBAnnotationConstants.ANN_HIGHLIGHT</li><li>CMBAnnotationConstants.ANN_NOTE</li><li>CMBAnnotationConstants.ANN_RECT</li><li>CMBAnnotationConstants.ANN_LINE</li><li>CMBAnnotationConstants.ANN_STAMP</li><li>CMBAnnotationConstants.ANN_NOTE</li><li>CMBAnnotationConstants.ANN_MASK</li><li>Polygon</li><li>Freehand</li><ul> <p>Optional settings</p> Key Type Description Default value ViewOne annotation parser ViewOneAnnotationConverter Force rectangle transparency <code>Boolean</code> Force rectangles to be transparent even if dedicated property equals 0 Apply ratio <code>Boolean</code> Transform annotation positions using document DPI <code>true</code> Transform rectangle into highlight <code>Boolean</code> Rectangles does not support transparency. Turn them into highlight to keep tranparency <code>false</code> Watermarks on all pages <code>Boolean</code> Apply watermark annotations on each pages of the document <code>false</code>"},{"location":"catalog/converter/#ConvertDoc","title":"ConvertDoc  - Document conversion","text":"<p>Convert your documents using the ConvertDoc library.</p> <p>Optional settings</p> Key Type Description Default value Maximum number of document per call <code>Integer</code> <code>200</code> Temp folder to generate PDF to <code>String</code> Process annotation contents <code>Boolean</code> If annotations are asked to be migrated, you can filter here to process their content(s) or only their metadata <code>false</code> Scan recursive content <code>Boolean</code> Only convert terminal contents and not container ones <code>false</code> Excel hack <code>Boolean</code> Use Microsoft Excel hack <code>true</code> Supported mime-types <code>String list</code> Specify the list of all mime-types of documents which Fast2 will convert Conversion exception is fatal <code>Boolean</code> Conversion exception triggers an exception. Othersie, it's a silent fail <code>true</code> <code>Boolean</code> Throw conversion exceptions <code>Boolean</code> If Fast2 performs document conversion, it can either fail silently or pop an error when the action has not been properly completed <code>true</code> Mime-type : Check document before content <code>Boolean</code> You can assume the file extension is accurate, or ask Fast2 to check the content encoding to identify more precisely the document mime-type. By default, Fast2 will check at content level <code>false</code> ConvertDoc path <code>String</code> Path toward ConvertDoc executable <code>ConvertDoc.exe</code> Process all contents <code>Boolean</code> Fast2 will either only focus on the first encountered content, or process them all <code>true</code> Temp folder to copy source files to <code>String</code> Convert to PDFA <code>Boolean</code> Convert your document to PDFA format <code>false</code>"},{"location":"catalog/converter/#ConvertINIToXFDF","title":"ConvertINIToXFDF  - Annotation converter from INI to XFDF","text":"<p>Convert ViewOne annotations to XML Form Data Format (XFDF). These operations are supported only for PDF and Tiff files. Content dimensions will be fetched to convert these annotations  To improve the performances add these 3 parameters to the startup-worker.bat script before the -jar : '-Dorg.ini4j.spi.IniBuilder=org.ini4j.spi.IniBuilder''-Djavax.xml.transform.TransformerFactory=com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl''-Dorg.ini4j.spi.IniParser=org.ini4j.spi.IniParser'Supported types : - [TEXT]- [RECTANGLE]- [FREEHAND]</p> <p>Optional settings</p> Key Type Description Default value Postit annotation position PageRelativePosition Default position when an exception is thrown Overload text and postit page to the first one if related exception is thrown <code>Boolean</code> Skip conversion error <code>Boolean</code> Do not throw an exception for conversion errors <code>false</code> All note font are black <code>Boolean</code> Keep converted annotations <code>Boolean</code> Do not interrupt punnets if at least one annotation has been converted. Punnets carrying annotations that haven't been converted will be flagged with a data named 'ToReplay' <code>false</code> Text annotation position PageRelativePosition Default position when an exception is thrown"},{"location":"catalog/converter/#ConvertISToFDF","title":"ConvertISToFDF  - Annotation converter from IS to FDF","text":"<p>Convert your old IS annoations to Form Data Format (FDF). FDF file are used to represents form data and annotations in a PDF file with key/value format. They usually contain more information than XFDFs</p> <p>Optional settings</p> Key Type Description Default value Skip conversion error <code>Boolean</code> Do not throw an exception when a conversion is triggered <code>true</code> FileNet XFDF annotation converter FileNetXFDFAnnotationConverter IsAnnotation parser ParseISAnnotation FDF annotation adder FdfAnnotationAdder"},{"location":"catalog/converter/#ConvertISToXFDF","title":"ConvertISToXFDF  - Annotation converter from IS to XFDF","text":"<p>Convert your old IS annoations to XML Form Data Format (XFDF). XFDF file are used to represents form data and annotations in a PDF file through an XML. They usually contain more information than XFDFs</p> <p>Optional settings</p> Key Type Description Default value Popup width <code>Float</code> Sticky note default popup width <code>120</code> Skip conversion error <code>Boolean</code> Do not throw an exception when a conversion is triggered <code>true</code> FileNet XFDF annotation converter FileNetXFDFAnnotationConverter IsAnnotation parser ParseISAnnotation Popup height <code>Float</code> Sticky note default popup height <code>30</code>"},{"location":"catalog/converter/#ConvertLighterPdf","title":"ConvertLighterPdf  - PDF converter","text":"<p>This class allows you to compress your PDF files in order to be lighter than original ones.</p> <p>Optional settings</p> Key Type Description Default value <code>Boolean</code> Standard DPI <code>Integer</code> DPI of a standard PDF document <code>72</code> Process annotation contents <code>Boolean</code> If annotations are asked to be migrated, you can filter here to process their content(s) or only their metadata <code>false</code> Target image format <code>String</code> <code>jpg</code> Scan recursive content <code>Boolean</code> Only convert terminal contents and not container ones <code>false</code> Skip invalid image conversion <code>Boolean</code> Skip image conversion if image is invalid / not supported. Keep the original file <code>true</code> Maximum converted image ratio <code>Float</code> After conversion, compute the size ratio before and after. Do not replace source image when converted image size is larger to this ratio <code>1.0</code> Supported mime-types <code>String list</code> Specify the list of all mime-types of documents which Fast2 will convert Larger threshold to convert <code>Integer</code> Only convert images which are larger than this minimum byte size <code>2000</code> Throw conversion exceptions <code>Boolean</code> If Fast2 performs document conversion, it can either fail silently or pop an error when the action has not been properly completed <code>true</code> Map Mime-type : Check document before content <code>Boolean</code> You can assume the file extension is accurate, or ask Fast2 to check the content encoding to identify more precisely the document mime-type. By default, Fast2 will check at content level <code>false</code> Maximum ratio to apply <code>Float</code> Images will not beconverted if the ratio computation is larger to this value <code>1.0</code> Process all contents <code>Boolean</code> Fast2 will either only focus on the first encountered content, or process them all <code>true</code> Target compression quality <code>Float</code> <code>0.7</code> Target DPI <code>Integer</code> Required target Image dpi <code>300</code>"},{"location":"catalog/converter/#ConvertP8ToXFDF","title":"ConvertP8ToXFDF  - Annotation converter from IS to XFDF","text":"<p>Convert your old IS annotations to XML Form Data Format (XFDF). XFDF file are used to represents form data and annotations in a PDF file through an XML. They usually contain more information than XFDFs</p> <p>Optional settings</p> Key Type Description Default value Skip conversion error <code>Boolean</code> Do not throw an exception for conversion errors <code>false</code> Default page height <code>Float</code> Default page height used for text and mail document Remove annotations border <code>Boolean</code> Most of the time, annotations have by default a border set to 1. Set to true will remove the border Keep background transparency <code>Boolean</code> Make background transparent when it is white <code>false</code> Default page width <code>Float</code> Default page width used for text and mail document Font size ratio <code>Integer</code> Multiply the font size value by this ratio FileNet XFDF annotation converter FileNetAnnotationConverter Default post it location PageRelativePosition Overwrite coordinates for each post it annotation Create one annotation container per annotation <code>Boolean</code> Overwrite border width <code>Integer</code> Value of border width for proprietary and arrow annotations Date format <code>String</code> Date format of your properties stored by annotations  <p> Ex/  2021-10-01T12:04:56.0000765+0200</p> <code>yyyy-MM-dd'T'HH:mm:ss.SSSSSSSZ</code> Highlight opacity <code>Integer</code> Overwrite the opacity in percent of highlights annotations  <p> Ex/  30</p>"},{"location":"catalog/converter/#ConvertRipole","title":"ConvertRipole  - Convert ripole files","text":"<p>\u26a0\ufe0f Deleted: The <code>ConvertRipole</code> task is deleted and no longer available in Fast2 from v2025.0.0.</p> <p>Convert ripoles files to PDF format.</p> <p>Optional settings</p> Key Type Description Default value Temp executable path <code>String</code> <code>/tmp/temp_</code> Ripole executable path <code>String</code>"},{"location":"catalog/converter/#ConvertTalk","title":"ConvertTalk  - Talk converter","text":"<p>Convert your talk files to PDF using iText Library.</p> <p>Optional settings</p> Key Type Description Default value Process annotation contents <code>Boolean</code> If annotations are asked to be migrated, you can filter here to process their content(s) or only their metadata <code>false</code> Scan recursive content <code>Boolean</code> Only convert terminal contents and not container ones <code>false</code> Maximum input text size <code>Long</code> Limit in bytes <code>1024 * 1024</code> Supported mime-types <code>String list</code> Specify the list of all mime-types of documents which Fast2 will convert Skip PDF creation <code>Boolean</code> Only perform text parsing <code>false</code> Throw conversion exceptions <code>Boolean</code> If Fast2 performs document conversion, it can either fail silently or pop an error when the action has not been properly completed <code>true</code> Auto-detect encoding <code>Boolean</code> Automatically detect the source text encoding used <code>true</code> Mime-type : Check document before content <code>Boolean</code> You can assume the file extension is accurate, or ask Fast2 to check the content encoding to identify more precisely the document mime-type. By default, Fast2 will check at content level <code>false</code> Keep talk header <code>Boolean</code> Do not parse the talk header and keep the original one <code>false</code> Source text encoding <code>String</code> Encoding used for the source files  <p> Ex/  CP850</p> Process all contents <code>Boolean</code> Fast2 will either only focus on the first encountered content, or process them all <code>true</code> Font description <code>String</code> Format as {font family} {size} {style} where font family is one of {COURIER, HELVETICA, TIMES_ROMAN, SYMBOL, ZAPFDINGBATS} and style is 0:normal 1:bold 2:italic 4:underline 8:strikethru"},{"location":"catalog/converter/#ConvertText","title":"ConvertText  - Text converter","text":"<p>Optional settings</p> Key Type Description Default value Process annotation contents <code>Boolean</code> If annotations are asked to be migrated, you can filter here to process their content(s) or only their metadata <code>false</code> Scan recursive content <code>Boolean</code> Only convert terminal contents and not container ones <code>false</code> Maximum input text size <code>Long</code> Limit in bytes <code>1024 * 1024</code> Supported mime-types <code>String list</code> Specify the list of all mime-types of documents which Fast2 will convert Skip PDF creation <code>Boolean</code> Only perform text parsing <code>false</code> Throw conversion exceptions <code>Boolean</code> If Fast2 performs document conversion, it can either fail silently or pop an error when the action has not been properly completed <code>true</code> Auto-detect encoding <code>Boolean</code> Automatically detect the source text encoding used <code>true</code> Mime-type : Check document before content <code>Boolean</code> You can assume the file extension is accurate, or ask Fast2 to check the content encoding to identify more precisely the document mime-type. By default, Fast2 will check at content level <code>false</code> Source text encoding <code>String</code> Encoding used for the source files  <p> Ex/  CP850</p> Process all contents <code>Boolean</code> Fast2 will either only focus on the first encountered content, or process them all <code>true</code> Font description <code>String</code> Format as {font family} {size} {style} where font family is one of {COURIER, HELVETICA, TIMES_ROMAN, SYMBOL, ZAPFDINGBATS} and style is 0:normal 1:bold 2:italic 4:underline 8:strikethru"},{"location":"catalog/converter/#ConvertWangToXFDF","title":"ConvertWangToXFDF  - Convert Wang annotations to XFDF","text":"<p>Optional settings</p> Key Type Description Default value Charset used for text <code>String</code> <code>windows-1252</code> Tiff embed annotations <code>Boolean</code> Page number property name <code>String</code> Property of the content used to put the annotation on the correct page content. If null, the annotation will be on first page. Fail if no annotation was parsed <code>Boolean</code> Skip annotation parse exceptions <code>Boolean</code> <code>Integer</code>"},{"location":"catalog/converter/#ConvertXFDFToP8","title":"ConvertXFDFToP8  - Annotation converter from XFDF to IS","text":"<p>Convert your XFDF annotations P8 format. This is mostly used to rollback from P8 to XFDF during complex migration.</p> <p>Optional settings</p> Key Type Description Default value Skip conversion error <code>Boolean</code> Do not throw an exception when a conversion is triggered <code>true</code>"},{"location":"catalog/converter/#ConverterCMToXFDF","title":"ConverterCMToXFDF  - Convert CM annotations to XFDF annotations","text":"<p>Supported types : <ul><li>CMBAnnotationConstants.ANN_TEXT</li><li>CMBAnnotationConstants.ANN_ARROW</li><li>CMBAnnotationConstants.ANN_HIGHLIGHT</li><li>CMBAnnotationConstants.ANN_STAMP</li><li>CMBAnnotationConstants.ANN_RECT</li><ul> <p>Optional settings</p> Key Type Description fontConversionList <code>String</code> PageRelativePosition double <code>Float</code> <code>Integer</code> PageRelativePosition <code>String</code> <code>String</code> [I PageRelativePosition <code>Float</code> <code>Float</code> <code>String</code> <code>Integer</code> <code>Boolean</code> <code>Float</code> <code>String</code> <code>Float</code>"},{"location":"catalog/converter/#DispatchingArchive","title":"DispatchingArchive  - Unzip files","text":"<p>This class allow you to unzip the content of archive files. Multiple mime types are supported : application/zip, application/x-zip, application/x-zip-compressed, application/x-rar-compressed, application/x-rar and application/java-archive. Tar or gz folders are not supported yet.</p> <p>Optional settings</p> Key Type Description Default value Charset <code>String</code> Charset used for file names in zip archives <code>CP437</code> Process annotation contents <code>Boolean</code> If annotations are asked to be migrated, you can filter here to process their content(s) or only their metadata <code>false</code> Scan recursive content <code>Boolean</code> Only convert terminal contents and not container ones <code>false</code> Only extract files that do not match this pattern <code>String</code> Delete source archive file <code>Boolean</code> <code>false</code> Supported mime-types <code>String list</code> Specify the list of all mime-types of documents which Fast2 will convert Recursive <code>Boolean</code> <code>false</code> Only extract files that match this pattern <code>String</code> Throw conversion exceptions <code>Boolean</code> If Fast2 performs document conversion, it can either fail silently or pop an error when the action has not been properly completed <code>true</code> Mime-type : Check document before content <code>Boolean</code> You can assume the file extension is accurate, or ask Fast2 to check the content encoding to identify more precisely the document mime-type. By default, Fast2 will check at content level <code>false</code> Process all contents <code>Boolean</code> Fast2 will either only focus on the first encountered content, or process them all <code>true</code>"},{"location":"catalog/converter/#Eml2Pdf","title":"Eml2Pdf  - Convert email to PDF","text":"<p>This class allow you to convert emails to a PDF format. Formats supported are application/msword, rfc822 and outlook.</p> <p>Optional settings</p> Key Type Description Default value rtf tags list <code>String list</code> For mapimessageparser, if provided, can allow to override the list of rtf tags to filter out Process annotation contents <code>Boolean</code> If annotations are asked to be migrated, you can filter here to process their content(s) or only their metadata <code>false</code> Scan recursive content <code>Boolean</code> Only convert terminal contents and not container ones <code>false</code> Custom mail header <code>String</code> Mail header to prefix the subject of the mail as pdf title in ARender <code>Mail</code> includeInlineBodyWithHeaders <code>Boolean</code> Convert Configuration Eml2PdfConfiguration Mail to pdf convert options. Can be null Mail subject in title <code>Boolean</code> Display mail subject in title <code>true</code> Attachment in separate folder <code>Boolean</code> All attachments are included in a separated folder <code>false</code> Supported mime-types <code>String list</code> Specify the list of all mime-types of documents which Fast2 will convert Separator <code>String</code> Separator between prefix and mail subject <code>:</code> Throw conversion exceptions <code>Boolean</code> If Fast2 performs document conversion, it can either fail silently or pop an error when the action has not been properly completed <code>true</code> Attachment in included folder <code>Boolean</code> Each attachment is included in a separated folder <code>false</code> Mime-type : Check document before content <code>Boolean</code> You can assume the file extension is accurate, or ask Fast2 to check the content encoding to identify more precisely the document mime-type. By default, Fast2 will check at content level <code>false</code> Custom body header <code>String</code> Body header to swap the default -Content- header set to the body <code>Email body</code> Supported inline body mime-types <code>String list</code> Process all contents <code>Boolean</code> Fast2 will either only focus on the first encountered content, or process them all <code>true</code>"},{"location":"catalog/converter/#ExcelConvert","title":"ExcelConvert  - Convert Excel to PDF","text":"<p>\u26a0\ufe0f Deleted: The <code>ExcelConvert</code> module is deleted and no longer available in Fast2 from v2025.0.0.</p> <p>This class allow you to convert an Excel file to a PDF format.</p> <p>Optional settings</p> Key Type Description Default value Throw conversion exceptions <code>Boolean</code> If Fast2 performs document conversion, it can either fail silently or pop an error when the action has not been properly completed <code>true</code> Mime-type : Check document before content <code>Boolean</code> You can assume the file extension is accurate, or ask Fast2 to check the content encoding to identify more precisely the document mime-type. By default, Fast2 will check at content level <code>false</code> Process annotation contents <code>Boolean</code> If annotations are asked to be migrated, you can filter here to process their content(s) or only their metadata <code>false</code> Scan recursive content <code>Boolean</code> Only convert terminal contents and not container ones <code>false</code> Process all contents <code>Boolean</code> Fast2 will either only focus on the first encountered content, or process them all <code>true</code> Supported mime-types <code>String list</code> Specify the list of all mime-types of documents which Fast2 will convert"},{"location":"catalog/converter/#GenericConvertDoc","title":"GenericConvertDoc  - Convert from URL to PDF from its URL","text":"<p>This task will convert the content of any document into PDF format. All Fast2 needs is you to specify the URL/path of the initial document. The input file will be automatically resolved by the documents carried by the punnet. The ouput file path got his own field that can be used with a patternThe location of options are managed through an int value specifying the index within the cmd line starting to 0.</p> <p>Mandatory settings</p> Key Type Description Destination folder <code>String</code> Target file path for the locally-created files Converter path <code>String</code> Set here the path of the converter <p>Optional settings</p> Key Type Description Default value Ingore output file <code>Boolean</code> Converter does not takes output file instructions <code>false</code> Process annotation contents <code>Boolean</code> If annotations are asked to be migrated, you can filter here to process their content(s) or only their metadata <code>false</code> Ignore command return value <code>Boolean</code> Do not perform anything after conversion, whatever the command feedback <code>false</code> Scan recursive content <code>Boolean</code> Only convert terminal contents and not container ones <code>false</code> Destination folder for original files <code>String</code> Dump input file in a specific folder path. Set to null to disable dumps Options location <code>Integer</code> Set here the index of options in the cmd line : O means at the beginning. <code>1</code> Supported mime-types <code>String list</code> Specify the list of all mime-types of documents which Fast2 will convert Protect path with double quotes <code>Boolean</code> Surround file paths with quotes when building command-line <code>false</code> Timeout before stopping <code>Integer</code> Time to wait before killing the process. Value is in seconds <code>3600</code> Throw conversion exceptions <code>Boolean</code> If Fast2 performs document conversion, it can either fail silently or pop an error when the action has not been properly completed <code>true</code> Mime-type : Check document before content <code>Boolean</code> You can assume the file extension is accurate, or ask Fast2 to check the content encoding to identify more precisely the document mime-type. By default, Fast2 will check at content level <code>false</code> Conversion option <code>String</code> See application help for more details List of error exit codes to skip <code>String list</code> Extension to append <code>String</code> The extension to add to the original file name before any conversion. This value should not start with a dot (ex : html) Process all contents <code>Boolean</code> Fast2 will either only focus on the first encountered content, or process them all <code>true</code>"},{"location":"catalog/converter/#HtmlCleanup","title":"HtmlCleanup  - HTML cleaner","text":"<p>Utility Class to cleanup inconsistent HTML</p> <p>Optional settings</p> Key Type Description Default value Throw conversion exceptions <code>Boolean</code> If Fast2 performs document conversion, it can either fail silently or pop an error when the action has not been properly completed <code>true</code> Mime-type : Check document before content <code>Boolean</code> You can assume the file extension is accurate, or ask Fast2 to check the content encoding to identify more precisely the document mime-type. By default, Fast2 will check at content level <code>false</code> Process annotation contents <code>Boolean</code> If annotations are asked to be migrated, you can filter here to process their content(s) or only their metadata <code>false</code> Scan recursive content <code>Boolean</code> Only convert terminal contents and not container ones <code>false</code> Process all contents <code>Boolean</code> Fast2 will either only focus on the first encountered content, or process them all <code>true</code> Supported mime-types <code>String list</code> Specify the list of all mime-types of documents which Fast2 will convert"},{"location":"catalog/converter/#IdentifyImageFormat","title":"IdentifyImageFormat  - Detect image format using ImageMagick","text":"<p>Find automatically the image format with ImageMagick in command line. Several properties can be added and the assiociated command line filled int the property pattern field</p> <p>Mandatory settings</p> Key Type Description Property map <code>String/Pattern map</code> List of the porperties to use during the process  <p> Ex/  targetProperty = documentStringGetter</p> <p>Optional settings</p> Key Type Description identify.exe path <code>String</code> ImageMagick identify.exe path to use"},{"location":"catalog/converter/#JaTiffMerger","title":"JaTiffMerger  - Merge tiff files","text":"<p>From a tiff content punnet, merges all its subcontent merge together. All content must be in tiff format. If the subcontents are already lower than 2 images, the merge is cancelled.</p> <p>Optional settings</p> Key Type Description Default value Throw conversion exceptions <code>Boolean</code> If Fast2 performs document conversion, it can either fail silently or pop an error when the action has not been properly completed <code>true</code> Mime-type : Check document before content <code>Boolean</code> You can assume the file extension is accurate, or ask Fast2 to check the content encoding to identify more precisely the document mime-type. By default, Fast2 will check at content level <code>false</code> Process annotation contents <code>Boolean</code> If annotations are asked to be migrated, you can filter here to process their content(s) or only their metadata <code>false</code> Scan recursive content <code>Boolean</code> Only convert terminal contents and not container ones <code>false</code> Process all contents <code>Boolean</code> Fast2 will either only focus on the first encountered content, or process them all <code>true</code> Supported mime-types <code>String list</code> Specify the list of all mime-types of documents which Fast2 will convert"},{"location":"catalog/converter/#JaTiffSplitter","title":"JaTiffSplitter  - Tiff document splitter","text":"<p>Optional settings</p> Key Type Description Default value Dump tiff information <code>Boolean</code> <code>false</code> Minimum pages for dispatching <code>Integer</code> <code>1</code> Corrupted JPEGs handled by ImageMagick <code>Boolean</code> <code>true</code> Handle corrupted JPEGs <code>Boolean</code> <code>true</code> Sanitize source JPEGs SanitizeJpeg &gt; \u26a0\ufe0f Deleted: The <code>SanitizeJpeg</code> module is deleted and no longer available in Fast2 from v2025.0.0. Maximum number of source pages <code>Integer</code> <code>Integer.MAX_VALUE</code> Force JPEG Sanitation <code>Boolean</code> <code>false</code> Dispatch multi-pages tiff to a bunch of single-page tiff <code>Boolean</code> Only the first one will be processed when source contains multiple multi-page tiffs <code>false</code> Minimum number of pages before dispatch errors <code>Integer</code> <code>1</code>"},{"location":"catalog/converter/#JaTiffWang","title":"JaTiffWang  - Extract wang annotations from Tiff document","text":"<p>Creates one annotation file perf tiff page where annotations are found. A property is set to the annotation content to get back the page</p> <p>Optional settings</p> Key Type Description Generate wang hexa in logs <code>Boolean</code> Fail if no annotation was found <code>Boolean</code> Skip exceptions <code>Boolean</code>"},{"location":"catalog/converter/#MDOWriter","title":"MDOWriter  - Write punnet description to a MDO-format","text":"<p>This task serializes document metadata in an MDO file format with a fixed length.</p> <p>Mandatory settings</p> Key Type Description Target file path for (local) files, can be pattern based <code>String</code> <p>Optional settings</p> Key Type Description Default value Throw exception on missing mandatory data <code>Boolean</code> Throw exceptions if mandatories data are missing. Otherwise, silent fail <code>false</code> MDO format specification file path <code>String</code> CSV configuration file path containing MDO format specification End tag of document content <code>String</code> Data name to add dataline into document data <code>String</code> If null data isn't added in document Skip from specific index <code>Integer</code> Skip writing documents from this index <code>0</code> Fallback on missing data <code>Boolean</code> When data is missing in the document being written, try to search it in the first document <code>true</code> MDO-format with internal content <code>Boolean</code> Generate MDO-format document with internal content <code>false</code> Data name containing original text content <code>String</code> If null text content isn't added to MDO file, internal content only"},{"location":"catalog/converter/#MergeAllContents","title":"MergeAllContents  - Merge multiple content","text":"<p>Merge all contents of document from the first depth level. Can be used after Eml2Pdf task to merge header and body.</p> <p>Optional settings</p> Key Type Description Default value Throw conversion exceptions <code>Boolean</code> If Fast2 performs document conversion, it can either fail silently or pop an error when the action has not been properly completed <code>true</code> Mime-type : Check document before content <code>Boolean</code> You can assume the file extension is accurate, or ask Fast2 to check the content encoding to identify more precisely the document mime-type. By default, Fast2 will check at content level <code>false</code> Process annotation contents <code>Boolean</code> If annotations are asked to be migrated, you can filter here to process their content(s) or only their metadata <code>false</code> Scan recursive content <code>Boolean</code> Only convert terminal contents and not container ones <code>false</code> Process all contents <code>Boolean</code> Fast2 will either only focus on the first encountered content, or process them all <code>true</code> Supported mime-types <code>String list</code> Specify the list of all mime-types of documents which Fast2 will convert"},{"location":"catalog/converter/#MergeAllMails","title":"MergeAllMails  - Merge multiple mails","text":"<p>Merge mail header and body after a mail conversion</p> <p>Optional settings</p> Key Type Description Default value Throw conversion exceptions <code>Boolean</code> If Fast2 performs document conversion, it can either fail silently or pop an error when the action has not been properly completed <code>true</code> Mime-type : Check document before content <code>Boolean</code> You can assume the file extension is accurate, or ask Fast2 to check the content encoding to identify more precisely the document mime-type. By default, Fast2 will check at content level <code>false</code> Process annotation contents <code>Boolean</code> If annotations are asked to be migrated, you can filter here to process their content(s) or only their metadata <code>false</code> Scan recursive content <code>Boolean</code> Only convert terminal contents and not container ones <code>false</code> Process all contents <code>Boolean</code> Fast2 will either only focus on the first encountered content, or process them all <code>true</code> Supported mime-types <code>String list</code> Specify the list of all mime-types of documents which Fast2 will convert"},{"location":"catalog/converter/#MergePdfBox","title":"MergePdfBox  - PDF merger","text":"<p>Merge your tiff files into PDF format using the PDFBox library (v1.2.1).</p> <p>Optional settings</p> Key Type Description Default value Remove document direct content <code>Boolean</code> Not referenced from folders (deprecated) <code>false</code> Convert resursive folders <code>Boolean</code> Folders referencesd by the document are converted recursively (deprecated) <code>false</code> Ignore conversion exceptions <code>Boolean</code> Each exception during the conversion becomes a silent fail indexed in logs <code>false</code> Supported source mime types <code>String list</code> List of all accepted mime types"},{"location":"catalog/converter/#OOConvert","title":"OOConvert  - Convert office file to PDF","text":"<p>\u26a0\ufe0f Deleted: The <code>OOConvert</code> module is deleted and no longer available in Fast2 from v2025.0.0.</p> <p>Complete converter from office file to PDF format using OpenOffice / LibreOffice.</p> <p>Mandatory settings</p> Key Type Description Target path of generated file <code>String</code> Path to use for generated files during the conversion <p>Optional settings</p> Key Type Description Default value Temp folder path <code>String</code> Path to the temp folder Output mime type <code>String</code> Mime type to set at the end of the conversion <code>application/pdf</code> Delay to despair after an Office operation <code>Long</code> Delay in milliseconds <code>15 * 1000</code> Process annotation contents <code>Boolean</code> If annotations are asked to be migrated, you can filter here to process their content(s) or only their metadata <code>false</code> DefaultOfficeManagerConfiguration Scan recursive content <code>Boolean</code> Only convert terminal contents and not container ones <code>false</code> Shutdown Office Manager at finishTask) <code>Boolean</code> At the end of the task force Office Manager to shutdown <code>false</code> Supported mime-types <code>String list</code> Specify the list of all mime-types of documents which Fast2 will convert Localhost port number <code>Integer</code> <code>8100</code> Throw conversion exceptions <code>Boolean</code> If Fast2 performs document conversion, it can either fail silently or pop an error when the action has not been properly completed <code>true</code> Mime-type : Check document before content <code>Boolean</code> You can assume the file extension is accurate, or ask Fast2 to check the content encoding to identify more precisely the document mime-type. By default, Fast2 will check at content level <code>false</code> Delay to startup Office Manager <code>Integer</code> Delay in seconds <code>0</code> Shutdown Office Manager when exiting <code>Boolean</code> Force Office Manager to shutdown at the end of the workflow <code>false</code> Office Manager as singleton <code>Boolean</code> Use static singleton OfficeManager to reuse process between two campaigns <code>false</code> officeHome <code>String</code> Process all contents <code>Boolean</code> Fast2 will either only focus on the first encountered content, or process them all <code>true</code> Stop cmd for LibreOffice / OpenOffice <code>String</code> Command to use to force LibreOffice or OpenOffice process to stop"},{"location":"catalog/converter/#PdfAConverter","title":"PdfAConverter  - Convert from PDF to PDF/A","text":"<p>A PDF/A is a PDF file with some constraints to ensure its long time conservation. These constraints are described in ISO 19005. This task takes PDF files as input, and generated a PDF/A-{1A, 1B, 2A, 2B, 3A, 3B}.</p> <p>Optional settings</p> Key Type Description Default value Expected pdf conformity level <code>String</code> If empty default level is PDF/A-1B <code>1B</code>"},{"location":"catalog/converter/#PdfAnnotationRenderer","title":"PdfAnnotationRenderer  - Renders annotations into a new PDF document","text":"<p>Requires itext-5.5.13, xmlworker-5.5.13 and jsoup-1.12.2 libs</p> <p>Optional settings</p> Key Type Description <code>Boolean</code> <code>Float</code> <code>Float</code> <code>Float</code> <code>String</code> <code>Boolean</code> <code>Boolean</code> <code>Float</code> <code>Boolean</code> <code>Float</code> <code>String</code> extraFont <code>String/String map</code>"},{"location":"catalog/converter/#PunnetXSLSerializer","title":"PunnetXSLSerializer  - Export punnet metadata using XSL script","text":"<p>Serialize a punnet to any file (CSV, JSON, XML, custom format) using an XSL stylesheet.</p> <p>Mandatory settings</p> Key Type Description XSL stylesheet path <code>String</code> Or you can enter your xsl:stylesheet in the content section XSL Stylesheet content <code>String</code> Enter here your xsl:stylesheet content <p>Optional settings</p> Key Type Description Default value New document properties <code>String/String map</code> Specify here at least the <code>documentId</code> data. You can use punnet properties to resolve pattern  <p> Ex/  Setting an entry with 'myKey' and 'myValue' will trigger Fast2 to look up for the metadata entitled 'myValue' in the punnet and its document(s). If this data is not found, the value will be set to 'myValue'.</p> Append <code>Boolean</code> Attach output stream of you XSL script as a new document in the punnet. <code>false</code> Replace <code>Boolean</code> Replace punnet documents by the new produced document (requires Append to be set) <code>false</code> Encoding <code>String</code> Enter here your script file encoding. <code>UTF-8</code>"},{"location":"catalog/converter/#SanitizeTiff","title":"SanitizeTiff  - Tiff cleaner","text":"<p>Converts your tiff files to jpeg format.</p> <p>Optional settings</p> Key Type Description Default value Out mime type <code>String</code> The target mime type for your documents <code>image/tiff</code> Out extension <code>String</code> The extensions to set to your documents <code>tiff</code> Convert path <code>String</code> <code>convert -quiet</code> Supported source mime types <code>String list</code>"},{"location":"catalog/converter/#SplitPdfItext","title":"SplitPdfItext  - PDF splitter","text":"<p>Mandatory settings</p> Key Type Description Default value Split definition data name <code>String</code> Name of the document data for split definition <code>splitDefinitions</code> <p>Optional settings</p> Key Type Description Default value Throw conversion exceptions <code>Boolean</code> If Fast2 performs document conversion, it can either fail silently or pop an error when the action has not been properly completed <code>true</code> Mime-type : Check document before content <code>Boolean</code> You can assume the file extension is accurate, or ask Fast2 to check the content encoding to identify more precisely the document mime-type. By default, Fast2 will check at content level <code>false</code> Process annotation contents <code>Boolean</code> If annotations are asked to be migrated, you can filter here to process their content(s) or only their metadata <code>false</code> Scan recursive content <code>Boolean</code> Only convert terminal contents and not container ones <code>false</code> Process all contents <code>Boolean</code> Fast2 will either only focus on the first encountered content, or process them all <code>true</code> Supported mime-types <code>String list</code> Specify the list of all mime-types of documents which Fast2 will convert"},{"location":"catalog/converter/#TesseractInvoker","title":"TesseractInvoker  - Transform your PDFs and images with text to make them searchable using OCR engine","text":"<p>Based on Tesseract solution, this task will parse each page of your images (TIFF, JPG and PNG) or PDF to extract text and create a new searchable PDF CCITT T.6 image compression is supported but not LZW compression\\nBe careful if you are doing multi-document or multi-content : if names are identicals it will overwrite contents  (ex\\ sample.tiff &amp; sample.gif will both creates sample.pdf. The first doc will overwrote the 2nd one</p> <p>Mandatory settings</p> Key Type Description Destination folder <code>String</code> Target file path for the locally-created files Tesseract path <code>String</code> Complete path of your local Tesseract instance  <p> Ex/  /usr/share/tesseract-ocr/4.00/tessdata</p> <p>Optional settings</p> Key Type Description Default value Throw rotations exceptions <code>Boolean</code> If Fast2 performs document orientation detection, it can either fail silently or pop an error when the action has not been properly completed. Throw conversion exceptions should be set to true for this option to work <code>false</code> Process annotation contents <code>Boolean</code> If annotations are asked to be migrated, you can filter here to process their content(s) or only their metadata <code>false</code> Scan recursive content <code>Boolean</code> Only convert terminal contents and not container ones <code>false</code> Allow rotation if needed <code>Boolean</code> If document is converted but not readable, rotation is will correct the page orientation from landscape to portrait if needed <code>true</code> Supported mime-types <code>String list</code> Specify the list of all mime-types of documents which Fast2 will convert Throw conversion exceptions <code>Boolean</code> If Fast2 performs document conversion, it can either fail silently or pop an error when the action has not been properly completed <code>true</code> Mime-type : Check document before content <code>Boolean</code> You can assume the file extension is accurate, or ask Fast2 to check the content encoding to identify more precisely the document mime-type. By default, Fast2 will check at content level <code>false</code> Process all contents <code>Boolean</code> Fast2 will either only focus on the first encountered content, or process them all <code>true</code> Add file sizes <code>Boolean</code> If true, add input and output file sizes in the data set Allow enhanced orientation detection <code>Boolean</code> Only used if allow rotation is set to true. Enable the use of an enhanced rotation detection, thus giving more accurate results but with the downside of being slower. Activate it for low-quality images for example. <code>false</code>"},{"location":"catalog/converter/#Text2PDFConverter","title":"Text2PDFConverter  - Convert Text file to PDF","text":"<p>Convert your text files into PDF format.</p> <p>Optional settings</p> Key Type Description Default value Throw conversion exceptions <code>Boolean</code> If Fast2 performs document conversion, it can either fail silently or pop an error when the action has not been properly completed <code>true</code> Mime-type : Check document before content <code>Boolean</code> You can assume the file extension is accurate, or ask Fast2 to check the content encoding to identify more precisely the document mime-type. By default, Fast2 will check at content level <code>false</code> Process annotation contents <code>Boolean</code> If annotations are asked to be migrated, you can filter here to process their content(s) or only their metadata <code>false</code> Image path <code>String</code> Scan recursive content <code>Boolean</code> Only convert terminal contents and not container ones <code>false</code> Formatted page text provider FormattedPageTextProvider Process all contents <code>Boolean</code> Fast2 will either only focus on the first encountered content, or process them all <code>true</code> Formatted page text converter FormattedPageTextConverter Supported mime-types <code>String list</code> Specify the list of all mime-types of documents which Fast2 will convert"},{"location":"catalog/converter/#Tiff2PDFIText","title":"Tiff2PDFIText  - Converter from Tiff to PDF","text":"<p>This task uses the IText library to convert content of TIFF documents into PDF format</p> <p>Optional settings</p> Key Type Description Default value Keep image aspect <code>Boolean</code> Zoom image to fit in an A4 paper, but conserve aspect ratio <code>true</code> Process annotation contents <code>Boolean</code> If annotations are asked to be migrated, you can filter here to process their content(s) or only their metadata <code>false</code> Scan recursive content <code>Boolean</code> Only convert terminal contents and not container ones <code>false</code> Adapt PDF size to source image <code>Boolean</code> Generate a PDF document with a size related to the original image size <code>false</code> Ignore conversion exceptions <code>Boolean</code> Fast2 will either throw an error if the image has not properly been converted, or fail silently <code>false</code> Supported mime-types <code>String list</code> Specify the list of all mime-types of documents which Fast2 will convert Verbose logs <code>Boolean</code> Check this item to have more logs for fine-tuning stage <code>false</code> imageSourceHeightProperty <code>String</code> Temp file cleaner TempFileCleaner Select here the module you want to clean the temporary files Throw conversion exceptions <code>Boolean</code> If Fast2 performs document conversion, it can either fail silently or pop an error when the action has not been properly completed <code>true</code> Mime-type : Check document before content <code>Boolean</code> You can assume the file extension is accurate, or ask Fast2 to check the content encoding to identify more precisely the document mime-type. By default, Fast2 will check at content level <code>false</code> DPI correction <code>Boolean</code> Check this to correct the DPI related to the image dimensions <code>false</code> Rotate landscapes <code>Boolean</code> If imge aspect is &gt; 1.4, it will be rotated to fit in a A4 format <code>false</code> Clean temporary files <code>Boolean</code> Remove the temporary input files. To use this option, a temp file cleaner must be set <code>false</code> Process all contents <code>Boolean</code> Fast2 will either only focus on the first encountered content, or process them all <code>true</code> imageSourceWidthProperty <code>String</code>"},{"location":"catalog/converter/#Tiff2PdfBox","title":"Tiff2PdfBox  - Convert TIFF to PDF","text":"<p>This task converts TIFF images into PDF documents using the Apache PDFBox lib</p> <p>Optional settings</p> Key Type Description Default value Add pdf dimensions to dataSet <code>Boolean</code> Store dimensions in document dataSet named contentHeight and contentWidth only for the first page Ignore conversion exceptions <code>Boolean</code> Fast2 will either throw an error if the image has not properly been converted, or fail silently <code>false</code> Force to re-encode tiffs <code>Boolean</code> Force to decompress and recompress tiffs before encapsulating in PDF, slower but could handle some exceptions <code>false</code> Unsupported producers <code>String list</code> List of unsupported tiff software producers Default DPI used for PDF transformation <code>Integer</code> <code>200</code>"},{"location":"catalog/converter/#WkHtmlToPdfConverter","title":"WkHtmlToPdfConverter  - Converter from Html To PDF","text":"<p>This task will be used to convert HTML content into a PDF document. Fast2 embeds the wkhtmltopdf command-line utility in order to carry out this conversion.</p> <p>Mandatory settings</p> Key Type Description Destination folder <code>String</code> Target file path for the locally-created files Converter path <code>String</code> Set here the path of the converter <p>Optional settings</p> Key Type Description Default value Ingore output file <code>Boolean</code> Converter does not takes output file instructions <code>false</code> Process annotation contents <code>Boolean</code> If annotations are asked to be migrated, you can filter here to process their content(s) or only their metadata <code>false</code> Ignore command return value <code>Boolean</code> Do not perform anything after conversion, whatever the command feedback <code>false</code> Scan recursive content <code>Boolean</code> Only convert terminal contents and not container ones <code>false</code> Destination folder for original files <code>String</code> Dump input file in a specific folder path. Set to null to disable dumps Options location <code>Integer</code> Set here the index of options in the cmd line : O means at the beginning. <code>1</code> Supported mime-types <code>String list</code> Specify the list of all mime-types of documents which Fast2 will convert Protect path with double quotes <code>Boolean</code> Surround file paths with quotes when building command-line <code>false</code> Timeout before stopping <code>Integer</code> Time to wait before killing the process. Value is in seconds <code>3600</code> Throw conversion exceptions <code>Boolean</code> If Fast2 performs document conversion, it can either fail silently or pop an error when the action has not been properly completed <code>true</code> Mime-type : Check document before content <code>Boolean</code> You can assume the file extension is accurate, or ask Fast2 to check the content encoding to identify more precisely the document mime-type. By default, Fast2 will check at content level <code>false</code> Conversion option <code>String</code> See application help for more details List of error exit codes to skip <code>String list</code> Extension to append <code>String</code> The extension to add to the original file name before any conversion. This value should not start with a dot (ex : html) Process all contents <code>Boolean</code> Fast2 will either only focus on the first encountered content, or process them all <code>true</code> Cleanup HTML first <code>Boolean</code> Ask Fast2 to clean the HTML content regarding syntax and encoding <code>true</code>"},{"location":"catalog/credentials/","title":"Credentials","text":""},{"location":"catalog/credentials/#AWSConnectionProvider","title":"AWSConnectionProvider  - AWS S3 user credentials","text":"<p>With an access key id and the secret access key, you have the option to connect to an AWS S3 instance by specifying the region concerned. However, to perform this king of connection, Fast2 required the permission : AmazonS3FullAccess</p> <p>Mandatory settings</p> Key Type Description Access key Id <code>String</code> This field is mandatory unless 'Use Instance Profile' is set Secret access key <code>String</code> This field is mandatory unless 'Use Instance Profile' is set AWS Region <code>String</code> <p>Optional settings</p> Key Type Description Default value AWS URL endpoint <code>String</code> Service endpoint &amp; signing region Use settings for Snowball <code>Boolean</code> Snowball S3 endpoint requires specific S3Client settings <code>false</code> Use Instance Profile instead of Access Key &amp; Secret <code>Boolean</code> From your local variable, Fast2 will retrieve your connection information <code>false</code> Role ARN name <code>String</code> sessionName <code>String</code> AWS extra Client Configuration ClientConfiguration Use this AWS class to fine-tune connection details to S3, such as timeouts, connection pool size, ..."},{"location":"catalog/credentials/#AlfrescoCMISConnectionProvider","title":"AlfrescoCMISConnectionProvider  - CMIS connection provider","text":"<p>From a URI and giving a username with password, this class allow you to access any Alfresco instance</p> <p>Mandatory settings</p> Key Type Description Password <code>String</code> Username <code>String</code> URI for connection settings <code>String</code>"},{"location":"catalog/credentials/#AlfrescoRESTConnectionProvider","title":"AlfrescoRESTConnectionProvider  -","text":"<p>Mandatory settings</p> Key Type Description Password <code>String</code> URL to connect to Alfresco <code>String</code> Username <code>String</code>"},{"location":"catalog/credentials/#CMConnectionProvider","title":"CMConnectionProvider  - Connection provider for Content Manager solution","text":"<p>The CM connection provider will help you to manage a pool of connections. For performance reasons, it is sometimes desirable to limit the number of connections created by the pool.The connection pool will allow you to specify the maximum number of connections that should exist at one time, whether in use or in the pool.Once this maximum value is reached, an error may be thrown or you may optionally wait for an existing connection to be freed</p> <p>Mandatory settings</p> Key Type Description Default value Password <code>String</code> Password of the aforementioned username Username <code>String</code> Login with scope to access the docbase with proper rights <code>icmadmin</code> <p>Optional settings</p> Key Type Description Default value Data source type <code>String</code> <code>ICM</code> Connection pool size <code>Integer</code> Maximum number of connections to be created <code>64</code> Server name <code>String</code> Name of the server involved in the migration <code>ICMNLSDB</code> Connection free pool size <code>Integer</code> Maximum number of connections that may be held in the free pool <code>5</code> Internal connection <code>Integer</code> Maximum number of connections for internal side <code>64</code> Connection duration <code>Long</code> Length of time to kill a free connection in milliseconds <code>100000</code>"},{"location":"catalog/credentials/#CMODConnectionProvider","title":"CMODConnectionProvider  - CMOD connection provider","text":"<p>With a username / password and an IP address, this class allow you to connect at your CMOD instance.To optimize connections between Fast2 and CMOD you can use a single connection</p> <p>Mandatory settings</p> Key Type Description Default value Server IP address <code>String</code> <code>192.168.0.189</code> Password <code>String</code> Username <code>String</code> <code>admin</code> <p>Optional settings</p> Key Type Description Default value Port number <code>Integer</code> <code>1445</code> Singleton connection <code>Boolean</code> Optimization of the connection in case of regular calls <code>false</code>"},{"location":"catalog/credentials/#DctmConnectionProvider","title":"DctmConnectionProvider  - Documentum connection provider","text":"<p>Module used by Fast2 to establish to communication with the destination Documentum instance.</p> <p>Mandatory settings</p> Key Type Description Docbase name <code>String</code> Name of the docbase involved in the migration. Password <code>String</code> Password of the aforementioned username. Username <code>String</code> Login with scope to access the docbase with proper rights."},{"location":"catalog/credentials/#FileNet35ConnectionProvider","title":"FileNet35ConnectionProvider  - Connection provider for FileNet 3.5 solution","text":"<p>This task is used to provide connection information to connect specifically to the FileNet P8 3.5 ECM.</p> <p>Mandatory settings</p> Key Type Description Password <code>String</code> Password of the aforementioned username Username <code>String</code> Login with scope to access the docbase with proper rights <p>Optional settings</p> Key Type Description WCM Config resource <code>String</code> Object store name <code>String</code> Name of the docbase involved in the migration URL settings WcmApiConfigSettings Class used for setting multiple URLs (download, upload...)"},{"location":"catalog/credentials/#FileNetConnectionProvider","title":"FileNetConnectionProvider  - Connection provider for FileNet P8 solution","text":"<p>Using this class allows you to provide connection information to specifically connect to your FileNet P8 5.x ECM</p> <p>Mandatory settings</p> Key Type Description Password <code>String</code> Password of the aforementioned username URI address <code>String</code> URI to determine which FileNet instance to connect to  <p> Ex/ <code>http://&lt;ip&gt;:&lt;port&gt;/wsi/FNCEWS40MTOM/</code></p> Username <code>String</code> Login with scope to access the docbase with proper rights <p>Optional settings</p> Key Type Description Default value JAAS coonfiguration stanza property name <code>String</code> Property containing JAAS coonfiguration. If null, the default JAAS stanza name is set to FileNetP8 Singleton connection <code>Boolean</code> Reuse the same connection to optimize calls <code>false</code> Initial naming factory <code>String</code>"},{"location":"catalog/credentials/#FlowerDocsConnectionProvider","title":"FlowerDocsConnectionProvider  - Connection module for FlowerDocs ECM","text":"<p>Module responsible for authentication of Fast2 for FlowerDocs</p> <p>Mandatory settings</p> Key Type Description URL endpoint <code>String</code> Web services target URL Password <code>String</code> Password of the service account used for authentication Scope <code>String</code> Scope of the service account used for authentication Username <code>String</code> Username of the service account used for authentication <p>Optional settings</p> Key Type Description Default value Overrides authenticated user <code>Boolean</code> Allows connections to multiple endpoints <code>false</code>"},{"location":"catalog/credentials/#MailBoxProvider","title":"MailBoxProvider  - Mail box connection","text":"<p>This class is used to access any mailbox from some connection information.</p> <p>Mandatory settings</p> Key Type Description Protocol <code>String</code> Protocol used to establish the connection  <p> Ex/ imap</p> Password <code>String</code> Password of the aforementioned username Host address <code>String</code> Exact address of the mail server where to retrieve the mails  <p> Ex/ imap.gmail.com</p> Root folder name <code>String</code> Name of the root folder to extract mails Username <code>String</code> Login with scope to access the docbase with proper rights <p>Optional settings</p> Key Type Description Default value Session debugging <code>Boolean</code> Keep logs written for the connection into stdout <code>false</code> Number of retries <code>Integer</code> Maximum number of times to retry the connection in case of failure <code>0</code> Read and write permissions <code>Boolean</code> Open mail session with read and write permissions. If false, the session is only readable <code>false</code> Extended properties map <code>String/String map</code> List of additional properties to apply  <p> Ex/ myValue.toAdd = true</p> Time between two connections <code>Integer</code> Time in milliseconds between each connection attempt <code>1000</code>"},{"location":"catalog/credentials/#MailSenderProvider","title":"MailSenderProvider  - Email connection provider","text":"<p>This module will grant Fast2 access to send emails on behalf of a given user</p> <p>Mandatory settings</p> Key Type Description Password <code>String</code> The password of the aforementioned user Properties <code>String/String map</code> It is expected that the client supplies values for the properties listed in Appendix A of the JavaMail spec. Please provide-mail.store.protocol,-mail.transport.protocol,-mail.host,-mail.user, and-mail.from as the defaults are unlikely to work in all cases Username <code>String</code> The username with proper rights to access the email client server <p>Optional settings</p> Key Type Description Debug <code>Boolean</code> Set the debug setting for this Session. Since the debug setting can be turned on only after the Session has been created, to turn on debugging in the Session constructor, set the property <code>mail.debug</code> in the Properties object passed in to the constructor to <code>true</code>"},{"location":"catalog/credentials/#MFilesConnectionProvider","title":"MFilesConnectionProvider  - Connection settings for MFiles","text":"<p>Credentials to connect to M-Files remote system via its REST API.</p> <p>Mandatory settings</p> Key Type Description Default value M-Files REST endpoint <code>String</code> http://ip.address/REST Login <code>String</code> Password <code>String</code> Vault GUID <code>String</code> ex :"},{"location":"catalog/credentials/#MobiusConnectionProvider","title":"MobiusConnectionProvider  - Mobius connection provider","text":"<p>\u26a0\ufe0f Deleted: The <code>MobiusConnectionProvider</code> module is deleted and no longer available in Fast2 from v2025.0.0.</p> <p>This Mobius connection module is required for Fast2 to successfully establish the connection with your Mobius instance in order to properly migrate metadata and contents.</p> <p>Mandatory settings</p> Key Type Description Repository ID <code>String</code> The Universally unique identifier (UUID) of the destination repository Mobius Server URL <code>String</code> <p>Optional settings</p> Key Type Description Authentication REST Header <code>String</code> The value of the 'Authorization' header of the REST request"},{"location":"catalog/credentials/#NuxeoConnectionProvider","title":"NuxeoConnectionProvider  - Connection settings for Nuxeo","text":"<p>Mandatory settings</p> Key Type Description Default value Accessible schemas <code>String</code> List of document schemas accessible with this connexion <code>*</code> Connexion URL <code>String</code> http://hostname:port/nuxeo  <p> Ex/ http://localhost:8080/nuxeo</p> Password <code>String</code> UserName <code>String</code>"},{"location":"catalog/credentials/#OpenTextCredentials","title":"OpenTextCredentials  - OpenText user credentials","text":"<p>Mandatory settings</p> Key Type Description Password <code>String</code> Username <code>String</code>"},{"location":"catalog/credentials/#SQLQueryGenericCaller","title":"SQLQueryGenericCaller  - Generic query caller","text":"<p>This modules is responsible of establishing the connection between Fast2 and the designated database</p> <p>Mandatory settings</p> Key Type Description Connection definition <code>String</code> Use a standard jdbc:// syntax. If a driver is needed, the JAR file has to be added to the worker-libs/ folder. Make sure to pick up a version compatible with the JDK used by Fast2. If clear credentials is a problem, please use below fields username and password  <p> Ex/ <code>jdbc:sqlite:C:/sqlite/mydatabase.db;</code><code>jdbc:sqlserver://localhost:&lt;port&gt;;user=...;password=...;</code><code>jdbc:mysql://&lt;ip-address&gt;:3306/&lt;db-name&gt;?user=...&amp;password=...</code></p> <p>Optional settings</p> Key Type Description Password <code>String</code> Password used by connectionString and fully encrypted for security reasons Driver class <code>String</code> Optional driver class to load before connection. Leave empty to load none Throw error if no result <code>Boolean</code> Throw exception when SQLQueryColumnCaller finds no result. Skip exceptions <code>Boolean</code> Fast2 will either throw an error if the statement has not properly been executed, or fail silently User <code>String</code> Username used by connectionString"},{"location":"catalog/helper/","title":"Helpers","text":""},{"location":"catalog/helper/#DctmConfiguration","title":"DctmConfiguration  - Module for customized Documentum configuration","text":"<p>Optional settings</p> Key Type Description Default value Document ACL <code>String</code> Default ACL to set for the document. Can be overrided by adding a value 'acl_name' as document metadata. Annotations user <code>String</code> Default user in charge of retrieving the annotations. If not set, an error will be thrown. <code>dmadmin</code> Retrieve mime-type from content <code>Boolean</code> Ask Fast2 to get the document mime-type from the content encoding, instead of using 'DfClientX' provided by the Documentum client. <code>true</code> Annotation ACL <code>String</code> This ACL should have write access. <code>ar_company_wide</code> Date format <code>String</code> Date format which the documents will have to match in order to properly be loaded into Documentum. <code>dd/MM/yyyy</code> Annotation path <code>String</code> Path to the folder where the annotations will be retrieved by Fast2. If not set, an error will be thrown. <code>/System/Applications/ARender/Annotations</code>"},{"location":"catalog/helper/#WcmApiConfigSettings","title":"WcmApiConfigSettings  - URL configuration","text":"<p>This class allows to configure several elements associated with a URL.</p> <p>Optional settings</p> Key Type Description Download URL <code>String</code> Upload URL <code>String</code> Credentials portection for user token <code>String</code> Remote URL <code>String</code> Credentials protection <code>String</code>"},{"location":"catalog/loader/","title":"Injectors","text":""},{"location":"catalog/loader/#AlfrescoBulkImporter","title":"AlfrescoBulkImporter  - Perform a bulk import on Alfresco","text":"<p>Load documents and metadata into Alfresco without changing the current tree structure of those same documents. The good performances of such injection are restrained with the complexity of the tree-view setup</p> <p>Mandatory settings</p> Key Type Description Source directory <code>String</code> Path to the folder to migrate into Alfresco Target path <code>String</code> Path where the folder will be stored into Alfresco Alfresco connection provider AlfrescoConnectionProvider This modules is responsible of the two-way communication between Fast2 and the designated Alfresco instance. Target NodeRef <code>String</code> NodeRef of the parent where the folder will be stored into Alfresco <p>Optional settings</p> Key Type Description Default value Clean destination <code>Boolean</code> Replace all existing content or metadata present in the destination folder before injection <code>false</code> Disable rules <code>Boolean</code> Disable rules for injection to prevent Alfresco to run checks on each document <code>false</code> Add metadata <code>Boolean</code> Load document content and its metadata. All metadata might not me compatible with Alfresco standards <code>false</code> Number of threads <code>Integer</code> Number of threads to allocate for the bulk import <code>1</code> Timeout <code>Integer</code> Time to wait before closing the session. Of not set, the value will be set to 300'000 Copy files <code>Boolean</code> Leave all documents in the source folder <code>false</code> Batch size <code>Integer</code> Size of the batch to build for upload <code>0</code>"},{"location":"catalog/loader/#AlfrescoInjector","title":"AlfrescoInjector  - Injection into Alfresco ECM using CMIS protocol","text":"<p>This task can be used to inject documents into Alfresco, using the CMIS protocol on top of HTTP. We rely on v1.0 of the opencmis module made available by Alfresco.</p> <p>Mandatory settings</p> Key Type Description Alfresco connection provider AlfrescoCMISConnectionProvider This modules is responsible of the two-way communication between Fast2 and the designated Alfresco instance <p>Optional settings</p> Key Type Description Default value Alfresco ID key <code>String</code> Document metadata key with the Alfresco ID of the injected document. <code>alfDocumentId</code> Property Helper PropertyHelper Properties regex <code>String</code> Regex pattern to filter the properties to inject with the document. <code>(cmis:.*)</code> Hash content column name <code>String</code> Hash content column name to version a document only when the content is different (but same index) Destination folder <code>String</code> Folder where the documents will be loaded into SQL update query <code>String</code> CMIS SQL update query to select the document to update. Overwrite 'can create' <code>Boolean</code> Ask Fast2 to create destination folder(s) if they do not already exist <code>true</code> Hash index column name <code>String</code> Hash index column name to version a document only when the content is different (but same index) Force update <code>Boolean</code> Throw an error if the document did not exist prior to the loading call Prevent duplicate <code>Boolean</code> Fast2 will throw an error if the document has already been injected"},{"location":"catalog/loader/#AlfrescoRestInjector","title":"AlfrescoRestInjector  - Alfresco injector using Alfresco REST protocol","text":"<p>This task relies on the Alfresco public REST API (with v1.0.4 of the Alfresco REST client) to load documents and metadata into a given Alfresco instance. To force the type of resource to create in the destination system, use the <code>nodeType</code> data into the document dataset. Default value is <code>cm:content</code>.</p> <p>Mandatory settings</p> Key Type Description Alfresco connection provider AlfrescoRESTConnectionProvider <p>Optional settings</p> Key Type Description Default value Root folder name to inject in a specific repository <code>String</code> '-my-', '-shared-', '-root-' are equivalent <code>-my-</code> Alfresco destination path <code>String</code> The path of the folder where the documents will be saved in Alfresco. This field supports patterns (based on punnet, document and campaign metadata). If this path starts with Alfresco nodeRef prefix 'workspace://SpacesStore/', the document will be injected into the corresponding folder. However, such folder needs to be created beforehand. Regex pattern filter for document properties <code>String</code> <code>(cm:.*)</code> Safe update <code>Boolean</code> If the document does not already exist, the first version will create the document. Later versions will be incremented on top of the existing version based on the data 'cm:versionLabel' property. Auto rename feature <code>Boolean</code> Triggers the Alfresco auto-rename feature, to prevent Alfresco to throw a 'duplicate document' error. <code>false</code> Pivot metadata for multiversion Pattern If all documents of the punnet have the same value for this metadata, they will be considered as being the different versions of a same document in Alfresco. Overwrite documents when they already exist <code>Boolean</code> Triggers the Alfresco overwrite feature, where the incoming document will replace an existing document having the same key. <code>false</code> Alfresco ID for update <code>String</code> Specify here the Alfresco UUID of the document to update. The value will be resolved by Fast2, syntax <code>${...}</code> is supported. This value can start with 'workspace://SpacesStore/'  <p> Ex/  ${property('alfcmis:nodeRef')}</p>"},{"location":"catalog/loader/#AwsInjector","title":"AwsInjector  - Injector into AWS S3 buckets","text":"<p>Fast2 proposes this task to load your documents, metadata and more within designated S3 buckets. Both client- and server-side encryption are supported (v1.6 of AWS encyption SDK). This loader relies on v1.11.848 of AWS Java SDK. The uploaded file will be title according to the <code>name</code> metadata of the processed document.</p> <p>Mandatory settings</p> Key Type Description Default value Destination bucket <code>String</code> The name of the bucket where the documents will be migrated to. <code>fast2-default</code> AWS credentials AWSConnectionProvider Must have granted AmazonS3FullAccess permission <p>Optional settings</p> Key Type Description Default value Encryption key <code>String</code> Key used for server-side encryption.  <p> Ex/  01234567-abcd-efgh-ijkl-0123456789ab</p> Destination folder <code>String</code> The parent folder of the documents to inject. This field supports pattern (using punnet, document or campaign metadata). Leave empty for storing at the root of the bucket. Dry run <code>Boolean</code> Simulates an injection, performs document integrity controls, but does not load the document into AWS S3 <code>false</code> Destination file name <code>String</code> Metadata for the file name once injected into the S3 bucket. Pattern syntax is supported. <code>${name}</code> Encryption context <code>String</code> Context used for server-side encryption. This context is a JSON map.  <p> Ex/  <code>{\\\"testKey\\\":\\\"testValue\\\"}</code></p> ARN key <code>String</code> Key used for client-side encryption, before loading the document into S3.  <p> Ex/  arn:aws:kms::111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab Update only <code>Boolean</code> Only changing metadata, content is left as is <code>false</code>"},{"location":"catalog/loader/#CSVWriter","title":"CSVWriter  - CSV file writer","text":"<p>Use this task to write punnet and document related data into a CSV. You can specify the name of such file as well as the path where your want Fast2 to create and populate it.</p> <p>Mandatory settings</p> Key Type Description Path for (local) output CSV files <code>String</code> Using a pattern for this field will trigger a resolution by Fast2 at runtime <p>Optional settings</p> Key Type Description Default value Close output file at each line <code>Boolean</code> Close CSV file after each punnet processed. This option can come useful to prevent too many files opened errors when each punnet created a dedicated CSV file. New column headers <code>String list</code> The new column names to use for the document metadata. If no set, the column headers will be populated from the names of the document metadata. By default, the data 'punnetId' and 'documentId' will be appended to the existing data. Upload punnet data <code>Boolean</code> For each document add the punnet data to wich it was attached to <code>true</code> CSV separator <code>String</code> The separator used between columns in the resulting CSV file. <code>,</code> Write all in the same CSV file <code>Boolean</code> Merge metadata of all punnets in a single output CSV file. The missing columns headers will be added on the fly, although it is wiser to list them all in the 'New column headers' field. If set to false, any existing CSV file with the same name will be overwritten. <code>true</code> Protect with double quote <code>Boolean</code> This option will surround every value with double quotes. Such use will be mostly relevant when dealing with multivalued metadata. <code>true</code>"},{"location":"catalog/loader/#DctmInjector","title":"DctmInjector  - Injection into Documentum","text":"<p>Use this task to inject into Documentum ECM system. Fast2 embeds v6.7 of Documentum modules to take the most out of of this injection phase.</p> <p>Mandatory settings</p> Key Type Description Credentials DctmConnectionProvider Connection module establishing the communication with a given Documentum instance. <p>Optional settings</p> Key Type Description Documentum configuration DctmConfiguration Customize here the Documentum details related to the instance you are planning to inject documents into. For more, refer to the appropriate section."},{"location":"catalog/loader/#FileNet35Injector","title":"FileNet35Injector  - Injector for FileNet P8 3.5","text":"<p>Use this task to inject documents and data into a FileNet P8 3.5</p> <p>Mandatory settings</p> Key Type Description The FileNet connection provider FileNet35ConnectionProvider Module to establish the connection with the destination FileNet infrastructure ObjectStore name <code>String</code> Name of the destination object-store where the documents and metadata will be injected <p>Optional settings</p> Key Type Description Default value Try using 'DocumentTitle' property <code>Boolean</code> When filing a document in a folder, try to use the FileNet DocumentTitle property for the RelationShip name Process multi-pages content as multi-content <code>Boolean</code> Treat the content of multi-pages document as multi-content document in FileNet. Dry run <code>Boolean</code> Needs to set 'UpdatingBatch on documents' to <code>true</code> WHERE clause for folder case <code>String</code> where clause to define for case research Restrain search results to documents <code>Boolean</code> Force Document search to limit to the class name provided on the document Only process 1st content <code>Boolean</code> Relevant for multi-content documents Restrain search results to folders <code>Boolean</code> Force folder search to limit to the class name provided on the folder Skip content injection <code>Boolean</code> Skip document content injection, only load the metadata and/or annotations of the processed document Skip document unfiling <code>Boolean</code> Force to skip Document unfiling to existing folders before linking it to the provided folders ; new linkages will be added to the existing ones Clear in-place annotations <code>Boolean</code> If source document contains annotations, cleanup existing ones in P8 Restrain search results to case <code>Boolean</code> Force case search to limit to the class name provided on the case Synchronous folder creation <code>Boolean</code> Enforce synchronous folder creation, to make them more thread-safe <code>true</code> Metadata carrying document UUID <code>String</code> Leave empty to disable updating <code>fileNetDocumentId</code> Variable name of annotation ID <code>String</code> Variable name of annotation id used to replace it by generated FileNet annotation id <code>${annotationId}</code> Force deletion <code>Boolean</code> If no matching document can be found, an error is thrown WHERE clause for folder research <code>String</code> Fast2 will update all folders matching the following WHERE statement Associate annotation FileNet ID to its content <code>Boolean</code> Update annotation content with its generated FileNet id according to annotation id variable Delete in-place version <code>Boolean</code> Delete the last document version after checkin a new one Update system properties <code>Boolean</code> It can only be used for either document creation or update (when a new version is created) Default MimeType <code>String</code> Mime-type to set when none has been found Fields to update <code>String</code> Default query to select fields to update <code>*</code> Post-commit delta <code>Integer</code> Add a post-commit time, may be usefull to let FileNet perform asynchronous handling of document injection <code>0</code> Limit CE connection life-time <code>Long</code> Limit CE Session life-time : at end of TTL, the Session will be replaced by a brand new one <code>Long.MAX_VALUE</code> Force to perform update <code>Boolean</code> In case the document did not exist, an error is thrown WHERE clause for update <code>String</code> Fast2 will update all documents matching the following WHERE statement  <p> Ex/  [Id]=${myFileNetDocumentId})</p>"},{"location":"catalog/loader/#FileNetInjector","title":"FileNetInjector  - Injector for FileNet","text":"<p>Use this task to inject documents and data into a FileNet. If all documents have the same UUID for the VersionSeries data provided in the task configuration, then the FileNet versionable object will be created based on the 'MajorVersionNumber' and 'MinorVersionNumber' properties. 'Custom objects' and 'Referential Containment Relationship' are supported. If a document is injected with a folder having a FileNet compatible ID, then the folder will be created with this UUID, if not existing already.</p> <p>Mandatory settings</p> Key Type Description The FileNet connection provider FileNetConnectionProvider The module establishing the connection to the remote FileNet instance. For more configuration about this object, refer to appropriate section. ObjectStore name <code>String</code> Name of the destination object-store where the documents and metadata will be injected <p>Optional settings</p> Key Type Description Default value Property Helper PropertyHelper Try using 'DocumentTitle' property <code>Boolean</code> When filing a document into a folder, try to use the FileNet 'DocumentTitle' for the RelationShip name Process multi-pages content as multi-content <code>Boolean</code> Treat the content of multi-pages document as multi-content document in FileNet Keep original VersionSeries ID <code>Boolean</code> If true, Fast2 will create the multiversion documents with the VersionSeries ID specified in the 'VersionSeries metadata' configuration field. Dry run <code>Boolean</code> Do not perform anything, just prepare UpdatingBatch and drop when finished. It implies to activate 'Use UpdatingBatch on documents'. Restrain search results to documents <code>Boolean</code> Force Document search to limit to the class name provided on the document Metadata carrying parent folder UUID <code>String</code> Name of the metadata where Fast2 will store the UUID of the parent folder of the document injected into FileNet P8. Leave empty to disable updating Only process 1st content <code>Boolean</code> When a document has multiple contents, its forces to process the first one only. The others are then skipped Inject FileNet security <code>Boolean</code> Document dataset must have data 'security'. Syntax must be an array of concatenated Strings as so : <code>gType=&lt;String&gt;/gName=&lt;String&gt;/mask=&lt;Integer&gt;/depth=&lt;Integer&gt;/aType=&lt;String&gt;</code> where <code>&lt;Integer&gt;</code> and <code>&lt;String&gt;</code> values are replaced by the corresponding business values. Accept unset properties <code>Boolean</code> Allow registration of blank metadata in FileNet Skip content injection <code>Boolean</code> Skip document content injection, only load the metadata and/or annotations of the processed document Name of ID property <code>String</code> Name of the document property, found in the document dataset, which will be used to force Id at document creation. Leave blank to disable this feature Throw exception if document already exists <code>Boolean</code> An exception is thrown in case an older document has been found. To properly use this options, 'Prevent document overwriting' requires to be <code>true</code> Skip document unfiling <code>Boolean</code> Force to skip Document unfiling to existing folders before linking it to the provided folders. New linkages will be added to the existing ones Auto-classiify at checking <code>Boolean</code> Enable the FileNet Auto-Classify feature when the document is at checking stage Clear in-place annotations <code>Boolean</code> If source document contains annotations, clean up existing ones in P8 Synchronous folder creation <code>Boolean</code> Enforce synchronous folder creation, to make them more thread-safe <code>true</code> Safe update of document <code>Boolean</code> Try updating a document. If no older version of the document can be found, create it Metadata carrying document UUID <code>String</code> Name of the metadata where Fast2 will store the UUID of the document injected into FileNet P8. Leave empty to disable updating <code>fileNetDocumentId</code> Use UpdatingBatch of folders <code>Boolean</code> Use FileNet UpdatingBatch also for folders creation, which may not be thread-safe Variable name of annotation ID <code>String</code> Variable name of annotation id used to replace it by generated FileNet annotation id <code>${annotationId}</code> Force deletion <code>Boolean</code> Force document delete action. If no matching document can be found, an error is thrown Associate annotation FileNet ID to its content <code>Boolean</code> Update annotation content with its generated FileNet id according to annotation id variable Delete in-place version <code>Boolean</code> Delete the last document version after checkin a new one Update system properties <code>Boolean</code> It can only be used for either document creation or update (when a new version is created) Use UpdatingBatch on documents <code>Boolean</code> Run the 'UpdatingBatch' feature of FileNet, at each punnet being processed. Default MimeType <code>String</code> The mime-type to set when no MimeType has been provided neither in document nor its content Limit CE connection life-time <code>Long</code> At end of TTL, the connection will be replaced by a brand new one <code>Long.MAX_VALUE</code> Fields to update <code>String</code> Default query to select fields to update <code>*</code> VersionSeries metadata <code>String</code> Name of the VersionSeries property common to all documents in punnet. If all documents have the same value, they will be considered as one same multiversioned document in FileNet. <code>VersionSeries</code> Post-commit delta <code>Integer</code> Time to wait after a commit instruction, may be useful to let FileNet perform asynchronous handling of document injection <code>0</code> Force folder creation <code>Boolean</code> Overwrite folder canCreate property : create folders when they do not exist Prevent document overwriting <code>Boolean</code> Check if the document already exists before creating it using <code>WHERE</code> clause. You can throw an exception in case an older document can be found (see Throw exception if document already exists). If false, create all documents without control Force to perform update <code>Boolean</code> Force document Update action. In case the document did not exist, an error is thrown WHERE clause for update <code>String</code> The criteria which the documents to update will have to match  <p> Ex/  [Id]=${myFileNetDocumentId}</p>"},{"location":"catalog/loader/#FlowerInjector","title":"FlowerInjector  - Fast2 injector module for FlowerDocs","text":"<p>Allows to load a component (document, task, folder or virtual folder) into Flower. Can load facts, document content and annotations</p> <p>Mandatory settings</p> Key Type Description FlowerDocs connection provider FlowerDocsConnectionProvider Component category <code>String</code> FlowerDocs component category can be DOCUMENT, TASK, FOLDER or VIRTUAL_FOLDER <p>Optional settings</p> Key Type Description Default value Component Load document annotations <code>Boolean</code> <code>false</code> Load document file content <code>Boolean</code> <code>false</code> Load component facts <code>Boolean</code> <code>false</code> Mode update <code>Boolean</code> Does not update content <code>false</code>"},{"location":"catalog/loader/#MailSender","title":"MailSender  - Email sender task","text":"<p>This task will send custom built emails to specific people or mailing list of your choice.</p> <p>Mandatory settings</p> Key Type Description Email provider MailSenderProvider The Fast2 module establishing the connection to the email server, from the account of a given user. For more about the configuration of the object, please refer to the appropriate section <p>Optional settings</p> Key Type Description Email subject <code>String</code> The subject/object of the email to send. Sender address <code>String</code> The value of this field can be resolved by Fast2 (ie you can use dynamic values) Recipient address(es) <code>String list</code> The value of this field can be resolved by Fast2 (ie you can use dynamic values) Multi-line content <code>String list</code> The content of the email. It can be composed with different paragraphs, please note Fast2 is not responsible for the text formatting though."},{"location":"catalog/loader/#MFilesInjector","title":"MFilesInjector  - Module to inject into M-Files via its public REST API. Java 11 is required for this module.","text":"<p>Module to inject into M-Files via its public REST API. Java 11 is required for this module.</p> <p>Mandatory settings</p> Key Type Description M-Files connection provider <code>MFilesConnectionProvider</code> Credentials to connect to M-Files remote system via its REST API."},{"location":"catalog/loader/#MobiusInjector","title":"MobiusInjector  - Inject documents into your ASG Mobius system","text":"<p>\u26a0\ufe0f Deleted: The <code>MobiusInjector</code> task is deleted and no longer available in Fast2 from v2025.0.0.</p> <p>This task will upload documents and metadata onto Mobius, from version 8 up to version 11. Based on the <code>className</code> and <code>section</code> properties, specify exactly where you'd like your documents to be stored.</p> <p>Mandatory settings</p> Key Type Description Mobius connection provider MobiusConnectionProvider The Fast2 module required to establish the communication with the destination Mobius instance <p>Optional settings</p> Key Type Description Properties to inject into Mobius <code>String list</code> List of names of the properties which will be added to the topic of the document. These properties have to be attached to the document"},{"location":"catalog/loader/#MultiUpdateSQLQueryTask","title":"MultiUpdateSQLQueryTask  - Update a database with several document data","text":"<p>Mandatory settings</p> Key Type Description WHERE clause <code>String</code> All matching rows will be updated. This field will be resolved by Fast2 before the task is executed Query caller SQLQueryGenericCaller This modules is responsible of establishing the connection between Fast2 and the designated database Table name <code>String</code> The table of the row to update <p>Optional settings</p> Key Type Description Default value Skip exception <code>Boolean</code> Fast2 will either throw an error if no update action has been executed, or proceed to next document <code>true</code> Data to update <code>String list</code> The list of all key-values pairs to update the given rows with  <p> Ex/  targetColumnName/documentData</p>"},{"location":"catalog/loader/#NuxeoInjector","title":"NuxeoInjector  - Nuxeo injector using Nuxeo REST API","text":"<p>This task load documents and metadata into a given Nuxeo instance using the Nuxeo REST API. If the document does not have any folder property, he will be injected in the workspace root folder. The documents have to be in the correct version order before entering the Nuxeo task. For Nuxeo to identify the versions as different, either the 'name' or the 'dc:description' data needs to be different.</p> <p>Mandatory settings</p> Key Type Description Nuxeo connection provider NuxeoConnectionProvider <p>Optional settings</p> Key Type Description Default value Attach punnet data <code>Boolean</code> Check this option to map the punnet data to Nuxeo properties <code>true</code> Blacklist <code>String list</code> List of metadata (either on punnet or document) not to map to the Nuxeo documents. Attach document data <code>Boolean</code> Check this option to map the document data to Nuxeo properties <code>true</code> Injection path <code>String</code> Default path to inject your documents <code>/</code> Attach folders <code>Boolean</code> Check this option to upload the documents into a specified folder architecture based on the details embedded in the document <code>true</code> Delete annotations when they already exist <code>Boolean</code> <code>true</code> Replace document if already present <code>Boolean</code> Check this option to replace all versions of a document in Nuxeo, based on the data <code>documentId</code>. This feature acts like a replacement. If the document did not already exist, then it will be created from scratch. Attach content <code>Boolean</code> <code>true</code>"},{"location":"catalog/loader/#OpenTextInjector","title":"OpenTextInjector  - OpenText Content Server injector based on custom Rest API","text":"<p>Mandatory settings</p> Key Type Description Attribute file path <code>String</code> OpenText category must be associated with their ids within the file. Fast2 will automatically translate the data name to the correct id specified by the file  <p> Ex/  ../config/attributes.properties</p> OpenText credentials OpenTextCredentials Expected folder architecture <code>String list</code> OpenText client OpenTextRestClient <p>Optional settings</p> Key Type Description Default value List of properties not to inject <code>String list</code> These properties will be excluded NodeId of the webReport parameter to use <code>String</code> Opentext webReports allow users to build search request with specific parameters List of properties to inject <code>String list</code> If empty the whole dataSet will be injected Version document if data exists <code>String</code> Fast2 will check if the data filled in this field for carrying the version and the 'nodeId' data are available at document level. If so, the document will be injected within OpenText and its version increased by one. A new data 'createdVersion' will be added to the document Ticket period <code>Integer</code> Time in seconds between two ticket creation <code>60</code>"},{"location":"catalog/loader/#SQLQueryTask","title":"SQLQueryTask  - Add data to documents in database","text":"<p>Simple task to query a SQL database and fill each Document data with results</p> <p>Mandatory settings</p> Key Type Description Key of target data <code>String</code> The name of the data where the value must be added Query caller SQLQueryColumnCaller This modules is responsible of establishing the connection between Fast2 and the designated database Key of source data <code>String</code> The name of the data to update the documents with. If the data is not retrieved from the document, Fast2 will skip this document <p>Optional settings</p> Key Type Description Default value Reset target data <code>Boolean</code> Clean content when target already exists <code>true</code>"},{"location":"catalog/loader/#SQLStatementTask","title":"SQLStatementTask  - Insert or updated database","text":"<p>With this task, you will be able to perform any SQL instruction (such as insertions and updates) on any given table of the specified database</p> <p>Mandatory settings</p> Key Type Description SQL statement <code>String</code> The statement you want Fast2 to run on the database. The syntax needs to match SQL standards. Use a ? to reference your annotation  <p> Ex/  INSERT INTO table_name (doc_id, annotation) VALUES ('${documentId}', ?);</p> Query caller SQLQueryGenericCaller This modules is responsible of establishing the connection between Fast2 and the designated database <p>Optional settings</p> Key Type Description Inject annotations <code>Boolean</code> Fast2 will either throw an error if the statement has not properly been executed, or fail silently Skip exceptions <code>Boolean</code>"},{"location":"catalog/loader/#UpdateSQLQueryTask","title":"UpdateSQLQueryTask  - Update SQL database","text":"<p>This task will perform update instructions base on document data onto a given SQL database</p> <p>Mandatory settings</p> Key Type Description SQL connection provider SQLQueryGenericCaller The module establishing the communication between Fast2 and the designated database Name of the new column <code>String</code> The name of the column which will be added to the row with the value to update Table name <code>String</code> The name of the SQL table on which all update statements will be performed <p>Optional settings</p> Key Type Description Default value WHERE clause <code>String</code> All matching rows will be updated. This field will be resolved by Fast2. Leave empty to target all rows. Ignore when no row updated <code>Boolean</code> Skip exception when no database row has been updated <code>true</code> Value to update <code>String</code> Name (= key) of the document metadata whose value will be inserted into the row. If none is found in the document, this latter is skipped"},{"location":"catalog/source/","title":"Sources","text":""},{"location":"catalog/source/#AWSSource","title":"AWSSource  - Complete extractor module from AWS S3","text":"<p>This AWS extractor performs from a list of sources the extraction of your document content. Many options (suffix, prefix...) exist to optimally specify the documents you want to take into account</p> <p>Mandatory settings</p> Key Type Description AWS connection provider AWSConnectionProvider Must have AmazonS3FullAccess permission Source buckets <code>String list</code> Buckets where folders are stored <p>Optional settings</p> Key Type Description Default value Accept quotes in values <code>Boolean</code> If enabled, this option will accept quotes in values AWS start-after key <code>String</code> Absolute path of S3 object to start after ARN key for KMS encryption <code>String</code> New column names to set <code>String list</code> If empty, populated from first line Replace empty titles <code>Boolean</code> If enabled, any empty title in the CSV file will be replaced by the default value. If several titles miss, the default title will be suffixed with an incremental index. AWS suffix <code>String</code> S3-object will be extracted if its key has such suffix Number of lines to skip <code>Integer</code> This option helps to skip lines, meaning their data will not be processed. By default, only the 1st line is skipped considering it surely consists in the headers row  <p> Ex/  In a file of 10 lines, putting '3' in the input field will skip the 1st, 2nd and 3rd lines</p> <code>1</code> Default column title <code>String</code> Default value used for untitled columns. Will be incremented with a number if many. Will only be used if the replace empty titles option is enabled. <code>Untitled</code> Continue processing CSV on fail <code>Boolean</code> If enabled, the following errors will not trigger an exception: - CSV file does not exist - CSV file is empty (no line) - CSV file has only headers and no line for documents.Note that if you give 5 CSV paths and the number 3rd is in error, only the Fast2 logs will provide information regarding the failing CSV file. Source folders <code>String list</code> Folders in the S3 bucket(s) containing the files to migrate AWS prefix <code>String</code> S3-object will be extracted if its key has such prefix Stop at first error in CSV <code>Boolean</code> Fast2 will automatically be stopped at the first error encountered in the CSV <code>false</code> Column headers in first CSV file only <code>Boolean</code> Only read column definitions from the first parsed CSV file <code>false</code> Documents per punnet from CSV <code>Integer</code> Number of documents each punnet will carry when processing a CSV file  <p> Ex/  By setting this value to 2, each punnet created will contain 2 documents</p> <code>1</code> CSV separator <code>String</code> Separator between each value. This option will be ignored if 'Process files as list of punnets' is disabled. <code>,</code> Process files as list of punnets <code>Boolean</code> The expected format is a CSV file (1 row for headers, next rows for 1 punnet each), but the <code>.csv</code> extension is not mandatory. Only single-documents punnets will be created (ex/ not working for multiversions documents). Multivalue data will be concatenated to one whole String value. The first line of the file will be considered as CSV header line. extraColumns <code>String list</code>"},{"location":"catalog/source/#AlfrescoRestSource","title":"AlfrescoRestSource  - Alfresco extractor using Alfresco REST protocol","text":"<p>This task relies on the Alfresco public REST API (with v1.0.4 of the Alfresco REST client) to retrieve documents and metadata into a given Alfresco instance</p> <p>Mandatory settings</p> Key Type Description CMIS query or AFTS query <code>String</code> Query used to retrieve the objects from Alfresco  <p> Ex/  SELECT * FROM cmis:document WHERE cmis:name LIKE 'test%' or cm:title:'test%'</p> Alfresco connection provider AlfrescoRESTConnectionProvider <p>Optional settings</p> Key Type Description Default value Max item to return per call <code>Integer</code> Set the paging max items threshold to specify the number of Alfresco objects to retrieve per call. <code>100</code> Fields to extract <code>String</code> The less the better ! Only the 'id' is necessary to start the migration workflow. Separate the different values with a comma, no space. Use properties from com.alfresco.client.api.common.constant.PublicAPIConstant library.  <p> Ex/  id,name</p> <code>id</code>"},{"location":"catalog/source/#AlfrescoSource","title":"AlfrescoSource  - Alfresco extractor using CMIS technology","text":"<p>Through an SQL query, this alfresco extractor will use the CMIS technology to fetch the content, the metadata and the annotations of your documents from a given Alfresco repository</p> <p>Mandatory settings</p> Key Type Description SQL query to extract documents <code>String</code> Fast2 will retrieve all documents, folder, references, items and metadata matching this query. If the query is exhaustively specifying data to extract, uncheck the 'Extract document properties'. The data <code>cmis:objectId</code> will be mandatory.  <p> Ex/  SELECT * FROM cmis:document</p> Alfresco connection provider AlfrescoCMISConnectionProvider CMIS version must be 1.1 <p>Optional settings</p> Key Type Description Default value Property Helper PropertyHelper Number of items per result page <code>Integer</code> Maximum number of results provided <code>1</code> Number of documents per punnet <code>Integer</code> <code>1</code> Extract document properties <code>Boolean</code> <code>true</code> Keep folder structure within document <code>Boolean</code> requires extractProperties to be true <code>true</code> Extract document content <code>Boolean</code> Does not work asynchronously <code>false</code>"},{"location":"catalog/source/#BlankSource","title":"BlankSource  - Empty punnet generator","text":"<p>This source builds a punnet list containing one or more empty documents. Each document will only contain its identifier : documentId. This punnet can then be enriched by other steps in the processing chain.</p> <p>Mandatory settings</p> Key Type Description Document IDs DocumentIdList Source list of documents to extract from their IDs <p>Optional settings</p> Key Type Description Default value Document per punnet <code>Integer</code> Number of documents each punnet punnet must carry on  <p> Ex/  The input file includes 10 lines meaning 10 document identifiers to extract. By setting this value to 2, Fast2 will create 5 punnets, each containing 2 documents</p> <code>1</code>"},{"location":"catalog/source/#CMODSource","title":"CMODSource  - Complete extraction module from a CMOD environment","text":"<p>This task is used to extract documents in the Content-Manager On Demand ECM. One CMOD document is equivalent of 1 punnet of 1 document. Indexes, optional content and annotations will also be extracted. A WAL request is made to find the corresponding documentId in ImageServices. The metadata extraction is then carried out. Relative data are stored in each document of the punnet being processed.Note: All Image Services properties are exported systematically. This task is not a real source task. The documents to be extracted are identified by an BlankSource task generating a set of empty Punnets, i.e. containing only documents each bearing a document number (documentId) to extract.This task relies on the 'libCMOD.dll' library. This library must be in a directory of the Windows PATH. In the wrapper.conf or hmi-wrapper.conf file, activate the use of this library: wrapper.java.library.path.  = ../libCMOD/dll32For the moment, only 32-bit libraries are configured <p>Mandatory settings</p> Key Type Description CMOD connection provider CMODConnectionProvider Folders to extract <code>String list</code> List of CMOD folders which will be scanned. Additional level(s) of filter can be used with the SQL query down below. <p>Optional settings</p> Key Type Description Default value SQL query to extract documents <code>String</code> Enter here the <code>WHERE</code> clause used to filter documents. Since this request is made on the indexes of CMOD documents, the property used to filter out the documents need to be indexed in CMOD prior to any extraction.  <p> Ex/  WHERE Date = '2012-11-14'</p> Extract document annotations <code>Boolean</code> The document annotation will be extracted during the process <code>false</code> Number of documents per punnet <code>Integer</code> <code>1</code> Extract document content <code>Boolean</code> The document content will be extracted during the process <code>false</code> Maximum results count <code>Integer</code> <code>2000</code>"},{"location":"catalog/source/#CMSource","title":"CMSource  - Complete extractor from Content Manager solution","text":"<p>Mandatory settings</p> Key Type Description CM connection provider CMConnectionProvider SQL query <code>String</code> Select precisely documents you want to extract through a classic SQL query <p>Optional settings</p> Key Type Description Default value Extract standard system properties <code>Boolean</code> <code>false</code> Extract advanced system properties from DKDDO object <code>Boolean</code> <code>false</code> Maximum results returned by the query <code>Integer</code> Set to 0 to disable limiting number of results <code>0</code> Number of documents per Punnet <code>Integer</code> Set the number of documents each punnet will hold <code>1)</code> Extract custom properties <code>Boolean</code> <code>false</code> Query type <code>Integer</code> See com.ibm.mm.beans.CMBBaseConstant for further details. Default value is XPath (7) <code>7</code>"},{"location":"catalog/source/#CSVSource","title":"CSVSource  - CSV file parser","text":"<p>This task can be used to start a migration from a CSV file. By default, the first line of your file is considered as the column headers. Whether the column values are surrounded with double-quotes (<code>\\_</code>) or not, the CSVSource task will process either way. If you need to force the document ID for the whole process, use the metadata <code>documentId</code>.</p> <p>Mandatory settings</p> Key Type Description CSV paths <code>String list</code> List of paths to CSV files to be parsed. Check out the following examples for allowed formats  <p> Ex/  <code>C:/samples/myDocument.csv</code><code>C:\\\\samples\\\\myDocument.csv</code><code>C:\\\\\\\\samples\\\\\\\\myDocument.csv</code><code>\\\"C:\\\\samples\\\\myDocument.csv\\\"</code><code>C:/samples/${map}.csv</code></p> <p>Optional settings</p> Key Type Description Default value Accept quotes in values <code>Boolean</code> If enabled, this option will accept quotes in values CSV file path metadata <code>String</code> Punnet property name containing the CSV file path. Set to empty or null to disable File name for error CSV file <code>String</code> This option might be useful when you need to have a specific file name where to register the lines in error of your CSV file. The name can both be linked to some workflow properties surrounded with <code>${...}</code> (ex/ campaign, punnetId, etc) or hard-written. Warning: This value can be overwritten by the Associate CSV-error file with original CSV filename option <code>lines_in_error.csv</code> New column names to set <code>String list</code> If empty, populated from first line Replace empty titles <code>Boolean</code> If enabled, any empty title in the CSV file will be replaced by the default value. If several titles miss, the default title will be suffixed with an incremental index. Folder path for error CSV file <code>String</code> The error file will be stored in your system. You can choose where by configuring this very field. Here as well you can set the path either with workflow properties (<code>${...}</code>) or hard-write it <code>./csv_errors/</code> Number of lines to skip <code>Integer</code> This option helps to skip lines, meaning their data will not be processed. By default, only the 1st line is skipped considering it surely consists in the headers row  <p> Ex/  In a file of 10 lines, putting '3' in the input field will skip the 1st, 2nd and 3rd lines</p> <code>1</code> Default column title <code>String</code> Default value used for untitled columns. Will be incremented with a number if many. Will only be used if the replace empty titles option is enabled. <code>Untitled</code> Generate hash of CSV content <code>Boolean</code> The hash of the content will be generated and stored in the punnet among a property named hashData <code>false</code> Continue processing CSV on fail <code>Boolean</code> If enabled, the following errors will not trigger an exception: - CSV file does not exist - CSV file is empty (no line) - CSV file has only headers and no line for documents.Note that if you give 5 CSV paths and the number 3rd is in error, only the Fast2 logs will provide information regarding the failing CSV file. File encoding <code>String</code> CSV encoding character set <code>UTF-8</code> Associate CSV-errors file with original CSV filename <code>Boolean</code> This checkbox allows you to match your error file with your original CSV file, just suffixing the original name with '_KO'. That way, if you use multiple files, all the lines in error will be grouped by file name. Using this option overwrite the File name for error CSV file, but still can be used in addition of the Folder path for error CSV file <code>false</code> Stop at first error in CSV <code>Boolean</code> Fast2 will automatically be stopped at the first error encountered in the CSV <code>false</code> File scanner (Deprecated) FileScanner THIS OPTIONS IS DEPRECATED, consider using the 'CSV paths' instead. Column of document ID <code>String</code> Column header of the metadata to set as the document ID <code>documentId</code> Document property name containing CSV file path <code>String</code> Set to empty or null to disable Move to path when finished <code>String</code> Consider using ${variable} syntax Column headers in first CSV file only <code>Boolean</code> Only read column definitions from the first parsed CSV file <code>false</code> Documents per punnet from CSV <code>Integer</code> Number of documents each punnet will carry when processing a CSV file  <p> Ex/  By setting this value to 2, each punnet created will contain 2 documents</p> <code>1</code> CSV separator <code>String</code> Separator between each value. This option will be ignored if 'Process files as list of punnets' is disabled. <code>,</code> Extra columns <code>String list</code> List of the form target=function:arg1:arg2:..."},{"location":"catalog/source/#DctmSource","title":"DctmSource  - Complete extractor from Documentum","text":"<p>This connector will extract basic information from the source Documentum repository. Since Documentum architecture involves particular port and access management, a worker should be started on the same server where Documentum is running.Make sure to check the basic requirements at the setup for Documentum on the official Fast2 documentation.</p> <p>Mandatory settings</p> Key Type Description Connexion information to Documentum Repository DctmConnectionProvider The DQL Query to run to fetch documents <code>String</code> The less attributes you fetch, the faster the query will be executed on the Documentum side.  <p> Ex/  <code>SELECT r_object_id FROM dm_document WHERE ...</code></p> <p>Optional settings</p> Key Type Description Default value Batch size <code>Integer</code> If size is &lt;1, the size will be defined from the Documentum server-side. <code>50</code>"},{"location":"catalog/source/#FileNet35Source","title":"FileNet35Source  - Complete extractor from FileNet 3.5","text":"<p>The FileNet35Source retrieves existing documents from the FileNet P8 3.5 ECM through a query. This punnet will contain the metadata of the recovered document, its content and annotations</p> <p>Mandatory settings</p> Key Type Description FileNet 3.5 connection provider FileNet35ConnectionProvider Connection parameters to the FileNet instance SQL query <code>String</code> SQL query corresponding to the list of documents to extract <p>Optional settings</p> Key Type Description Default value Attribute used for Document IDs <code>String</code> Name of the FileNet P8 3.5 attribute corresponding to the values \u200b\u200bretrieved in the Document IDs list <code>Id</code> Empty punnet when no result <code>Boolean</code> An empty punnet will be created even if the result of the query is null <code>false</code> Documents per punnet <code>Integer</code> Number of documents each punnet punnet must carry on  <p> Ex/  By setting this value to 2, each punnet created will contained 2 documents</p> <code>1</code> Document IDs DocumentIdList Source list of documents to extract from their IDs"},{"location":"catalog/source/#FileNetSource","title":"FileNetSource  - Complete extractor from FileNet P8","text":"<p>The FileNetSource source retrieves existing documents from the FileNet P8 5.x ECM through an SQL query. This punnet will contain the metadata of the recovered document, security information and parent folders.</p> <p>Mandatory settings</p> Key Type Description Object store name <code>String list</code> Name of the repository to extract from SQL query <code>String</code> SQL query corresponding to the list of documents to extract FileNet connection provider FileNetConnectionProvider Connection parameters to the FileNet instance <p>Optional settings</p> Key Type Description Default value Number of entries per result page <code>Integer</code> Number of results returned per page by the FileNet P8 query <code>1000</code> Documents per punnet <code>Integer</code> Number of documents each punnet punnet must carry on  <p> Ex/  By setting this value to 2, each punnet created will contained 2 documents</p> <code>1</code> Extract object type properties <code>Boolean</code> The FileNet P8 metadata of the document which are Object type will be saved at the punnet level <code>false</code> Extract FileNet system properties <code>Boolean</code> System metadata during extraction is saved at the punnet level <code>false</code> Properties to extract <code>String list</code> Exhaustive list of FileNet metadata to extract. If empty, all properties will be extracted. Extract FileNet security <code>Boolean</code> The security of the document will be saved at the punnet level <code>false</code> Extract documents instance informations <code>Boolean</code> The fetchInstance method makes a round trip to the server to retrieve the property values of the ObjectStore object <code>false</code> Extract folders absolute path <code>Boolean</code> The absolute path of the folder inside the FileNet instance will be extracted during the process <code>false</code> Throw error if no result <code>Boolean</code> Throw exception when SQL Query finds no result."},{"location":"catalog/source/#FlowerSource","title":"FlowerSource  - Flower extractor","text":"<p>Allows components extraction from Flower using JSON formatted Flower request. Components can be documents, folders, virtual folders or tasks.</p> <p>Mandatory settings</p> Key Type Description FlowerDocs connection provider FlowerDocsConnectionProvider Flower component category <code>String</code> Choose among DOCUMENT, TASK, FOLDER or VIRTUAL_FOLDER JSON Flower Search Request <code>String</code>"},{"location":"catalog/source/#LocalSource","title":"LocalSource  - A generic broker for wildcarded punnet lists","text":"<p>This class will search for local files to analyze them from a defined path</p> <p>Mandatory settings</p> Key Type Description Files paths <code>String list</code> List of paths to files to be parsed. Patterns <code>${...}</code> are not supported. The threshold can be maxed-out, exclusions are not supported.  <p> Ex/  <code>C:/samples/myDocument.txt</code> -&gt; retrieve only one document<code>C:\\\\samples\\\\myDocument.txt</code><code>C:\\\\\\\\samples\\\\\\\\myDocument.txt</code><code>\\\"C:\\\\samples\\\\myDocument.txt\\\"</code><code>C:/samples/*.*</code> -&gt; retrieve all files directly at the root of the <code>samples/</code> folder, no matter their extension<code>C:/samples/**</code> -&gt; retrieve all files directly at the root of the <code>samples/</code> folder, as well as file inside subfolders<code>C:/samples/**/*.yes</code> -&gt; retrieve all files directly at the root of the <code>samples/</code> folder, as well as file inside subfolders, whose extension is <code>.yes</code>.</p> <p>Optional settings</p> Key Type Description Default value File scanner (Deprecated) FileScanner THIS OPTIONS IS DEPRECATED, consider using the 'Files paths' instead. Fallback XML/Json parsing <code>Boolean</code> If true, the file will be added as document content in the punnet when XML parsing fails. Consider adding this file as a regular file (not an XML) <code>false</code> Skip parse exceptions <code>Boolean</code> The task does not throw an error when XML parsing fails. Do not stop parsing and resume to next candidate <code>false</code> XSL Stylesheet path <code>String</code> The XSL stylesheet file to use when parsing XML files Number of files per punnet <code>Integer</code> If the files are not in XML format, the punnet will contain as many documents as defined in this option <code>1</code> Allow any kind of file <code>Boolean</code> All types of files can be added. Otherwise, only XML-based Punnet descriptions are allowed <code>true</code> Skip XML parsing <code>Boolean</code> The XML file will not be parsed before being added to the punnet. Not recommended in most cases <code>false</code> Maximum number of files scanned <code>Integer</code> If this field is completed, the number of files scanned will not exceed the value filled in. Leave empty to retrieve all files matching input pattern filter <code></code>"},{"location":"catalog/source/#MailSource","title":"MailSource  - Complete extractor from mail box","text":"<p>The MailSource task extracts messages from an e-mail box. Each extracted message will correspond to a punnet, one document per punnet</p> <p>Mandatory settings</p> Key Type Description MailBox connection provider MailBoxProvider <p>Optional settings</p> Key Type Description Default value Search in Headers <code>String</code> Enter a pair of header and pattern to search separated by a colon <code>:</code>.  <p> Ex/  cc:copy</p> Header names <code>String list</code> List of header names (case-sensitive) to retrieve from the mail. Message-Id, Subject, From, To, Cc and Date are added by default Start Id <code>Integer</code> Index from which the first message should be extracted <code>1</code> Update document with mail root folder name <code>String</code> Name of the metadata to add to the document. If filled, the full name of the source folder is indexed in this metadata. Set to null or empty to disable updating Folders to scan <code>String list</code> List of files to scan in the mailbox. If filled, override root folder name from MailBox connection provider configuration AND condition for search <code>Boolean</code> Checking this options will only retrieve messages matching all search conditions possible (unread messages, text in header, body or subject). If unchecked, the 'OR' operand will be applied. Forbidden characters <code>String</code> List of characters to remove from Message-Id when building the DocumentId <code>&lt;&gt;:\\\"/\\\\|?*</code> Search in Subject <code>String</code> Search in Body <code>String</code> Only unread messages <code>Boolean</code>"},{"location":"catalog/source/#OpenTextSource","title":"OpenTextSource  - OpenText extractor using OpenText REST protocol","text":"<p>Mandatory settings</p> Key Type Description OpenText credentials OpenTextCredentials OpenText client OpenTextRestClient Node Id <code>Integer</code> <p>Optional settings</p> Key Type Description Default value Order by named column <code>String</code> Format can be 'name' or 'asc_name' or 'desc_name'. If the prefix of asc or desc is not used then asc will be assumed  <p> Ex/  asc_name</p> Ticket period <code>Integer</code> Time in seconds between two ticket creation <code>60</code>"},{"location":"catalog/source/#RandomSource","title":"RandomSource  - Random punnet generator","text":"<p>Randomly produces punnets containing documents, metadata, content...</p> <p>Mandatory settings</p> Key Type Description Default value Number of punnet to generate <code>Integer</code> If 'minimum punnet number' is set, this value here will be considered as the higher threshold <code>1000</code> <p>Optional settings</p> Key Type Description Default value Maximum document number <code>Integer</code> Excluded <code>1</code> Minimum metadata number <code>Integer</code> Included <code>1</code> Minimum punnet number <code>Integer</code> If not set, the number of generated punnets will be exactly the number set at 'Number of punnets to generate' Maximum number of metadata values <code>Integer</code> Included <code>6000</code> Minimum number of metadata values <code>Integer</code> Included <code>0</code> Maximum metadata number <code>Integer</code> Excluded <code>10</code> Minimum document number <code>Integer</code> Included <code>1</code>"},{"location":"catalog/source/#SQLSource","title":"SQLSource  - Complete extractor from SQL database","text":"<p>Extract and map to punnet or document layout specified properties</p> <p>Mandatory settings</p> Key Type Description SQL connection provider SQLQueryGenericCaller SQL query <code>String</code> Select precisely documents you want to extract through a classic SQL query <p>Optional settings</p> Key Type Description Default value Property name to group by document <code>String</code> Column used to group lines by document. If used set an 'ORDER BY' in your sql query SQL mapping for punnet <code>String/String map</code> Mapping of SQL properties to punnet metadata. Use 'punnetId' for Punnet Id Allow duplicates data <code>Boolean</code> Property name to group by punnet <code>String</code> Column used to group lines by punnet. If used set an 'ORDER BY' in your sql query SQL mapping for document <code>String/String map</code> Mapping of SQL properties to document metadata. Use 'documentId' for Document Id, otherwise the first column will be used as documentId Push remaining, non-mapped columns as document properties <code>Boolean</code> <code>true</code>"},{"location":"catalog/source/#ZipSource","title":"ZipSource  -","text":""},{"location":"catalog/tool/","title":"Tools","text":""},{"location":"catalog/tool/#AlfrescoRestDeleteNode","title":"AlfrescoRestDeleteNode  - Alfresco delete nodes using Alfresco REST protocol","text":"<p>This task relies on the Alfresco public REST API (with v1.0.4 of the Alfresco REST client) to delete nodes.</p> <p>Mandatory settings</p> Key Type Description Alfresco connection provider AlfrescoRESTConnectionProvider <p>Optional settings</p> Key Type Description Default value Permanent deletion of the node <code>Boolean</code> If true then the node is deleted permanently, without moving to the trashcan. Only the owner of the node or an admin can permanently delete the node. <code>true</code> The pattern to get the node Id from the document Pattern"},{"location":"catalog/tool/#AwsMove","title":"AwsMove  - AWS S3 file mover","text":"<p>Reorganize your files inside your AWS S3 environment.</p> <p>Mandatory settings</p> Key Type Description AWS access credentials AWSConnectionProvider Must have granted AmazonS3FullAccess permission Target key <code>String</code> The destination path inside your bucket where the document must be placed. Use as standard Pattern (includes S3 Folders) <p>Optional settings</p> Key Type Description Target bucket <code>String</code> The target bucket where you want to move your S3 files. If empty use the same as origin"},{"location":"catalog/tool/#CheckCompoundDocumentSettings","title":"CheckCompoundDocumentSettings  - Check if an Office document contains embedded files","text":"<p>Only Office documents are supported (docx, xlsx, pptx). All other contents will be skipped.</p> <p>Optional settings</p> Key Type Description Default value Data name for found items <code>String</code> The name of the new data under which the list of found items will be stored <code>EMBEDDED_FILES</code> Extract as side content <code>Boolean</code>"},{"location":"catalog/tool/#CountPdfPages","title":"CountPdfPages  - Count the number of pages in PDF file","text":"<p>This task will add the number of pages as a metadata to the document.</p> <p>Optional settings</p> Key Type Description Default value Throw conversion exceptions <code>Boolean</code> If Fast2 performs document conversion, it can either fail silently or pop an error when the action has not been properly completed <code>true</code> Mime-type : Check document before content <code>Boolean</code> You can assume the file extension is accurate, or ask Fast2 to check the content encoding to identify more precisely the document mime-type. By default, Fast2 will check at content level <code>false</code> Process annotation contents <code>Boolean</code> If annotations are asked to be migrated, you can filter here to process their content(s) or only their metadata <code>false</code> Scan recursive content <code>Boolean</code> Only convert terminal contents and not container ones <code>false</code> Process all contents <code>Boolean</code> Fast2 will either only focus on the first encountered content, or process them all <code>true</code> Supported mime-types <code>String list</code> Specify the list of all mime-types of documents which Fast2 will convert Property name <code>String</code> Name of the property to which the number of pages will be linked <code>F_PAGES</code>"},{"location":"catalog/tool/#DeduplicatePunnets","title":"DeduplicatePunnets  - De-duplicate tasks based on some pattern","text":"<p>This task is used to get rid of duplicate punnets</p> <p>Mandatory settings</p> Key Type Description Save values to this file Pattern The pattern to use to get the unique value Pattern <p>Optional settings</p> Key Type Description Default value Iterate over punnets (default: false) or over documents (true) <code>Boolean</code> <code>false</code> The pattern to use to explain which element this is duplicate with Pattern Size of per-file hash table <code>Integer</code> Each file has a table attached to access the existing elements faster (the larger the table, the faster the search). Each individual file will store n elements (size of file / size of each elements), the recommended value for hash table should not be less than 10% of the number elements per file, which means each hash table entry references ~10 elemens. Example : storing 50 bytes of identifications (from the Identification pattern), each element will be ~100 bytes (including key, ..), so a 64MBytes file will store ~671088 elements per file. The hash table being 64k, each hash table entry references ~10 elements <code>65536</code> Size of each individual file, in MBytes <code>Integer</code> Multiple files will be created on-demand to store all elements as required. <code>64</code> In which property we put the identification of the first element we are duplicate with <code>String</code>"},{"location":"catalog/tool/#EndTaskWriter","title":"EndTaskWriter  - Create file with custom content when map ends","text":"<p>A task to write a file when all punnets of task are finished.</p> <p>Mandatory settings</p> Key Type Description Output file path <code>String</code> Absolute path to file. This path must include file name and extension. This field will be resolved by Fast2 before the task is run <p>Optional settings</p> Key Type Description Default value File encoding <code>String</code> Encoding of the file where the content will be written <code>UTF-8</code> File content <code>String</code> Text to write in the output file"},{"location":"catalog/tool/#ExceptionGenerator","title":"ExceptionGenerator  - Regularly generate exceptions","text":"<p>This task will generates different exception types : either TaskException or RuntimeException. It will be usefull for your when dealing with exception routing.By default, Fast2 will produce 3 task exceptions, then 4 runtime exceptions, and finally 4 no-exception punnets. To force exceptions, set the no-exceptions ratio to zero.</p> <p>Optional settings</p> Key Type Description Default value Runtime exceptions ratio <code>Integer</code> The number of runtime exception which will be thrown by Fast2 <code>3</code> No-exception ratio <code>Integer</code> The number of no-exception which will be thrown by Fast2 <code>4</code> Task exceptions ratio <code>Integer</code> The number of task exception which will be thrown by Fast2 <code>3</code>"},{"location":"catalog/tool/#GenerateExceptionTask","title":"GenerateExceptionTask  - Throw exception when condition is verified","text":"<p>This task is responsible for exception generation based on a condition which can be dynamically built for each punnet.</p> <p>Optional settings</p> Key Type Description Default value Condition <code>String</code> Set here the condition to trigger exception. This field will be resolved by Fast2 before the task is executed  <p> Ex/  mimeType == application/pdf</p> <code>true</code>"},{"location":"catalog/tool/#HashSignTask","title":"HashSignTask  - Compute content hash","text":"<p>This task computes the hash of a given document content. This new hash can be confronted to an already existing one.</p> <p>Optional settings</p> Key Type Description Default value Suffix of ouptut file <code>String</code> Suffix of the external file containing the hash value to compare with Conten key for hash <code>String</code> Name of the metadata where the hash value will be stored. This value will be attached to the content and the document dataset itself <code>hash</code> Algorithm <code>String</code> The algorithm of hashing which will be used for document content <code>SHA-256</code> Process annotation contents <code>Boolean</code> If annotations are asked to be migrated, you can filter here to process their content(s) or only their metadata <code>false</code> Scan recursive content <code>Boolean</code> Only convert terminal contents and not container ones <code>false</code> Supported mime-types <code>String list</code> Specify the list of all mime-types of documents which Fast2 will convert Block size <code>Integer</code> In bytes. The default value is 256 * 1024 <code>262144</code> Throw conversion exceptions <code>Boolean</code> If Fast2 performs document conversion, it can either fail silently or pop an error when the action has not been properly completed <code>true</code> Mime-type : Check document before content <code>Boolean</code> You can assume the file extension is accurate, or ask Fast2 to check the content encoding to identify more precisely the document mime-type. By default, Fast2 will check at content level <code>false</code> Existing hash to compare <code>String</code> Document data name to compare the new hash with. Throws TaskException when different Process all contents <code>Boolean</code> Fast2 will either only focus on the first encountered content, or process them all <code>true</code> Document key for hash <code>String</code> Name of the metadata where the hash value will be stored, at document level"},{"location":"catalog/tool/#MailMover","title":"MailMover  - Move email conversation into folder","text":"<p>This task will be useful when your needs will be to move a given email conversation into a dedicated folder. Whether this folder exists or not, Fast2 will be able to retrieve or create it.</p> <p>Mandatory settings</p> Key Type Description Email provider MailBoxProvider The Fast2 module establishing the connection to the email server, from the account of a given user. For more about the configuration of the object, please refer to the appropriate section Destination folder <code>String</code> The folder where the email will eventually be moved to. This value will be resolved by Fast2 prior to the task execution <p>Optional settings</p> Key Type Description Default value mailNotFoundException <code>Boolean</code> Maximum connection TTL <code>Long</code> Fill the value in milliseconds <code>60</code> Data to find <code>String</code> The data to look for. This value will be resolved by Fast2 prior to the task execution <code>${Message-Id}</code> Create destination folder <code>Boolean</code> Ask Fast2 to create the destination folder to move the email into, in case this specific folder does not exist yet <code>false</code> Search field name <code>String</code> The name of the field where to find the data. Only 'Subject' and 'Message-Id' are available <code>Message-Id</code>"},{"location":"catalog/tool/#MimeTypeFinder","title":"MimeTypeFinder  - Find mime-type of documents","text":"<p>This task is used for automatic detection of mime type for documents</p> <p>Optional settings</p> Key Type Description Default value Process annotation contents <code>Boolean</code> If annotations are asked to be migrated, you can filter here to process their content(s) or only their metadata <code>false</code> Scan recursive content <code>Boolean</code> Only convert terminal contents and not container ones <code>false</code> Stop at first exception <code>Boolean</code> Stop processing punnets when one could not been properly processed <code>false</code> Supported mime-types <code>String list</code> Specify the list of all mime-types of documents which Fast2 will convert Use most specific mime type <code>Boolean</code> Otherwise use the first mime type found <code>false</code> Throw conversion exceptions <code>Boolean</code> If Fast2 performs document conversion, it can either fail silently or pop an error when the action has not been properly completed <code>true</code> Default mime type <code>String</code> The default mime-type to set if none has been found. This value must be set, or it will throw a RuntimeException <code>application/octet-stream</code> Mime-type : Check document before content <code>Boolean</code> You can assume the file extension is accurate, or ask Fast2 to check the content encoding to identify more precisely the document mime-type. By default, Fast2 will check at content level <code>false</code> Update document mime type <code>Boolean</code> Otherwise update only page or content mimetype <code>true</code> Force to identify mime type <code>Boolean</code> If the mime type could not be found by looking at the metadata, either Fast2 skips the document or digs deeper into the content to retrieve the mime type <code>false</code> Process all contents <code>Boolean</code> Fast2 will either only focus on the first encountered content, or process them all <code>true</code>"},{"location":"catalog/tool/#MimetypeToExtension","title":"MimetypeToExtension  - Append extension to name","text":"<p>Based on the mime-type of the content, this task will resolve the correct extension to append to the name of the document. Only supported for one content per document</p> <p>Optional settings</p> Key Type Description Default value Document mime-type <code>String</code> This value will be resolved by Fast2, <code>${...}</code> syntax is supported. Use this option when only the document mime-type has been provided, without the actual content. Key of name property <code>String</code> Key of the current name metadata, whose value will be appended by the matching extension. <code>name</code>"},{"location":"catalog/tool/#MoveAnnotationContent","title":"MoveAnnotationContent  - Move the content of any annotation","text":"<p>This task is responsible for moving content of annotations from a given folder into a new one.</p> <p>Mandatory settings</p> Key Type Description Source folder <code>String</code> Absolute path of the folder where to find the annotations to move Destination folder <code>String</code> Absolute path of the folder where to move the annotations"},{"location":"catalog/tool/#MoveContent","title":"MoveContent  - Move or copy the content of a document","text":"<p>This task is responsible for moving content of documents from a given folder into a new one.</p> <p>Mandatory settings</p> Key Type Description Destination folder <code>String</code> The path of the folder where the contents will be moved into <p>Optional settings</p> Key Type Description Default value Copy files <code>Boolean</code> Copy the file to the destination folder instead of moving it <code>false</code> Delete original copy <code>Boolean</code> Delete the file in the source folder when it has been migrated <code>false</code> Process annotation contents <code>Boolean</code> If annotations are asked to be migrated, you can filter here to process their content(s) or only their metadata <code>false</code> Checking interval <code>Integer</code> Time to wait between two checks if target file exists <code>1000</code> Scan recursive content <code>Boolean</code> Only convert terminal contents and not container ones <code>false</code> Exclude file name for renaming file <code>Boolean</code> Renamed the file based on the value of the destination folder only <code>false</code> Wait until target file exists <code>Boolean</code> Only process next document when the current has successfully been migrated <code>false</code> Supported mime-types <code>String list</code> Specify the list of all mime-types of documents which Fast2 will convert Allowed retries <code>Integer</code> Number of checks before despair and exception <code>60</code> Source folder <code>String</code> Set here the common prefix of all document contents to move. If null use file folder Throw conversion exceptions <code>Boolean</code> If Fast2 performs document conversion, it can either fail silently or pop an error when the action has not been properly completed <code>true</code> Mime-type : Check document before content <code>Boolean</code> You can assume the file extension is accurate, or ask Fast2 to check the content encoding to identify more precisely the document mime-type. By default, Fast2 will check at content level <code>false</code> File extension <code>String</code> The extension to append to the name of the files once they'll be moved Keep original filename <code>Boolean</code> Set the destination file name to the 'title' property defined at the content level. Otherwise, keep the name of the file pointed by the URL <code>false</code> Process all contents <code>Boolean</code> Fast2 will either only focus on the first encountered content, or process them all <code>true</code> Files to exclude <code>String list</code> The path of the folder to exclude. Its whole content will remain in place. Leave empty to move all folders children  <p> Ex/  .out, folder/*/exclude</p>"},{"location":"catalog/tool/#MovePunnet","title":"MovePunnet  - Move a punnet from folder to folder","text":"<p>This task is responsible for moving a punnet from an embedded path into a new folder.</p> <p>Mandatory settings</p> Key Type Description Destination path <code>String</code> The path where to move the punnets. This field will be resolved by Fast2 prior to the task execution <p>Optional settings</p> Key Type Description Default value Time between two retries <code>Integer</code> In milliseconds <code>1000</code> Allowed retries <code>Integer</code> Maximum number of retries before throwing an exception when renaming failed <code>10</code> Override existing punnet <code>Boolean</code> If Fast2 finds an already existing punnet, it will override it with the one being processed <code>true</code> Look for path at punnet level <code>Boolean</code> Tells Fast2 to look for the absolute path variable (whose key is 'absolutePath') into the punnet dataset. Otherwise Fast2 will look at the first document dataset level <code>true</code>"},{"location":"catalog/tool/#Noop","title":"Noop  - Blank task performing no operation","text":"<p>This task does not perform anything, hence you don't have to configure it. All documents and punnets will go through it without having their state updated.</p>"},{"location":"catalog/tool/#NuxeoQuery","title":"NuxeoQuery  - Query nuxeo from NXQL","text":"<p>This task only works with JDK-11. If any record matches the input query, the UUID of the Nuxeo items will be added to the F2 document as a new dataset.</p> <p>Mandatory settings</p> Key Type Description Nuxeo connection details <code>NuxeoConnectionProvider</code> Nuxeo query <code>String</code> NXQL query, with double-quotes around values (Ex: SELECT * FROM Document WHERE dc:title = \\\"${nom}\\\" AND ecm:isTrashed = 0)"},{"location":"catalog/tool/#PropertyHelper","title":"PropertyHelper  - FileNet submodule for properties management","text":"<p>Optional settings</p> Key Type Description Default value Blacklist for extraction <code>String list</code> Default blacklist is: <code>ActiveMarkings</code>, <code>AuditedEvents</code>, <code>Annotations</code>, <code>ChildDocuments</code>, <code>ChildRelationships</code>, <code>CmHoldRelationships</code>, <code>CmThumbnails</code>, <code>Containers</code>, <code>CoordinatedTasks</code>, <code>CurrentVersion</code>, <code>DependentDocuments</code>, <code>DestinationDocuments</code>, <code>ExternalReplicaIdentities</code>, <code>ParentDocuments</code>, <code>ParentRelationships</code>, <code>Permissions</code>, <code>ReleasedVersion</code>, <code>StorageArea</code>, <code>StoragePolicy</code>, <code>This</code>, <code>Versions</code>, <code>WorkflowSubscriptions</code> Force user names <code>Boolean</code> Force assigning users (e.g. Creator, LastModifier) when they don't exist in the destination environment <code>true</code> Date format <code>String</code> <code>MM dd HH:mm:ss z yyyy</code> Property name used to explicitly skip Data <code>String</code> Do not throw Date parsing exceptions <code>Boolean</code> Store object-store as name <code>Boolean</code> By default, Fast2 is expecting FileNet UUID as object-store reference on object-typed properties. Enable this option to deal with the object-store name instead of its UUID. This parameter is only use at extraction."},{"location":"catalog/tool/#PunnetSerializer","title":"PunnetSerializer  - From-java-to-XML punnet converter","text":"<p>This task is responsible for serializing a punnet to an XML file. That can be interesting to check punnet metadata or freeze a punnet at a certain state.</p> <p>Optional settings</p> Key Type Description Default value Serialize punnets as JSON <code>Boolean</code> If enabled, punnet will be serialized as Json file. Otherwise, it will be a XML file. <code>false</code>"},{"location":"catalog/tool/#PunnetWriteId","title":"PunnetWriteId  - List all punnet IDs into a file","text":"<p>This task is responsible for writing all punnet IDs into a given text file. Whether the punnet has documents or not, you can keep a trace of all created and encountered punnets.</p> <p>Mandatory settings</p> Key Type Description Output file <code>String</code> The absolute path of the output file where to store all punnet IDs. Specify file name and extension <p>Optional settings</p> Key Type Description Default value OutputStream Append <code>Boolean</code> Create FileOutputStream with this append option Always write punnet ID <code>Boolean</code> Write punnet Id event when it contains no document <code>true</code>"},{"location":"catalog/tool/#ReadContent","title":"ReadContent  - Resolve mime type from content","text":"<p>This task is responsible to find the mime type of a document accross either its metadata or its content.</p> <p>Mandatory settings</p> Key Type Description Mime type retriever MimeTypeFinder Module to find content mime type <p>Optional settings</p> Key Type Description Default value Dry run <code>Boolean</code> Process all punnets without editing their state or metadata <code>false</code> Maximum number of page read per content <code>Integer</code> Only for multi-page content <code>Integer.MAX_VALUE</code> Force to identify mime type <code>Boolean</code> Ask Fast2 to dig deeper into the content to find a mime type. The metadata will be added to the content <code>false</code>"},{"location":"catalog/tool/#SQLMultiQueryTask","title":"SQLMultiQueryTask  - Perform SQL statements between database tables and documents in Fast2","text":"<p>Perform SQL INSERT or UPDATE statements to documents in database, or SELECT from data existing in the database to attach them onto the document dataset.</p> <p>Mandatory settings</p> Key Type Description Query caller SQLQueryColumnCaller This modules is responsible of establishing the connection between Fast2 and the designated database Source attributes <code>String/Pattern map</code> Key: Desired column for where clause; Value: Source Document data to use for query <p>Optional settings</p> Key Type Description Default value Use PreparedStatements <code>Boolean</code> Use PreparedStatements instead of plain SQL statements Target attributes <code>String/Pattern map</code>  set where 'key' refers to the SQL name of the data, and 'value' refers the name of the data in the Fast2 dataset. Reset target data <code>Boolean</code> Clean content when target already exists <code>true</code> SQL column types <code>String/String map</code>  where 'key' is the SQL data name, and 'value' is its type. Supported types are : String, float, int, Date. SQL query <code>String</code> Select precisely data you want to extract through a classic SQL query. All retieved values will be attached to the document dataset based on the data listed in the 'Target attributes' configuration section."},{"location":"catalog/tool/#SingleCallTask","title":"SingleCallTask  - Call a task only once per campaign","text":"<p>This task will be useful to perform a given subtask only once in a map execution. You choose to call this subtask at the very begining of the campaign, or at its very end.</p> <p>Mandatory settings</p> Key Type Description Subtask Task The task to call only once in the campaign execution <p>Optional settings</p> Key Type Description Default value Call at end <code>Boolean</code> Execute the subtask when the first punnet is processed <code>false</code> Call at begining <code>Boolean</code> Execute the subtask when the first punnet is processed <code>false</code>"},{"location":"catalog/tool/#SleepTask","title":"SleepTask  - Blocks punnet on thread for a given period of time","text":"<p>Task blocking a thread per punnet to wait some time before processing the punnet, without updating its state or metadata.</p> <p>Warning</p> <p>As the thread is asleep for a defined time, all tasks are slowed down.</p> <p>Optional settings</p> Key Type Description Default value Sleep time <code>Integer</code> In milliseconds <code>500</code>"},{"location":"catalog/transformer/","title":"Transformation tasks","text":""},{"location":"catalog/transformer/#AlterDocumentContent","title":"AlterDocumentContent  - Create, embed, delete or update document content","text":"<p>Use this task to remove existing content of a processed document, add content to this document based on a dynamically resolved path, of even more.</p> <p>Mandatory settings</p> Key Type Description Content path Pattern The path of the content. Leave this value empty and check 'delete content' to delete the content. This value will be resolved by Fast2 prior to the task execution. Wildcard characters are supported.  <p> Ex/  <code>${absolutePath}/myFile.txt</code><code>**/myFile.txt</code><code>${pattern}/*.txt</code></p> <p>Optional settings</p> Key Type Description Check if file exists <code>Boolean</code> Check if the content referenced by the path is existing and accessible. If not, an exception is thrown. If a wildcard is used as content path, the new content path will be skipped if this option is disabled. Files to exclude <code>String list</code> List here all patterns for files you wish to exclude. One line per match.  <p> Ex/  <code>**/*.xml</code><code>**/folder/to/exclude/</code><code>*.json</code> to ignore all JSON files</p> Add content as annotation <code>Boolean</code> Check this option to add the content as annotation for document. If disabled, the content will be added as regular content to the document. Delete in-place content <code>Boolean</code> Override existing content with the new one, or remove the content attached to the document"},{"location":"catalog/transformer/#AlterDocumentFolder","title":"AlterDocumentFolder  - Change document folders classification","text":"<p>Optional settings</p> Key Type Description Default value Clear existing folders <code>Boolean</code> Delete all existing folders <code>false</code> Create folders <code>Boolean</code> Set the permission to create new folders <code>true</code> Append as child to existing folder <code>Boolean</code> Add as a child of an already existing folder the new folder <code>false</code> Target folder class name Pattern The symbolic name of your new folder, i.e. the path Folder name to create Pattern Leave empty to not create folder Property map <code>String/Pattern map</code> <p> Ex/  targetProperty = ${variableName}</p>"},{"location":"catalog/transformer/#AlterDocumentProperties","title":"AlterDocumentProperties  - Alter multiple document properties","text":"<p>Dive into the punnet to go and modify one or more properties carried by the document</p> <p>Mandatory settings</p> Key Type Description Property map <code>String/Pattern map</code> List of the properties to modify. One line per property  <p> Ex/  targetProperty = documentStringGetter</p>"},{"location":"catalog/transformer/#AlterPunnetProperty","title":"AlterPunnetProperty  - Create or update a punnet metadata","text":"<p>Dive at the punnet level to add (or udpate) one or more properties carried by the punnet itself</p> <p>Mandatory settings</p> Key Type Description Source metadata Pattern This field will be resolved by Fast2 prior to the task execution <p>Optional settings</p> Key Type Description Target property <code>String</code> Name of the porperty to change. If not set or empty, Fast2 will skip the document"},{"location":"catalog/transformer/#ApplyDroolsTask","title":"ApplyDroolsTask  - Rules from Excel file","text":"<p>Apply functional and/or technical rules from an Excel file. Mainly used for mapping properties during complex migrations but can be used for simple data transformations.</p> <p>Mandatory settings</p> Key Type Description Worksheets name <code>String list</code> Apply the content of the mentioned sheet. Take the first sheet if not set Excel file path <code>String</code> Path to the Excel worksheet  <p> Ex/  ../rules/example.xls</p> <p>Optional settings</p> Key Type Description Default value Static cache <code>Boolean</code> Use a static cache for rules file. If false, the Excel file will be refreshed for each campaign <code>true</code> worksheet <code>String</code> Worksheets character encoding <code>String</code> Inform Fast2 of character encoding used by the worksheet <code>Cp1252</code>"},{"location":"catalog/transformer/#CSVKeyValueParser","title":"CSVKeyValueParser  - CSV parser","text":"<p>Parse a CSV content and put parsed values as document data</p> <p>Mandatory settings</p> Key Type Description Document Id property name <code>String</code> Property name where the Id is based on <p>Optional settings</p> Key Type Description Default value Regex to parse each line <code>String</code> The regex used for parsing each document <code>^\\\"?([^\\\"]*)\\\"?;\\\"?([^\\\"]*)\\\"?$</code>"},{"location":"catalog/transformer/#CSVQueryTask","title":"CSVQueryTask  - CSV Mapping: fetch data from a CSV file","text":"<p>Fetch data from CSV using a key and and extra data from the CSV columns.</p> <p>Optional settings</p> Key Type Description Default value Data name to report results <code>String</code> Name of the property where the result status is stored inside the punnet <code>CsvQueryTaskStatus</code> Check result unicity <code>Boolean</code> If it's not, populate first found result <code>false</code> Definition of the CSV to read CsvDescriptor Skip exception <code>Boolean</code> Silent fail instead of throwing exceptions <code>false</code>"},{"location":"catalog/transformer/#ContentURLResolver","title":"ContentURLResolver  - Build absolute URL for content","text":"<p>Simple Content URL renaming task : if target property (a list of string) is set, try to find the first path in this list which exists, converting this path to a fully-defined path including intermediary paths, corresponding documentId, extension, .... Otherwise, use Content URL included in Punnet as a wildcarded path (e.g. C:/input//.xml), and resolve to a fully-defined path.</p> <p>Mandatory settings</p> Key Type Description Source folder <code>String</code> Path of the parent folder, which will be the common part for all target paths in target list <p>Optional settings</p> Key Type Description Default value New mime type <code>String</code> New mime type to set at the end of the new content path Extension to use <code>String</code> Wildcards accepted <code>*</code> Process annotation contents <code>Boolean</code> If annotations are asked to be migrated, you can filter here to process their content(s) or only their metadata <code>false</code> Scan recursive content <code>Boolean</code> Only convert terminal contents and not container ones <code>false</code> Mime type blacklist <code>String</code> Restrict action on content with this mimetype Supported mime-types <code>String list</code> Specify the list of all mime-types of documents which Fast2 will convert List of paths to resolve <code>String list</code> Regex wildcards accepted Throw conversion exceptions <code>Boolean</code> If Fast2 performs document conversion, it can either fail silently or pop an error when the action has not been properly completed <code>true</code> Exception on multi-page content <code>Boolean</code> Ask Fast2 to throw a task exception when running into multi-page contents <code>false</code> Mime-type : Check document before content <code>Boolean</code> You can assume the file extension is accurate, or ask Fast2 to check the content encoding to identify more precisely the document mime-type. By default, Fast2 will check at content level <code>false</code> findMimeType <code>Boolean</code> Process all contents <code>Boolean</code> Fast2 will either only focus on the first encountered content, or process them all <code>true</code>"},{"location":"catalog/transformer/#ConvertAndSaveIS","title":"ConvertAndSaveIS  - Convert FileNet Image Services annotations","text":"<p>This task is used to perform the IS annotation conversion and its save into a target referential</p> <p>Mandatory settings</p> Key Type Description Annotation converter FileNetXFDFAnnotationConverter The FileNet XFDF module used to convert the annotations IS annotation parser ParseISAnnotation Specific module to parse the Image Services annotations <p>Optional settings</p> Key Type Description Default value Status for all annotation converted <code>String</code> Value when all annotation have been converted <code>2</code> Status for some annotations in exception <code>String</code> Value when some annotation are in exception <code>8</code> Property name result <code>String</code> Keep the conversion result <code>AnnotationConversionStatut</code> Skip conversion error <code>Boolean</code> Either Fast2 will throw an exception if an error occured during the conversion, or it will skip to the next annotation <code>false</code> Convert annotation to XFDF <code>Boolean</code> Either Fast2 converts during annotation process, or leave the annotation to its original format <code>true</code> Annotation accessor AnnotationAccessor Choose annotation accessor to save annotations Document layout DPI <code>Float</code> Set here the layout DPI for the document <code>72.0</code> Status for no-conversion annotation <code>String</code> Value when no annotation has been converted <code>9</code>"},{"location":"catalog/transformer/#ConvertDateProperties","title":"ConvertDateProperties  - Convert multiple document/folder date properties","text":"<p>Easily convert date properties from one format to another</p> <p>Mandatory settings</p> Key Type Description Properties names <code>List&lt;String&gt;</code> Names of the properties to convert. One line per property Input date format <code>String</code> Original date format of the properties to convert (Ex: yyyy-MM-dd) Output date format <code>String</code> Desired date format of the properties after conversion (Ex: dd/MM/yyyy) Input locale <code>String</code> Locale of the input date format (Ex: en-US, fr-FR, de-DE) Output locale <code>String</code> Locale of the output date format (Ex: en-GB, es-ES, pt-BR)"},{"location":"catalog/transformer/#DeleteContent","title":"DeleteContent  - Delete local content","text":"<p>Delete the content of your document within your file system. It will retrieve the files targeted by the URL of all the document contents in your punnet</p> <p>Optional settings</p> Key Type Description Default value Delay between two deletion attempt <code>Integer</code> Delay in milliseconds <code>1000</code> File path to delete <code>String</code> Used as prefix to select files to delete. This field can be see as a whitelist of the contents to delete. If empty, all accessible contents will be deleted from the machine. Exception when deletion failed <code>Boolean</code> Thrown an exception if the file has been found but the delete operation failed. <code>true</code> Maximum number of tries for deletion <code>Integer</code> Thrown an exception if the file has not been deleted after this number of tries <code>10</code> Delete content entry <code>Boolean</code> Erase the URL entry from the document, in the punnet. <code>true</code> Exception when file does not exist <code>Boolean</code> Throw an exception if file does not exist. Otherwise, silent fail <code>true</code>"},{"location":"catalog/transformer/#FileNet35ExtraSearchTask","title":"FileNet35ExtraSearchTask  - File Net search","text":"<p>Find your documents inside your File Net 3.5 instance.</p> <p>Optional settings</p> Key Type Description FileNet35ExtraSearchTaskSettings"},{"location":"catalog/transformer/#JSTransform","title":"JSTransform  - JavaScript evaluation task","text":"<p>This task serves the purpose of modifying a punnet based on instructions embedded into a JavaScript snippet. The latter can be either directly pasted as task parameter, or read from a given path. If both these ways are used, the task will only consider the script pasted in.</p> <p>Mandatory settings</p> Key Type Description Script or script file path <code>String</code> Javascript source or path to JavaScript file with preloaded script. Ex: C:/fast2/script.js OR punnet.getDataSet().addData(\\\"data\\\",\\\"String\\\", \\\"value\\\"); <p>Optional settings</p> Key Type Description Default value (Deprecated) Script file path <code>String</code> Path to JavaScript file with preloaded script. Deprecated: use script property instead. Script engine <code>String</code> Script engine to use for the JS execution. Use 'nashorn' for JDK8. Other options are available, such as js, javascript, ecmascript. <code>nashorn</code>"},{"location":"catalog/transformer/#MailDeleter","title":"MailDeleter  - Remove mails","text":"<p>This class allow you to connect to your mail box and select mails to delete. You can search among your mails by term or properties</p> <p>Optional settings</p> Key Type Description Default value Mail connection provider MailBoxProvider Maximum connection ttl <code>Long</code> Time in milliseconds <code>60</code> Search term type <code>String</code> <code>Message-Id</code> Pattern to evaluate property <code>String</code> <code>${Message-Id}</code> Exception when mail not found <code>Boolean</code> Throw an exception when the mail is not found. Otherwise, silent fail <code>true</code> Save message changes <code>Boolean</code> <code>true</code>"},{"location":"catalog/transformer/#RenameDocumentProperties","title":"RenameDocumentProperties  - Rename multiple document properties","text":"<p>Dive into the punnet to rename one or more properties carried by the document.</p> <p>Mandatory settings</p> Key Type Description Property map <code>String/String map</code> List of the properties to rename. One line per property  <p> Ex/  targetProperty = documentStringGetter</p> <p>Optional settings</p> Key Type Description Default value Exception when property rename conflict <code>Boolean</code> Throws an exception if the target property exists, otherwise fails silently <code>true</code>"},{"location":"catalog/transformer/#UpdateSharedObject","title":"UpdateSharedObject  - Update a shared object value from its name","text":"<p>Use this task to change a system-wide configuration setting at runtime. Mainly used for dynamic campaign variables built as a shared object in Fast2. Be careful: only works with shared object set with Global scope</p> <p>Mandatory settings</p> Key Type Description Shared object new value <code>String</code> Can be almost any type of variable (String, int...) except object and tasks of the Fast2 catalog. You can also access to any custom document data value from the pattern using ${variableName}. Already known variables : base, campaign, taskFlowMap, step, punnetTraceId, punnetId and documentId. Shared object name to update <code>String</code> Name of the object to update. The shared object will be automatically created if does not already exists. <p>Optional settings</p> Key Type Description Default value Number of executions <code>Integer</code> Means the number of executions per campaign <code>1</code>"},{"location":"catalog/transformer/#XSLTransform","title":"XSLTransform  - Apply a XSL transformation on XML Punnets","text":"<p>With pretty much straight-forward task you can fine-tune any punnet or document metadata, or even the content targetted by the migration. Build your custom XSL file, and ask Fast2 to apply the changes onto the migration-related data</p> <p>Mandatory settings</p> Key Type Description XSL file path <code>String</code> Specify here the absolute path of the XSL file, as well as the name and the extension of the file. This file can be located on a separate machine <p>Optional settings</p> Key Type Description XSL Stylesheet content <code>String</code> Enter here your xsl:stylesheet content"},{"location":"components/","title":"Components","text":"<p>Here's a quick intro explaining the purpose and role of the four main components in Fast2 :</p> Broker <p>The Broker in Fast2 serves as the migration orchestrator, managing the entire document migration process. It delegates unit tasks to the embedded worker or additional workers for scalability. By coordinating the workflow, the Broker ensures efficient and reliable migration operations.</p> Worker(s) <p>The workers in Fast2 are responsible for executing the delegated migration tasks. They handle the actual processing of documents, applying transformations, conversions, and other necessary operations. Additional workers can be added to distribute the workload, enhancing performance and enabling scalability.</p> Database <p>Fast2 utilizes a NoSQL database to store all migration-related information. This database ensures crash-proof functionality, as well as providing traceability and persistence throughout the migration process. By storing the data in a structured manner, the database facilitates efficient retrieval and management of migration artifacts.</p> Dashboards <p>Fast2 offers a powerful dashboards feature that provides users with comprehensive visualizations and graphs. These dashboards give an overview of the overall migration progress, even when dealing with large-scale migrations encompassing millions of documents. Users can monitor key metrics, track performance, and gain valuable insights into the migration status, facilitating effective decision-making.</p> <p>With the combined functionality of the Broker, Worker(s), Database, and Dashboards, Fast2 offers a robust and scalable platform for streamlined document migration, ensuring a smooth and efficient migration experience.</p>"},{"location":"components/broker/","title":"The broker","text":"<p>Hint</p> <p>The broker is the workflow orchestrator, in charge of database communication, sending punnets to the worker(s) for them to process the operations.</p>"},{"location":"components/broker/#configure-the-broker","title":"Configure the broker","text":"<p>Depending on the amount of documents you are dealing with, you may want to control max memory usage allowed (Xmx) for broker.</p> <p>By default, only 1GB is allocated for this resource :</p> /config/env.properties<pre><code>...\n# Broker Maximum memory allowed (Xmx)\nBROKER_MAX_MEMORY=1G\n</code></pre> <p>If the campaign are involving a couple of millions of documents, increasing this value to 8GB or 16GB will definitely help increasing the performance rate of the migration.</p> <p></p>"},{"location":"components/broker/#configure-the-ui-port","title":"Configure the UI port","text":"<p>The UI port is also subject to configuration.</p> <p>Fast2 application run on the 1789 port by default. To change this, add or update the parameters below:</p> /config/application.properties<pre><code>...\n# Remote broker port to use by the worker\n# broker.port=1789\nserver.port=1789\n</code></pre>"},{"location":"components/dashboards/","title":"Dashboards","text":"<p>Since Fast2 stores every single byte of migration information into its internal database, using dashboard capabilities for intelligible and functional reports just comes in naturally.</p> <p>Warning</p> <p>Prior to the v2.5, Fast2 was relying on Kibana for data vizualisation. This component has been dropped in favor of OpenSearch dashboards.</p> <p>However the configuration of these tools are very close (if not identical).</p> <p>The dashboard only communicates with the database (as illustrated in the architecture section).</p> <p>All the chart visualizations which can be built up with this add-on and integrated to the most advanced dashboards, solely serve one purpose: data digestion for tracking progress, by making now possible to follow edge-cases of a handful of documents lost in a week-long non-stopping flood, and building reports out of it.</p>"},{"location":"components/dashboards/#configure-the-dashboards","title":"Configure the dashboards","text":"<p>Fast2 does not embed any dashboard by default. However, you can get the add-on through the same portal you downloaded the Fast2 binaries. Unzip the package at the root of Fast2 installation folder.</p> <p>This hierarchy will make Fast2 automatically start your dashboard.</p>"},{"location":"components/dashboards/#with-or-without","title":"With or without","text":"<p>When Fast2 is booted up, it will by default look for the dashboard folder at the root of the installation folder. If they are unzipped in the right location, they will be started after the broker triggered the database startup.</p> <p>In case no dashboard folder is found, this step will be skipped after a given number of retries (which you can find the in the <code>./config/application.properties</code> file).</p> <p>The dashboards can still be disabled, even if they are available in the root folder of Fast2:</p> v2.4-v2.6+ ./config/application.properties<pre><code>broker.kibana.embedded.enabled=true\n</code></pre> ./config/application.properties<pre><code>broker.dashboards.embedded.enabled=true\n</code></pre>"},{"location":"components/dashboards/#ports","title":"Ports","text":"<p>By default, the dashboards are serve from the port 1791.</p> <p>However they can be accessed on a different port, which you will have to highlight in 2 different places:</p> <ol> <li> <p>This is required to start the add-on on another port:</p> v2.4-v2.6+ ./config/application.properties<pre><code>broker.kibana.embedded.port=8888\n</code></pre> ./config/application.properties<pre><code>broker.dashboards.embedded.port=8888\n</code></pre> </li> <li> <p>Fast2 should know where to send the user for the visualizations:</p> v2.4-v2.6+ ./kibana-X.Y.Z/config/kibana.yml<pre><code>server.port=8888\n</code></pre> ./opensearch-dashboards-X.Y.Z/config/opensearch_dashboards.yml<pre><code>server.port=8888\n</code></pre> </li> </ol>"},{"location":"components/dashboards/#remote-access-to-the-dashboards","title":"Remote access to the dashboards","text":"<p>If this port needs to be exposed and accessible from a different machine, the dashboard configuration must be configured to allow connections from remote users:</p> ./opensearch-dashboards-X.Y.Z/config/opensearch_dashboards.yml<pre><code>server.host: \"0.0.0.0\"\n</code></pre>"},{"location":"components/dashboards/#what-if-the-database-port-is-changed","title":"What if the database port is changed ?","text":"<p>To make sure the dashboards still reach the database, make sure the port is still up-to-date in the dashboards config file :</p> ./opensearch-dashboards-X.Y.Z/config/opensearch_dashboards.yml<pre><code>opensearch.hosts: [\"http://localhost:1790\"]\n</code></pre>"},{"location":"components/dashboards/#advanced-use","title":"Advanced use","text":""},{"location":"components/dashboards/#create-the-index-pattern","title":"Create the index pattern","text":"<p>The visualizations created from the dashboards add-on needs to be attached to the <code>f2_*</code> index. If this index pattern is not existing, create it via the add-on management tools:</p> <ol> <li>Stack management &gt; Index pattern </li> <li>Create a new index </li> <li>Set time filter to none</li> </ol> <p>Warning</p> <p>Make sure to set the time filter to \"I don't want to use the time filter\" to prevent any issue when trying to pull the data out from the database.</p> <p>Note</p> <p>If the metadata you are looking for is not available and cannot be found in the dropdown options, refresh the <code>f2_*</code> index (which can be manually triggered from the list of saved objects).</p> <p>The dashboards add-on provided with Fast2 is the go-to tool for migration report, project advancement insights, and deeper data analysis.</p> <p>However data manipulations in this tool are not always intuitive nor straight forward, although they do open new dimensions regarding in-depth studies by the compound aggregation, data conversion and other operations now at the tips of your fingers.</p> <p>Several use-cases can be envisioned, we will only relate here the data conversion steps to go through given the widespread necessity of such a basic task.</p>"},{"location":"components/dashboards/#how-to-import","title":"Imports objects into the dashboards feature","text":"<p>This section will guide you through the import process of resources (such as indices, visualization as <code>.ndjson</code> files and others).</p> <p>This resource can be imported into your dashboard add-on from the right-side menu &gt; \"Stack management\" &gt; \"Saved objects\" &gt; \"Import\"</p> <p>as shown on the screen-capture below :</p> <p></p>"},{"location":"components/dashboards/#visualisation-exception-table","title":"Resource #1 : Exception table","text":"<p>Info</p> <p>This resource has been generated from OpenSearch dashboards but can be imported into either Kibana and OpenSearch dashboards.</p> <p>For a list of exceptions, since the error messages and steps in error are tracked in the database but not attached to the punnet itself, it is possible to rely on the dashboards add-on to generate a table of exceptions, accross multiple campaigns. With all the punnet details required for both investigations and error resolution, but for delta migrations afterwards, this table can be exported in CSV for externalisation of this asset.</p> <p>Here is an example of a table gathering :</p> <ul> <li>Campaign: campaign where the exception is thrown</li> <li>PunnetId: ID of the punnet</li> <li>documentId: ID of the document (useful when the punnets store several documents)</li> <li>Document name</li> <li>Step where the exception occured</li> <li>Exception class</li> <li>Exception message</li> <li>Content URL (if any)</li> <li>Count of the number of documents in the punnet</li> </ul> <p></p> <p>To get started with this visualisation, or to add it to your existing dashboard, click down below :</p> <p> Download this resource</p> <p>This resources can be imported as explained previously.  </p>"},{"location":"components/dashboards/#visualisation-campaign-ration","title":"Resource #2 : Campaign success ratio","text":"<p>Info</p> <p>This resource has been generated from OpenSearch dashboards but can be imported into either Kibana and OpenSearch dashboards.</p> <p>For a graph visualization of the success ratio per map/campaign, the following resource can be imported for a per-day granularity of the results, where exceptions are summed up (no task differenciation), for comparison with the successfully processed documents within this same campaign.</p> <p></p> <p>To get started with this visualisation, or to add it to your existing dashboard, click down below :</p> <p> Download this visualization</p> <p>This resources can be imported as explained previously.  </p>"},{"location":"components/dashboards/#visualisation-processing-speed","title":"Resource #3 : Processing speed per task","text":"<p>Info</p> <p>This resource has been generated from OpenSearch dashboards but can be imported into either Kibana and OpenSearch dashboards.</p> <p>For a graph visualization of the success ratio per map/campaign, the following resource can be imported for a per-day granularity of the results, where exceptions are summed up (no task differenciation), for comparison with the successfully processed documents within this same campaign.</p> <p></p> <p>To get started with this visualisation, or to add it to your existing dashboard, click down below :</p> <p> Download this visualization</p> <p>This resources can be imported as explained previously.  </p>"},{"location":"components/dashboards/#advanced-filtering-capabilities","title":"Advanced filtering capabilities","text":"<p>Since the visualisations can pull out vast amounts of data from the database, most of the results might need to be narrowed down using the filter function :</p> <p></p> <p>Head out to the matching documentation (Kibana or OpenSearch dashboards) for basic rules and help on how to build such filter.</p> <p>We will here just focus on one main filter, which would help to only get the relevant data for either a ratio or datatable of success or failure along the migration.</p> <p>Our need is to only the the documents/punnets, whose status are <code>ProcessedException</code> (to gather all failed documents, no matter the task where the exception got thrown) or the documents/punnets being both <code>ProcessedOK</code> from the injection task (which will be called here: Last task).</p> <p>In short, we only want to select :</p> <ul> <li>the OK's of the injector, which induces the success of the migration for this document</li> <li>the KO's of all the tasks</li> </ul> <p>Code-wise, since our expression would looks like this :</p> <pre><code>status == KO || (status == OK &amp;&amp; step == \"Last task\");\n</code></pre> <p>Since</p> <ul> <li><code>||</code> is should</li> <li><code>&amp;&amp;</code> is must</li> </ul> <p>the final syntax is (for DSL -- Dashboards Query Language -- or KQL -- Kibana query language) :</p> <pre><code>{\n  \"query\": {\n    \"bool\": {\n      \"should\": [\n        {\n          \"term\": { \"status.keyword\": \"ProcessedException\" }\n        },\n        {\n          \"bool\": {\n            \"must\": [\n              { \"term\": { \"status.keyword\": \"ProcessedOK\" } },\n              { \"term\": { \"stepName.keyword\": \"Last task\" } }\n            ]\n          }\n        }\n      ]\n    }\n  }\n}\n</code></pre> <p>This code is to be used in the filter function, as advanced filter (instead of the default fields-prepared option).</p> <p></p> <p></p> <p>The dashboards add-on provided with Fast2 is the go-to tool for migration report, project advancement insights, and deeper data analysis.</p> <p>However data manipulations in this tool are not always intuitive nor straight forward, although they do open new dimensions regarding in-depth studies by the compound aggregation, data conversion and other operations now at the tips of your fingers.</p> <p>Several use-cases can be envisioned, we will only relate here the data conversion steps to go through given the widespread necessity of such a basic task.</p>"},{"location":"components/dashboards/#datatype-conversions","title":"Datatype conversions","text":"<p>Let\u2019s consider a metadata processed by Fast2 as a String instead of a float. One frequent use-case could be reporting the sum of all content size processed during a campaign. Adding up String values never ended up well so far, Kibana will have to parse these values beforehand, to have the user access the newly created value with the correct type.</p> <p>We will base our example on the following punnet structure:</p> punnet.xml<pre><code>&lt;?xml version='1.0' encoding='UTF-8'?&gt;\n&lt;ns:punnet xmlns:ns=\"http://www.arondor.com/xml/document\" punnetId=\"FileNetSource#page_0#pageIndex_0\"&gt;\n    &lt;ns:documentset&gt;\n        &lt;ns:document documentId=\"{1B62F7C4-8E75-4D99-B84C-0AAD14B13A4E}\"&gt;\n            &lt;ns:contentset&gt;\n                &lt;ns:content mimeType=\"application/pdf\"&gt;\n                    &lt;ns:url&gt;path/to/file/content&lt;/ns:url&gt;\n                &lt;/ns:content&gt;\n            &lt;/ns:contentset&gt;\n            &lt;ns:dataset&gt;\n                &lt;ns:data name=\"MimeType\" type=\"String\"&gt;\n                    &lt;ns:value&gt;application/pdf&lt;/ns:value&gt;\n                &lt;/ns:data&gt;\n                &lt;ns:data name=\"ContentSize\" type=\"String\"&gt;\n                    &lt;ns:value&gt;43315.0&lt;/ns:value&gt;\n                &lt;/ns:data&gt;\n                &lt;ns:data name=\"name\" type=\"String\"&gt;\n                    &lt;ns:value&gt;file_name&lt;/ns:value&gt;\n                &lt;/ns:data&gt;\n                ...\n            &lt;/ns:dataset&gt;\n            &lt;ns:folderset /&gt;\n            &lt;ns:annotationset /&gt;\n        &lt;/ns:document&gt;\n    &lt;/ns:documentset&gt;\n    &lt;folderSet /&gt;\n&lt;/ns:punnet&gt;\n</code></pre> <p>Here, the data type of the ContentSize property is <code>String</code>, as the type attribute states. Our job will be to parse this <code>String</code> value to <code>Float</code>, since we have a decimal.</p> <p>This operation happens in 2 steps:</p> <ol> <li>Making the original field (with the wrong type) accessible from a script,</li> <li>Writing the correct parsing script.</li> </ol> <p></p>"},{"location":"components/dashboards/#step-1-making-the-field-accessible","title":"Step 1: Making the field accessible","text":"<p>Open the dashboards retrieving data from the database where Fast2 is sending the data.</p> <p>Access the Dev Tools of the dashboards to execute the query, which has to be built a specific way in order to change the mapping of the field to convert.</p> <p>The index prefix of Fast2 data is <code>f2_</code>, which is why the request has to specify the index to apply the <code>PUT</code> operation on.</p> <p>Next you have to write in the request body the whole way to the property to convert, first by accessing the punnet, then the properties of the punnet where the documents are stored, then the properties of the documents object where the metadata are stored, and so on.</p> <p>Finally specify the current type (<code>text</code> in our case), with <code>fielddata:true</code>.</p> <p>The final query will look like such:</p> <pre><code>PUT f2_*/_mapping\n{\n  \"properties\": {\n    \"punnet\": {\n      \"properties\": {\n        \"documents\": {\n          \"properties\": {\n            \"data\": {\n              \"properties\": {\n                \"ContentSize\": {\n                  \"type\": \"text\",\n                  \"fielddata\": true\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre> <p>The query is successfully executed once the <code>acknowledged:true</code> message is returned.</p> <p></p>"},{"location":"components/dashboards/#step-2-the-parsing-script","title":"Step 2: The parsing script","text":"<p>Head now to the Dashboads Management section, choose \u2018Index patterns\u2019, and select the one related to Fast2 (<code>f2_*</code>).</p> <p>Hint</p> <p>You may require to refresh the <code>f2_*</code> index, to make sure all the latest properties are fetched from the database.</p> <p>Click on the \"Scripted field\" tab to create a new one using the data property you just made accessible.</p> <p>Enter a relevant name (ex/ ContentSize-float), select the new type of this field (<code>number</code>, for our example), and write the following script:</p> <pre><code>if (doc.containsKey(\"punnet.documents.data.ContentSize\"))\n  return Float.parseFloat(doc[\"punnet.documents.data.ContentSize\"].value);\nelse return -1;\n</code></pre> <p>Save this new field, and create a new visualization displaying a sum of this data per campaign (as this was our initial challenge).</p> <p>In the sum section, our field is now reachable for any chart requiring numerical data.</p> <p>The <code>String</code> data is now accessible as a numerical chart field !! </p> <p>And that\u2019s it !</p> <p>More use cases can be addressed by scripts with higher level of complexity, to create new data, digest or sort data, you name it.</p> <p>This new dimension of data analysis via Kibana opens up way more possibilities, while increasing the precision of data aggregation to bring the best answers to the project management team.</p> <p></p>"},{"location":"components/dashboards/#troubleshooting","title":"Troubleshooting","text":""},{"location":"components/dashboards/#cannot-reach-db","title":"Dashboards do not reach the database","text":"<p>Make sure the database port has been correctly configured in the YAML file of the dashboards. Head to the port section for more details.</p>"},{"location":"components/dashboards/#port-not-showing","title":"Could not ping dashboard on port 1791","text":"<p>Make sure declaring your port in the 2 expected places. Head to the port section for more details.</p>"},{"location":"components/dashboards/#connection-refused","title":"Connection refused when accessing the dashboards port","text":"<p>In case you cannot reach the dashboards UI remotely, you might want to check several things :</p> <ul> <li>make sure the dashboards are started, from the Fast2 server (Node process running on the port declared in the <code>./opensearch-dashboards-X.Y.Z/config/opensearch_dashboards.yml</code>)</li> <li>make sure you have accessing the same port from your remote machine</li> <li>check with your IT team to make sure the network securities are allowing outbound rules for this port (as they might have done for the Fast2UI port)</li> <li>make sure you updated the dashboards <code>server.host</code> configuration (check this section for more details)</li> </ul> <p></p>"},{"location":"components/dashboards/#faq","title":"FAQ","text":""},{"location":"components/dashboards/#run-fast2-without-dashboards","title":"Run Fast2 without dashboards","text":"<p>It is possible to run Fast2 without the dashboards, as this add-on is just reading data stored in the internal database, to serve them as graphical vizualisation.</p> <p>By no mean this add-on is necessary for the migration.</p>"},{"location":"components/dashboards/#access-dashboard-when-not-migrating","title":"Access dashboard when not migrating","text":"<p>Visualizations can be reached via 2 different ways, depending on your needs:</p> <ul> <li>Either from the UI of Fast2,</li> <li>Or directly from the browser via the declared port (1791 or other).</li> </ul> <p>The latter option gives access to the tool even when Fast2 is not running.</p> <p>Since the dashboards fetch data directly from the database, it is not possible to populate the visualizations with migration data if the database is not running as well.</p>"},{"location":"components/dashboards/#cannot-reach-db","title":"Dashboards do not reach the database","text":"<p>Make sure the database port has been correctly configured in the YAML file of the dashboards. Head to the port section for more details.</p>"},{"location":"components/dashboards/#port-not-showing","title":"Could not ping dashboard on port 1791","text":"<p>Make sure declaring your port in the 2 expected places. Head to the port section for more details.</p>"},{"location":"components/database/","title":"Internal database","text":"<p>Warning</p> <p>Prior to the v2.5, Fast2 was relying on an Elasticsearch database. This component has been dropped in favor of OpenSearch.</p> <p>However the configuration of these two databases are very close (if not identical).</p> <p>Every object passing through Fast2 is stored into an internal database. Whether carried by the document or the punnet, all metadata are recorded in the warehouse. The major benefit of such architecture is the opportunity to check whether everything is going well by making counters about documents/data processed during your migrations.</p> <p>In addition, we can easily rollback or resume operations in case of server crash. Nothing will be lost as Fast2 will precisely know where it all stopped.</p> <p>There is the logic behind real-time backups in ES.</p>"},{"location":"components/database/#indexes","title":"Indexes","text":"<p>Each database index referenced by Fast2 will be registered with a <code>f2_</code> prefix. An index is always written in lower case even if the campaign name in Fast2 contains characters in upper cases.</p> <p>For example, the campaign <code>MyCampaign_Try10</code> will be stored in the index f2_mycampaign_try15.</p> <p>During the step of broker intantiation at Fast2 startup, some indices are automatically created:</p> Index key Description f2_campaigns List of existing campaigns with processing dates and status f2_campaigns_sources Links between campaigns and workers having performed this campaign f2_queue_settings Reference information about source and task threads f2_jobs_settings Gather the configuration of save jobs f2_jobs_info Information about jobs past execution details <p>For each new campaign of Fast2, an index will be created: if you decided to run a new campaign named <code>EcmInjection</code>, the new index will be <code>f2_ecminjection_try1</code>.</p>"},{"location":"components/database/#configuration","title":"Configuration","text":""},{"location":"components/database/#with-or-without","title":"With or without","text":"<p>For an optimal migration setup, this third-party software can be easily configured at different levels to match you needs at most ! If required, it can even be disabled at will.</p> v2.4-v2.5+ ./config/applications.properties<pre><code>broker.elasticsearch.embedded.enabled=true\n</code></pre> ./config/applications.properties<pre><code>broker.opensearch.embedded.enabled=true\n</code></pre>"},{"location":"components/database/#port","title":"Port","text":"<p>By default, Fast2 sends it data via the embedded database API made available on port <code>1790</code>.</p> <p>However, in the case where this port is already used by either another Fast2 instance or any other process, the port number can be changed from the configuration files.</p> <p>Since the embedded database has to be reach from both Fast2 broker and Kibana module \u2014 if the latter is enabled \u2014 there is exactly 3 places where to mention this change:</p> v2.4-v2.5+ File Specification ./config/application.properties <code>opensearch.port=1790</code> ./elasticsearch-X.Y.Z/config/elasticsearch.yml <code>http.port: &lt;es-port&gt;</code> ./kibana-X.Y.Z/config/kibana.yml <code>elasticsearch.hosts: [\"http://localhost:&lt;es-port&gt;\"]</code> File Specification ./config/application.properties <code>opensearch.port=1790</code> ./opensearch-X.Y.Z/config/opensearch.yml <code>http.port: &lt;es-port&gt;</code> ./opensearch-dashboards-X.Y.Z/config/opensearch_dashboards.yml <code>opensearch.hosts: [\"http://localhost:&lt;es-port&gt;\"]</code> <p>If the dashboard component is installed, the database port also needs to be updated on this front as the dashboard needs to access the DB in order to read the data :</p> v2.4-v2.6+ ./kibana-X.Y.Z/config/kibana.yml<pre><code>elasticsearch.hosts: [\"http://&lt;DB-server:DB-port&gt;\"]\n</code></pre> ./opensearch-dashboards-X.Y.Z/config/opensearch_dashboards.yml<pre><code>opensearch.hosts: [\"http://&lt;DB-server:DB-port&gt;\"]\n</code></pre> <p></p>"},{"location":"components/database/#memory","title":"Memory","text":"<p>The more documents, the more data. The more data, the more the database will need resources to digest, store, process data and respond to the broker.</p> <p>Head out to the <code>./opensearch-X.Y.Z/config/jvm.options</code> file.</p> <p>The configuration required are the following:</p> Configuration Purpose <code>-Xms8g</code> This setting will allocate 8GB of RAM to the database JVM heap, directly on startup. <code>-Xmx8g</code> Here, you specify the maximum memory which can be used, if available, by the database. <p>Warning</p> <p>As specified in the <code>./opensearch-X.Y.Z/config/jvm.options</code> file, you should always set the min and max JVM heap size to the same value. See the Official OpenSearch documentation for more information.</p> <p>For further comprehension of these parameters, check out the Elasticsearch official documentation on the topic or OpenSearch official documenation. Upgrading the metrics will prevent <code>java.lang.OutOfMemoryError</code> to pop up during heavy migration executions.</p> <p></p>"},{"location":"components/database/#remote-access-to-the-database","title":"Remote access to the database","text":"<p>The next operations need to happen when the database is shut down. To make sure of that, the <code>jcmd</code> command might be of great help.</p> <p>Warning</p> <pre><code>The database port needs to be opened from the Fast2 server, and accessible by your remote machine.\n</code></pre> <ol> <li> <p>To check the database port is accessible from your machine, run the following command (from your work station):</p> <pre><code>curl &lt;fast2.server&gt;:&lt;database-port&gt;\n</code></pre> </li> <li> <p>Head out to the database configuration YAML file <code>opensearch.yml</code> and add the following lines:</p> <pre><code>network.host: 0.0.0.0\nnode.name: node-1\ncluster.initial_master_nodes: node-1\n</code></pre> </li> <li> <p>If Fast2 is installed on a Linux server, you may also need to increase the memory usage for your cluster (on the server where the database is running), as stipulated in the Official OpenSearch documentation.</p> /etc/sysctl.conf<pre><code># for remote access to Fast2 embedded database\nvm.max_map_count=262144\n</code></pre> </li> <li> <p>Save the file, and run the following command to refresh your server configuration :</p> <pre><code>sudo sysctl -p\n</code></pre> </li> <li> <p>Restart the broker (which will induce the bootup of the database), and go check from your machine the access to the Fast2 database.</p> <p>The webpage (at the same URL we <code>curl</code>-ed in the 1st step) should display something like so :</p> <p></p> </li> </ol> <p></p> <p></p>"},{"location":"components/database/#troubleshooting","title":"Troubleshooting","text":"<p>In reason of the tight commmunication between the broker and the database, chances are you will soon be reported 500 server error generated by unsuccessful exchanges of the two entities.</p>"},{"location":"components/database/#server-error-500-when-starting-a-campaign","title":"Server error 500 when starting a campaign","text":"<p>After running quite a bunch of campaigns, you might end up not being able to start anymore of them due to the limit of shards of the embedded database (for more in-depth details about the shards, checkout the Official Elasticsearch documentation).</p> <p>The symptom of this limitations comes as a regular 500 server error toast in the UI, but is is by checking the logs/broker.log file that its raw nature is exposed:</p> <pre><code>17:24:45.017 [http-nio-1789-exec-17] ERROR org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/]:175 - Exception while dispatching incoming RPC call com.google.gwt.user.server.rpc.UnexpectedException: Service method 'public abstract com.fast2.model.taskflow.Campaign com.fast2.hmi.gwt.client.service.GWTCampaignManager.startProcessing(\n    com.fast2.model.taskflow.Campaign,com.fast2.model.taskflow.design.TaskFlowMapRef,boolean)' threw an unexpected exception:\n    java.lang.RuntimeException: Caught exception OpenSearch exception [type=validation_exception, reason=Validation Failed: 1: this action would add [2] total shards, but this cluster currently has [1000]/[1000] maximum shards open;]\n    ...\nCaused by: org.opensearch.OpenSearchStatusException: OpenSearch exception [type=validation_exception, reason=Validation Failed: 1: this action would add [2] total shards, but this cluster currently has [1000]/[1000] maximum shards open;]\n</code></pre> <p>As mentioned in the database technicalities, Fast2 records data under indices prefixed with <code>f2_</code>. Thus it implies to begin each index to delete with this prefix.</p> <p>Although a drastic cleanup induced by a <code>curl -X DELETE -i \"http://&lt;database-server&gt;:&lt;database-port&gt;/f2_*</code> would resolve our issue, you might be interested in keeping some campaigns or indices. As any curl query allows, exceptions can be added to the deletion operation to prevent them from being removed of the backup database. The syntax goes as follows:</p> <pre><code>curl -X DELETE -i \"http://&lt;Fast2-server&gt;:&lt;database-port&gt;/f2_*,-f2_campaigns,-f2_campaigns_sources[,-f2_&lt;campaign-name&gt;]\"\n</code></pre> <p>  Let us now study this query:  </p> Section Purpose http://server:port/f2_* Here we ask to aim at all indices starting with the <code>f2_</code> prefix. This will prevent the deletion of additional indices which could be related to parallel work on the same database instance, such as Kibana reports, charts or data analysis. <code>-f2_campaigns,-f2_campaigns_sources</code> These 2 indices are needed if you decide to keep any other campaign. The <code>-</code> sign declares them as exception from the delete action. <code>[,-f2_&lt;campaign-name&gt;]</code> Then you can list all the campaigns you are willing to preserve, <ul><li>without space,</li><li>separated by commas (<code>,</code>)</li><li>mentioning the <code>-</code> exclusion character</li></ul>Do not forget to begin each name with the indice prefix. <p></p> <p>Wildcards are supported, therefore an exception written <code>-f2_mycampaign*</code> will protect all the campaign with this myCampaign radical (ex/ myCampaign_Try1, myCampaign_Try2...).</p>"},{"location":"components/database/#impossible-to-get-results-from-explorer-place","title":"Impossible to get results from Explorer place","text":"<p>Documents concerned by a migration can quickly add up, especially on cumulative campaigns. When heading to the Explorer to check punnets results, you may end up with too much information to retrieve from the database. An \"error 500\" message will then pop up, and if yu head out to the broker.log, the following stack will be found:</p> <pre><code>Suppressed: org.opensearch.client.ResponseException: method [POST], host [http://localhost:1790], URI [/f2_campaign_try1/_search?pre_filter_shard_size=...], status line [HTTP/1.1 503 Service Unavailable]\n{\"error\":{\"root_cause\":[{\"type\":\"too_many_buckets_exception\",\"reason\":\"Trying to create too many buckets. Must be less than or equal to: [10000] but was [10001]. This limit can be set by changing the [search.max_buckets] cluster level setting.\",\"max_buckets\":10000}],\"type\":\"search_phase_execution_exception\",\"reason\":\"all shards failed\",\"phase\":\"query\",\"grouped\":true,\"failed_shards\":[{\"shard\":0,\"index\":\"f2_stg-100k_try1\",\"node\":\"4XM6VD2wTfeOSpr2brIs7g\",\"reason\":{\"type\":\"too_many_buckets_exception\",\"reason\":\"Trying to create too many buckets. Must be less than or equal to: [10000] but was [10001]. This limit can be set by changing the [search.max_buckets] cluster level setting.\",\"max_buckets\":10000}}]},\"status\":503}\n</code></pre> <p>To fix this, you need to stop Fast2 (and the database), and add the following line:</p> ./opensearch-X.Y.Z/config/opensearch.yml<pre><code>search.max_buckets: 1000000\n</code></pre>"},{"location":"components/database/#lets-quickly-wrap-up-here","title":"Let's quickly wrap up, here","text":"<p>This integrated database guarantees data persistence to Fast2. If required, an embedded database can be shared among several Fast2 servers.</p> <p> Allocated resources should be increased in order to resist charge of production environments.</p>"},{"location":"components/worker/","title":"The worker","text":"<p>Hint</p> <p>The Worker is the punnet processor, applying the changes onto the punnet, according to how the tasks have been configured by the user.</p> <p>The workers! Corner stones of Fast2, these guys can litterally add up and constitute a real digitized hive working to migrate your documents, your contents, your rules, your metadata, all synchronously, exactly where you expect them (or asked them to be), never stepping on each other. No migration project could be overcome if it was not by them!</p> <p>If their role can seem quite important, they are paradoxically as easy and straight forward to get up and running. Just the right files to gather, as mentioned here, and a new worker just enrolled!</p> <p>One of the major aspects of a promising migration project is what all project managers will ask you to vouch for: performance metrics. Let\u2019s suppose you need to migrate documents from a source system into a second one, the latter having a much higher input flow tolerance. No need for empirical statistics to know that the old ECM will be the bottleneck. An architecture similar to a hybrid deployment variant (topic we presented here) could easily be envisioned. But let\u2019s complicate things a little bit here: in-between the extraction and the injection phase, the metadata have to be updated, with new date formatting and heavy mapping of document related properties. Can still a hybrid-like architecture save you now ?</p>"},{"location":"components/worker/#configure-the-workers","title":"Configure the worker(s)","text":"<p>The required files for the worker to run properly are the following:</p> Item Purpose  config/* Configuration files, broker endpoint etc  worker-libs/* All libraries and dependencies for tasks executions  fast2-worker-package-X.Y.Z.jar Worker main unit  startup-worker.bat Binary file for Windows  startup-worker.sh Binary file for Linux"},{"location":"components/worker/#change-jdk","title":"Change JDK","text":"<p>If you want to use a different jdk version than the one referenced in JAVA_HOME environment variable, you can update the <code>JAVA_HOME</code> value in <code>./config/env.properties</code>:</p> ./config/env.properties<pre><code>...\n# Override JAVA_HOME environment variable\nJAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64\n</code></pre>"},{"location":"components/worker/#memory-allocation","title":"Memory allocation","text":"<p>Depending on the amount of documents and the number of tasks you are dealing with, you may want to control max memory usage allowed (<code>Xmx</code>) for worker.</p> <p>The default setting is 1GB for this resource:</p> ./config/env.properties<pre><code>...\n# Worker Maximum memory allowed (Xmx)\nWORKER_MAX_MEMORY=1G\n</code></pre> <p>Keep in mind that this property is designed for workers started from the binary <code>start-worker.sh|.bat</code>. If you intend to target the embedded worker, go to <code>./config/application.properties</code> instead:</p> <pre><code>...\n# Broker embedded worker max memory\nbroker.embeddedworker.max.memory=1G\n</code></pre>"},{"location":"components/worker/#queues-management","title":"Queues management","text":"<p>Queues have to be declared to the workers for them to process the punnets stored in these sames queues.</p> <p>The queues names will also be declared in the tasks configuration panel, so the only worker in charge of executing a task with a defined queue will be the worker whose queue regex matched this very queue.</p> <p>In order to have specific worker tied to particular queues, the configuration needs to be updated here:</p> ./config/application.properties<pre><code># Worker queue regex filter\n# worker.queue.regex=.*\n</code></pre>"},{"location":"components/worker/#disabled-the-embedded-worker","title":"Disabled the embedded worker","text":"<p>In case serveral workers are required for specific queues and tasks, there might be no more need of the embedded worker itself. To make sure not to have it running pointlessly, this worker can be disactivated from the <code>./config/application.properties</code> files, as so :</p> ./config/application.properties<pre><code># Disable auto-launch of embedded worker\nbroker.embedded.worker.autostart=false\n</code></pre>"},{"location":"components/worker/#advanced-use","title":"Advanced use","text":"<p>One of the major aspects of a promising migration project is what all project managers will ask you to vouch for: performance metrics. Let\u2019s suppose you need to migrate documents from a source system into a second one, the latter having a much higher input flow tolerance. No need for empirical statistics to know that the old ECM will be the bottleneck. An architecture similar to a hybrid deployment variant (topic we presented here) could easily be envisioned. But let\u2019s complicate things a little bit here: in-between the extraction and the injection phase, the metadata have to be updated, with new date formatting and heavy mapping of document related properties. Can still a hybrid-like architecture save you now ?</p>"},{"location":"components/worker/#several-workers","title":"Several workers","text":""},{"location":"components/worker/#context","title":"Context","text":"<p>One of the major aspects of a promising migration project is what all project managers will ask you to vouch for: performance metrics. Let\u2019s suppose you need to migrate documents from a source system into a second one, the latter having a much higher input flow tolerance. No need for empirical statistics to know that the old ECM will be the bottleneck. An architecture similar to a hybrid deployment variant (topic we presented here) could easily be envisioned. But let\u2019s complicate things a little bit here: in-between the extraction and the injection phase, the metadata have to be updated, with new date formatting and heavy mapping of document related properties. Can still a hybrid-like architecture save you now ?</p>"},{"location":"components/worker/#how-to-set-up","title":"How to set up","text":"<p>Checkout in the official documentation the required Fast2 files and folders to set up a new worker. Leave a copy of the required files and folders on the machine hosting the source environment. This worker -- let\u2019s label it as worker-S for \u201csource\u201d -- will be assigned to the extraction part. As indicated in the installation section, starting Fast2 will launch an embedded worker, assigned by default to all tasks composing the migration workflow. This worker here will be our worker-D (for \u201cDestination\u201d, or \u201cDefault\u201d).</p> <p>Plug the worker-S onto the Fast2 broker (yes, the workers -- as illustrated here -- manifest themselves to the broker, and not the other way around) : to do so, open the <code>config/application.properties</code> of the worker-S :</p> v2.4-v2.5+ ./config/application.properties<pre><code># Fast2 2.1.0 configuration\n\n# Remote broker host to use by the worker\nbroker.host=localhost\n\n# Remote broker port to use by the worker\n# broker.port=1789\n...\n</code></pre> ./config/application.properties<pre><code># Fast2 2.8.0 configuration\n\n# Remote broker url to use by the worker\nbroker.url=http://localhost:1789/broker\n\n# Port exposed by Broker\nserver.port=1789\n# Context path used by Broker\nserver.servlet.context-path=/\n\n...\n</code></pre> <p>Update the name (or IP address) of the machine where Fast2 is running (<code>broker.host</code>), and the name of the queue which the worker will be assigned to (ex/ \u201cextraction\u201d).</p> <ol> <li>Start now the Fast2 server (documentation here) to have it up and running alongside the worker-D. This latter will be assigned to both the mapping of the metadata and the injection of the documents in the destination environment.</li> <li>Then start the worker-S (documentation here).</li> </ol> <p></p> <p>Open your browser to reach the Fast2 UI, and then build up your migration workflow. For the sake of this example, 3 tasks only will suit our needs of extraction, metadata transformation and load.</p> <p>3 tasks, 3 queues, 2 workers: lock and load !!</p> <p>The extraction task will be linked to the same queue we mentioned in the <code>config/application.properties</code> of the lone worker (ex/ source-queue).</p> <p>No need to set a queue for the last task, as it will be handled by default by the last worker started with the Fast2 server.</p> <p></p> <p>For this worker, the <code>config/application.properties</code> will have the queue details set as follows:</p> <pre><code>...\n# Worker queue regex filter\nworker.queue.regex=source-queue\n</code></pre> <p></p> <p>For this worker, the <code>config/application.properties</code> will have the queue details set as follows:</p> <pre><code>...\n# Worker queue regex filter\nworker.queue.regex=metadata-queue,default\n</code></pre>"},{"location":"components/worker/#limits","title":"Limits","text":"<p>Just like any architectural decisions, such model comes with its drawbacks and benefits. If the benefits can sound quite obvious given past explanations, the downsides are worth mentioning. We will shortly discuss here about the two most current:</p> <ul> <li>Resource sharing: the more workers you\u2019ll start on the same machine, the less they\u2019ll have individually available resources.</li> <li>Connections and sessions: duplication of workers induces duplications of server calls, therefore opened sessions.</li> </ul>"},{"location":"components/worker/#resource-sharing","title":"Resource sharing","text":"<p>Let\u2019s consider a migration server with 8GB of RAM (which is a pretty good start, don\u2019t get me wrong): with a running database in the background \u2014 the embedded Elasticsearch instance which Fast2 relies on in terms of traceability \u2014 needing roughly 3GB, the operating system using 3GB as well, you\u2019ll end up with only 2GB for your worker to open around 100 documents per second and performing content conversion, metadata transformation etc. Needless to say, adding a second worker won\u2019t help you much here !</p> <p>Increase the threads amount (which you can do in the server configuration, straight from the Fast2 UI) of the queues on which you worker will get the punnets to process will surely be the go-to way for increasing your current performances.</p> <p>The most recommended scale-up here would be to start another worker on a different machine, using totally independent physical resources and combining them to the ones already solicited by the Fast2 server.</p>"},{"location":"components/worker/#connections-and-sessions-maxout","title":"Connections and sessions maxout","text":"<p>A second non-negligible aspect is the number of connections and sessions opened by the workers to communicate with both the source and destination environments. Adding worker will consequently increase these numbers, especially if several threads have been allocated to their processing queues.</p> <p> </p>"},{"location":"components/worker/#and-what-about","title":"And what about...","text":""},{"location":"components/worker/#several-workers-on-the-same-machine","title":"Several workers on the same machine?","text":"<p>One easy application of multi-worker architecture could be the need of having several source system to extract documents from, via dedicated maps for each. Booting up several workers associated with the right task queues will provide sufficent segmentation to have your migration happen simultaneously.</p> <p>Sessions conflicts can be prevented as well but such choices of architecture. At the end of the day, only one Fast2 server will have been managing all your different workflows, all you data will be stored in the very same Elasticsearch database, all with significantly better performance rates!</p>"},{"location":"components/worker/#several-workers-on-the-same-queue","title":"Several workers on the same queue?","text":"<p>In case of seeking for more physical resources for your Fast2 server which, let\u2019s say, is not a scalable machine, you could envision to \u201cplug\u201d a second server to the first one: start another worker on the second machine, and have it aim to the initial Fast2 server where the broker is running. This separate worker will be able to process any task of your workflow, any queue as well, just like the embedded one.</p> <p>However there would be absolutely no point in starting another worker assigned to the same queues as the embedded one on the Fast2 server. That won\u2019t positively affect you performance rates. If that was you goal before scrolling this page, the secret relies in adding more threads to your queues (as mentioned earlier)!</p>"},{"location":"components/worker/#remote-worker-configuration-guide","title":"Remote worker: Configuration Guide","text":"<p>This guide explains how to configure a remote worker to your broker. It covers both scenarios: when both applications are on the same network and when they are on different networks.</p>"},{"location":"components/worker/#prerequisites","title":"Prerequisites","text":"<ul> <li>Java Development Environment: Both the worker and broker applications should have at least a jdk8+ available on their environment. We highly recommend a jdk11.</li> <li>Network Connectivity: Both systems should be able to connect to each other through the network (whether local or remote).</li> </ul>"},{"location":"components/worker/#remote-worker-config","title":"Remote worker config","text":"<pre><code>server.host=&lt;broker_ip_address&gt;\n\n# Remote = docs ends broker side\n# Local = docs ends worker side\nworker.content.factory=&lt;remote|local&gt;\n</code></pre>"},{"location":"components/worker/#network","title":"Network","text":""},{"location":"components/worker/#same-network-scenario","title":"Same Network Scenario","text":"<ul> <li>Local IP Address: The worker and broker should be able to communicate over their local network using their local IP addresses.</li> <li>Network Configuration: The local network should not have strict firewall rules that block communication on the required ports.</li> </ul>"},{"location":"components/worker/#different-networks-scenario","title":"Different Networks Scenario","text":"<ul> <li>Public IP Address of Broker: The broker should have a public IP address, or at least a static public IP from the router.</li> <li>Port Forwarding on Router: The router connected to the broker must have port forwarding configured to forward incoming traffic on specific ports to the broker\u2019s local IP address.</li> <li>Firewall Configuration: The firewall on both systems (worker and broker) should allow incoming and outgoing traffic on the required ports.</li> <li>Dynamic DNS (Optional): If the public IP address of the broker is dynamic, you may want to use Dynamic DNS (DDNS) to avoid manually changing the address every time it changes.</li> </ul>"},{"location":"components/worker/#configure-worker-and-broker-on-same-network","title":"Configure Worker and Broker on same network","text":"<p>Step 1: Ensure Network Connectivity On the worker machine, ensure that you can ping the public IP address of the broker. You may need to test it by pinging broker_public_ip_address. <pre><code>ping &lt;broker_public_ip_address&gt;\n</code></pre> If the ping works, proceed to the next step. If the ping does not work, there may be an issue with the router, firewall, or routing configuration.</p> <p>Step 2: Update the broker.url in the Worker Configuration On the worker machine, update the server.host property in your config/application.properties file to the local IP address of the broker.</p> <p>If needed, you can change the protocol and port information as well. The broker.url variable is automatically updated. Do not change it.</p> <p><pre><code>server.protocol=http\nserver.host=&lt;broker_local_ip_address&gt;\nserver.port=1789\n\nbroker.url=${server.protocol}://${server.host}:${server.port}/broker\n</code></pre> Make sure the port is open and the broker is listening on the specified port.</p> <p>Step 3: Verify broker is listening on specified port On the broker machine, verify that the broker application is listening on the port you specified by using the following command: <pre><code># Linux\nsudo netstat -tuln | grep &lt;port&gt;\n\n# Windows\n`netstat -ano | findstr &lt;port&gt;`\n</code></pre> The output should show something like: <pre><code>tcp6       0      0 :::&lt;port&gt;                 :::*                    LISTEN\n</code></pre></p> <p>Step 4: Test the connection On the worker machine, test the connection to the broker using nc (netcat) to check if the port is open and accessible: <pre><code># Linux\nnc -zv &lt;broker_local_ip_address&gt; &lt;port&gt;\n\n# Windows\ntelnet &lt;broker_local_ip_address&gt; &lt;port&gt;\n</code></pre> If the connection is successful, the worker and broker can communicate.</p>"},{"location":"components/worker/#configure-worker-and-broker-on-different-networks","title":"Configure Worker and Broker on different networks","text":"<p>Step 1: Configure Port Forwarding on the Broker\u2019s Router On the router connected to the broker, you need to configure port forwarding to forward incoming traffic on a specific port to the broker's local IP address and port.</p> <ol> <li>Log into the router's web interface (usually at 192.168.1.1 or 192.168.0.1).</li> <li>Navigate to the Port Forwarding or NAT settings section.</li> <li>Add a rule to forward traffic coming on port to the internal IP address of the broker (broker_local_ip_address).</li> <li>Save the settings.</li> </ol> <p>Step 2: Verify Firewall Configuration Ensure that both the broker\u2019s firewall and the worker\u2019s firewall allow communication on the specified port. If necessary, open the required port in the firewall:</p> <p>On Ubuntu, to open a port in the firewall (if using ufw):</p> <pre><code>sudo ufw allow &lt;port&gt;/tcp\n</code></pre> <p>Step 3: Repeat steps explained for same network</p>"},{"location":"components/worker/#remote-worker-configuration","title":"Remote worker configuration","text":"<p>You have multiple options through the application.properties file to configure your remote worker.</p>"},{"location":"components/worker/#file-storage-broker-or-worker","title":"File storage : broker or worker ?","text":"<p>You can either store the files processed from the broker or at the worker side. To choose one or the other you simply have to modify this property :</p> <pre><code>worker.content.factory=&lt;remote|local&gt;\n</code></pre> <ul> <li>Select remote to send back documents to the broker.</li> <li>Select local (default value) to keep documents processed by the worker from its side</li> </ul>"},{"location":"components/worker/#example","title":"Example","text":"<p>This is an example to understand what happens for both scenarios. Imagine that we are extracting some documents from a Documentum environment and we need to convert tiff files to a pdf format.</p>"},{"location":"components/worker/#local","title":"Local","text":"<pre><code>sequenceDiagram\nWorker -&gt;&gt; Broker: Hi broker, I'm available\nBroker -&gt;&gt; Worker: Hello worker, I have some work for you\nWorker -&gt;&gt; Dctm: Ask for documents\nDctm -&gt;&gt; Worker: Provide documents\nWorker -&gt;&gt; Worker: Convert tiff to pdf\nNote right of Worker: Tiff and output &lt;br&gt; pdf files will be stored &lt;br&gt; from worker side\nBroker -&gt;&gt; Worker: Good job, campaign finished\nWorker -&gt;&gt; Broker: I'm still available if you need</code></pre>"},{"location":"components/worker/#remote","title":"Remote","text":"<pre><code>sequenceDiagram\nWorker -&gt;&gt; Broker: Hi broker, I'm available\nBroker -&gt;&gt; Worker: Hello worker, I have some work for you\nWorker -&gt;&gt; Dctm: Ask for documents\nDctm -&gt;&gt; Worker: Provide documents\nWorker -&gt;&gt; Worker: Convert tiff to pdf\nWorker -&gt;&gt; Broker: Upload documents on broker side\nNote left of Broker: As we specified remote, &lt;br&gt; worker will upload files &lt;br&gt; to the broker side\nWorker -&gt;&gt; Worker: Clean up space\nNote right of Worker: To avoid duplicates, &lt;br/&gt; worker will clean files &lt;br/&gt; from its environment\nBroker -&gt;&gt; Worker: Good job, campaign finished\nWorker -&gt;&gt; Broker: I'm still available if you need</code></pre>"},{"location":"components/worker/#file-storage-architecture","title":"File storage architecture","text":"<p>By default, documents processed by the worker will be stored under the folder files/. Then documents will follow a strict hierarchy as mentioned in the property worker.files.pattern</p> <p><pre><code>worker.files.dir=files/\nworker.files.pattern=@{campaign?:'shared'}/@{step?:'shared'}/@{documentId?:punnetId}\n</code></pre> Values shown above are used by default. Feel free to change it to match your requirements in term of folder organization.</p>"},{"location":"components/worker/#troubleshooting","title":"Troubleshooting","text":""},{"location":"components/worker/#common-issues","title":"Common Issues","text":""},{"location":"components/worker/#ping-does-not-work","title":"Ping does not work","text":"<p>Ensure that the devices can actually communicate over the network. Double-check the network cables, Wi-Fi connection, and make sure there are no misconfigured network settings or firewalls blocking ICMP packets.</p>"},{"location":"components/worker/#connection-times-out","title":"Connection times out","text":"<p>If using public IP addresses, check the router\u2019s port forwarding configuration and verify that the firewall on both the broker and worker machines allows traffic on the relevant port.</p>"},{"location":"components/worker/#port-is-closed","title":"Port is closed","text":"<p>Verify that the broker application is actually listening on the specified port, and ensure the port is not blocked by a firewall.</p>"},{"location":"components/worker/#public-ip-changes","title":"Public IP changes","text":"<p>If the public IP of the broker changes frequently, consider using a Dynamic DNS (DDNS) service to map a domain name to the changing IP address, so the worker can use the domain name instead of an IP address.</p>"},{"location":"cookbooks/","title":"Fast2 cookbooks","text":"<p>Definition</p> <p>A cookbook in the programming context is collection of tiny programs that each demonstrate a particular programming concept. The Cookbook Method is the process of learning a programming language by building up a repository of small programs that implement specific programming concepts.</p> <p>Here are some examples of short use-cases with Fast2, covering APIs management which might be required for configuring some of the tasks.</p> <p>This section will particularly be insightful for custom module development.</p> <p>You will find here boilerplate code snippets, as well as real-life examples of task configuration for challenges you might take up, one day.</p>"},{"location":"cookbooks/content-metadata-from-s3/","title":"Retrieve content and metadata from an S3 bucket","text":"<p>Extracting metadata from a S3 bucket needs to be done differently than what could be done with a regular content management system, because it is a storage space and not an ECM.</p> <p>Prior to v2.10, Fast2 needed a few steps to add \u201cmanually\u201d (with AlterDocumentProperties) key and bucket information in the XML file, to then get corresponding PDF files.</p> <p>Extracting metadata from a S3 bucket needs to be done differently than what could be done with a regular content management system, where a document is a set of contents and metadata. Indeed, S3 bucket is a storage space and not an ECM (we\u2019ll get into that a little bit later).</p> <p>Let\u2019s quickly review here how extracting both content and metadata in a S3 bucket can be achieved with Fast2.</p>","tags":["xml","pattern","document","AWS S3","content"]},{"location":"cookbooks/content-metadata-from-s3/#where-do-we-come-from","title":"\ud83e\uddd0 Where do we come from ?","text":"<p>For this case, let's supposed our documents have been injected in S3 bucket (direct sequel of the Upload content and metadata in a S3 bucket cookbook). This action splits them into pairs of individual files : contents (PDF) and matching metadata (XML) files, each sharing the same file name.</p> <pre><code>\u251c\u2500 Bucket S3/\n\u2502       \u251c\u2500 folder A\n\u2502       \u2502     \u251c\u2500 document_A_1.xml\n\u2502       \u2502     \u251c\u2500 document_A_1.pdf\n\u2502       \u2502     \u2514\u2500 ...\n\u2502       \u2502\n\u2502       \u251c\u2500 folder B\n\u2502       \u2502     \u251c\u2500 document_B_1.xml\n\u2502       \u2502     \u251c\u2500 document_B_1.pdf\n\u2502       \u2502     \u2514\u2500 ...\n\u2502       \u2514\u2500...\n\u2514\u2500 ...  \n</code></pre> <p>Another constraint is that the PDF path information has been set into the XML file during the serialisation prior to the injection. So, once stored in the S3 bucket, it is not up-to-date.</p>","tags":["xml","pattern","document","AWS S3","content"]},{"location":"cookbooks/content-metadata-from-s3/#where-to-go","title":"\ud83e\udd14 Where to go ?","text":"<p>We want to end up with a regular Fast2 document composed with a content (PDF) and its metadata (parsed from the matching XML). Because of the old content path information (explained earlier), the content (PDF) will not be found in the XML information, inducing an incomplete document to be created.</p>","tags":["xml","pattern","document","AWS S3","content"]},{"location":"cookbooks/content-metadata-from-s3/#way-to-go","title":"\ud83d\ude80 Way to go !","text":"<p>First, we identify XML files. They contain all metadata, namely the PDF content we need to attach.</p> <p>Then, we update the file extension : PDF and corresponding XML files have the same name.</p> <p>And finally, thanks to the source information, and XML metadata, we resolve the matching PDF content path, extract it from the bucket, and tie it to the Fast2 document.</p>","tags":["xml","pattern","document","AWS S3","content"]},{"location":"cookbooks/content-metadata-from-s3/#find-content-from-metadata","title":"\ud83d\udd0e Find content from metadata","text":"<p>In the AWSSource task , we extract only interested XML files because they contain metadata :</p> <p>To only select punnet-formated XML correponding to the punnets, you will need to fill the AWS suffix field with : <code>xml</code>.</p> <p>Optionally, you can also provide the concerned folder(s) in the Source folders if relevant.</p> <p></p> <p>In the AWSContentSource task configuration, fields to fill are :</p> <ul> <li>Bucket name : <code>${bucket}</code></li> <li>Content path (S3 object key) :</li> </ul> <pre><code>${s3_key.substring(0, s3_key.lastIndexOf(\u201c/\u201d)) + \u201d/\u201d + docName}\n</code></pre> <p>By filling the S3 objecy key, the connector will on-the-fly build up the correct path where to look for the related content, and tie it to the punnet.</p> <p>Fast2 extracts all metadata files present in our S3 bucket, following the key of the XML, as a punnet, and names them correctly.</p> <p></p>","tags":["xml","pattern","document","AWS S3","content"]},{"location":"cookbooks/content-metadata-from-s3/#lets-wrap-up","title":"\ud83d\udc4f Let's wrap up","text":"<p>We updated path information into XML files, which contain the XML-structured punnet. Then, we can attached corresponding PDF files.</p> <p>We have now punnets containing linked content and metadata, which were sharing the same name in the bucket.</p> <p>Next, we could process them through additional conversion or data transformation steps, or inject them into a secondary repository, you name it.</p>","tags":["xml","pattern","document","AWS S3","content"]},{"location":"cookbooks/content_basics/","title":"Learn how to deal with contents","text":"<p>In Fast2, contents are objects embedding the \"file\" (= binary format) of the document. They can be found within either documents themselves or annotations, and can be accessed through different ways. Contents usually hold a mime-type property, alongside any other property closely related to the content itself.</p> <p>Contents are often referred as ContentContainers.</p>","tags":["boilerplate","content","java"]},{"location":"cookbooks/content_basics/#how-to-create-a-content","title":"How to create a content","text":"<p>This section relates of how to add a content from the code.</p> <p>If you wish to add a content (or delete it), head out to the AlterDocumentContent task.</p> <pre><code>// From an URL or a path\nContentContainer myContent = task.getManager()\n                    .getPunnetContentFactory()\n                    .createContent(myDocument, myUrl);\n\n\n// From an inputstream\nContentContainer myContent = task.getManager()\n                    .getPunnetContentFactory()\n                    .createContent(myPunnet, myDocument, myInputStream);\n\n\n// From a byte array\nContentContainer myContent = task.getManager()\n                    .getPunnetContentFactory()\n                    .createContent(myPunnet, myDocument, myByteArray);\n</code></pre>","tags":["boilerplate","content","java"]},{"location":"cookbooks/content_basics/#how-to-access-a-content","title":"How to access a content","text":"<p>When digging into the structure of a punnet from the Explore place, you'll come across an URL pointing to the location of the binary file.</p> <p>However there is quite a few ways of accessing a given content:</p> <pre><code>// As java file\nFile myFile = task.getManager()\n                    .getPunnetContentFactory()\n                    .getContentAsFile(myContent);\n\n\n\n// As byte array\nbyte[] myBytes = task.getManager()\n                    .getPunnetContentFactory()\n                    .getContentAsByteArray(myContent);\n\n\n\n// As URL\nURL myURL = task.getManager()\n                    .getPunnetContentFactory()\n                    .getContentAsUrl(myContent);\n\n\n\n// As RandomAccessInterface\nRandomAccessInterface myRAI = task.getManager()\n                    .getPunnetContentFactory()\n                    .getContentAsRandomAccessInterface(myContent);\n</code></pre>","tags":["boilerplate","content","java"]},{"location":"cookbooks/content_basics/#mime-type","title":"Mime-type","text":"<p>The content mime-type is a property usually added by the MimeTypeFinder task. However you could be willing to force it, which can be done like so:</p> <pre><code>myContent.setMimeType(\"the right mime-type\");\n</code></pre> <p>This is basically what the MimeTypeFinder will do once the mime-type resolved from the content format.</p> <p>To access this value, a regular java getter will do:</p> <pre><code>String myMimetype = myContent.getMimeType();\n</code></pre>","tags":["boilerplate","content","java"]},{"location":"cookbooks/content_basics/#properties","title":"Properties","text":"<p>The contents in Fast2 also embed properties, for more closely related data.</p> <pre><code>Collection&lt;Property&gt; myProps = myContent.getProperties();\n\nString myValue = myContent.getProperty(myName);\n\nmyContent.setProperty(myName,myValue);\n</code></pre>","tags":["boilerplate","content","java"]},{"location":"cookbooks/content_basics/#sub-contents","title":"Sub-contents","text":"<p>Subcontents are just regular contents stored into a ContentSet attached to a content.</p> <p>They can be both created/added and removed:</p> <pre><code>ContentSet subContents = myContent.getSubContents();\n\nmyContent.clearSubContents();\n</code></pre>","tags":["boilerplate","content","java"]},{"location":"cookbooks/csvsource_further/","title":"CSV source : a step further","text":"<p>Ever wondered how Fast2 could help you dive into archives and come out with burried content and metadata? It actually is quite simple, as long as you have the right tools in your hands.</p> <p>The CSVSource task has been designed to receive a CSV file as input.</p>","tags":["csv"]},{"location":"cookbooks/csvsource_further/#basic-usage","title":"Basic usage","text":"<p>With little to no configuration, each line represents one document with different values matching the column header. From a Fast2 standpoint, a CSV with following content :</p> <pre><code>header1,header2\nvalue1_A,value2_A\nvalue1_B,value2_B\n</code></pre> <p>will generate 2 documents :</p> <ul> <li>The first document will have 2 data, <code>header1: value1_A</code> and <code>header2: value2_A</code> </li> <li>The second document will have 2 data, <code>header1: value1_B</code> and <code>header2: value2_B</code></li> </ul> <p>Although the default before resolved the data names from the 1st row (column headers), these names can be overwritten by the user, or even enriched.</p>","tags":["csv"]},{"location":"cookbooks/csvsource_further/#change-data-names","title":"Change data names","text":"<p>As for the first option (overwriting data names), the configuration needs to focus on the \"New column names to set\".</p> <p>Enter each new header on a new line, making sure your input covers all the columns found in the CSV file.</p> <p></p> <p>With such a setting, Fast2 will map the data retrieved from the CSV directly under those new data names.</p>","tags":["csv"]},{"location":"cookbooks/csvsource_further/#example","title":"Example","text":"<p>Let's consider processing a CSV file with the following content:</p> <pre><code>header1,header2\nvalue1 ,value2\n</code></pre> <p>With the default settings, the document in Fast2 would have such dataset:</p> <pre><code>{\n    \"header1\": \"value1\",\n    \"header2\": \"value2\"\n}\n</code></pre> <p>If the CSVSource task is configured as shown below,</p> <p></p> <p>the created document will only have a dataset looking like:</p> <pre><code>{\n    \"new header A\": \"value1\",\n    \"new header B\": \"value2\"\n}\n</code></pre> <p>Fast2 will keep no trace of the old header names, generating a document with a dataset populated from the CSV file alongside new data names.</p> <p>Of course this data name mapping could have been handled by an additional task, such as Drools or JSTransform (just to name a few).</p> <p>But this CSV task here combines these 2 steps (of parsing and mapping) into a single one, lowering room for error and freeing the document of unnecessary information you'd not even have used.</p>","tags":["csv"]},{"location":"cookbooks/csvsource_further/#create-extra-columns-based-on-existing-data","title":"Create extra columns based on existing data","text":"<p>This feature requires the configuration of the <code>extracolumns</code> option.</p> <p>Syntaxe Enter one line per new data you intend to create.</p>","tags":["csv"]},{"location":"cookbooks/csvsource_further/#syntax-goes-as-follows","title":"Syntax goes as follows :","text":"<pre><code>[variable]=[function]:[param1]:[param2]:[param3]:[param4]...\n</code></pre>","tags":["csv"]},{"location":"cookbooks/csvsource_further/#rules","title":"Rules","text":"<ol> <li>The separator is the character <code>:</code> (semi-colon).</li> <li>Parameters have to striclty match the format <code>$&lt;data_name&gt;</code>. A data with the name \"key\" will be accessed under <code>$key</code>.</li> <li>Parameters can use other params</li> </ol> <pre><code>param1=stringLength:$keyA\nparam2=substring:$param1:3:5\n</code></pre>","tags":["csv"]},{"location":"cookbooks/csvsource_further/#supported-functions","title":"Supported functions","text":"Function Description stringLength length of param1 substring substring of param1, from param2, during param3 characters concat concatenation of all params ifeq if param1 equals param2, then takes value of param3, otherwise param4","tags":["csv"]},{"location":"cookbooks/csvsource_further/#example_1","title":"Example","text":"<p>We consider the following CSV content as input :</p> <pre><code>header1,header2,header3,header4\nvalue1 ,value2 ,value3 ,this-is-the-value4\n</code></pre> <p>In the following examples, a new data with the name 'var_name' will be created with the value depending on the chosen option.</p> How to write it Value of the 'var_name' data <code>var_name=stringLength:$header1</code> Length (as integer) of the data 'value1' under 'header1', so 6. <code>var_name=substring:$header1:0:4</code> First 4 characters of the value under key <code>header1</code>, so valu. <code>var_name=substring:$header4:4:7</code> The 7 consecutive characters starting from the 5th one (counting from 0). So is-the-. <code>var_name=concat:OK/:$header1:/:$header2:_:$header3:.pdf</code> Output : ok/value1/value2_value3.pdf <code>var_name=concat:KO/:$header1:.pdf</code> Output : KO/value1.pdf <code>var_name=ifeq:$header1:18:$header2:$header3</code> Value of 'header1' is not equal to '18', so the output is value3.","tags":["csv"]},{"location":"cookbooks/data_from_filename/","title":"Add data from file name","text":"<p>Times will happen when you will not be able to rely on side-file metadata documents to map onto the documents you are migrating. The data will be concatenated into the file name.</p> <p>Fortunatelly with Fast2, there is still a possibility to parse this file name and pull out the required metadata. Last step would be to tight them down into the document dataset.</p>","tags":["worker","json","javascript","boilerplate"]},{"location":"cookbooks/data_from_filename/#where-do-we-come-from","title":"Where do we come from ?","text":"<p>For the educational aspect of this topic, let us consider a folder gathering several documents, all with the same format : <code>&lt;document-type&gt;-&lt;data1&gt;-&lt;data2&gt;</code>.</p> <p>Our folder looks like this:</p> <pre><code>\u251c\u2500 folder-to-extract\n\u2502       \u251c\u2500 contract-123-ABC.pdf\n\u2502       \u251c\u2500 contract-346-DEF.pdf\n\u2502       \u2502             \n\u2502       \u251c\u2500 bill-123-ABC.pdf\n\u2502       \u251c\u2500 bill-346-DEF.pdf\n\u2502       \u2502 \n\u2502       \u251c\u2500 contract-123-ABC.pdf\n\u2502       \u251c\u2500 contract-346-DEF.pdf\n\u2502       \u2502             \n\u2502       \u251c\u2500 draft-123-ABC.pdf\n\u2502       \u251c\u2500 draft-346-DEF.pdf\n\u2502       \u2514\u2500 ...\n\u2514\u2500 ...\n</code></pre>","tags":["worker","json","javascript","boilerplate"]},{"location":"cookbooks/data_from_filename/#where-to-go","title":"Where to go ?","text":"<p>At a glance, we are just 3 (major) steps away from having a PDF content in our punnet, with a basic dataset populated from the JSON metadata :</p> <ol> <li>Scan the parent folder and list all the documents with names to map,</li> <li>Get the document path, and isolate the file name</li> <li>Parse the file name and attach the metadata to the dataset. For this example, data will be mapped onto the document dataset.</li> </ol> <p> </p>","tags":["worker","json","javascript","boilerplate"]},{"location":"cookbooks/data_from_filename/#way-to-go","title":"Way to go !","text":"<p>Inside Fast2, the map design is now pretty straightforward, given our ideas are rather clear in terms of the overall order of the operations.</p> <p>The map is even quite close to the 3 steps detailed earlier. The LocalSource task just needs to be given the path of the folders to deal with. This task will also identify the file name and attach the metadata to the document dataset.</p> <p>Then the JSTranform will retrieve the corresponding document path, and carry on with the data mapping.</p> <p>That way, we end up with 4 tasks :</p> <ul> <li>LocalSource, to collect the documents from local storage,</li> <li>JSTranform, whose role will be to :  parse the file name  add the data to the dataset</li> </ul> <p></p> <p></p> <p> </p>","tags":["worker","json","javascript","boilerplate"]},{"location":"cookbooks/data_from_filename/#javascript-elaboration","title":"JavaScript elaboration","text":"<p>Although the configuration of the first task can be easily guessed, the JSTranform final resulting script should look something like this :</p> <pre><code>punnet.getDocuments().forEach(function (doc) {\n  // (1)\n  var filenameWithoutExtension = doc\n    .getDataSet()\n    .getData(\"fileName\")\n    .getValue()\n    .split(\".\")[0];\n\n  // (2)\n  var data = filenameWithoutExtension.split(\"-\");\n\n  // (3)\n  doc.getDataSet().addData(\"document-type\", \"String\", data[0]);\n  doc.getDataSet().addData(\"data1\", \"String\", data[1]);\n  doc.getDataSet().addData(\"data2\", \"String\", data[2]);\n});\n</code></pre> <ol> <li> Get the filename, and remove the extension</li> <li> Parse the filename with the separator character</li> <li> Attach the data</li> </ol> <p> </p> <p>Head out now to the Run screen, start your campaign and just... enjoy !</p>","tags":["worker","json","javascript","boilerplate"]},{"location":"cookbooks/data_from_filename/#result","title":"Result","text":"<p>At the latest stage of your workflow, the document dataset is filled with the properties found in the JSON and integrated as metadata.</p> <pre><code>{\n    \"punnetId\": \"document-123-ABC.pdf#1\",\n    \"documents\": [\n        {\n            \"documentId\": \"document-123-ABC.pdf\",\n            \"data\": {\n                \"absolutePath\": \"C:\\\\samples\\\\document-123-ABC.pdf\",\n                \"fileName\": \"document-123-ABC.pdf\",\n                \"absoluteParentPath\": \"C:\\\\samples\",\n                \"length\": {\n                    \"value\": \"18700\"\n                },\n                \"lastModified\": {\n                    \"value\": \"Mon Dec 27 14:10:47 CET 2021\",\n                    \"type\": \"Date\"\n                },\n                \"document-type\": \"document\",\n                \"data1\": \"123\",\n                \"data2\": \"ABC\"\n            },\n            \"contents\": {\n                \"url\": \"C:\\\\samples\\\\document-123-ABC.pdf\"\n            },\n            \"folders\": [...]\n        }\n    ]\n}\n</code></pre>","tags":["worker","json","javascript","boilerplate"]},{"location":"cookbooks/data_from_filename/#lets-sum-up","title":"Let's sum up","text":"<p>We can bring this scenario further by mapping data from the parent folder(s). We would just need the document path, which can be retrieved easily, as explained in the advanced section of how to handle the JS Tranform task.</p> <p>For a OS-proofed script (Linux or Windows have their own subtleties when it comes to paths), you may need to make sure the parsing is done correctly, by standardizing the folder-architecture-related special characters from the Windows <code>\\</code> to a regular <code>/</code>.</p> <p>If this use-case echoes your early needs, other tasks can be tied to this map to reach a higher level of complexity characteristic of real-world migration projects.</p>","tags":["worker","json","javascript","boilerplate"]},{"location":"cookbooks/dataset_basics/","title":"Learn how to deal with datasets","text":"<p>Datasets are Fast2 objects which can be involved at different levels within the punnet.</p> <p>They can be found on the</p> <ul> <li>punnets</li> <li>documents</li> <li>workflows</li> </ul> <p>Datasets gather data which can be manipulated to store properties, and can be accessed as follows:</p> <pre><code>DataSet dataset = punnet.getDataSet();\n\nDataSet dataset = document.getDataSet();\n\nDataSet dataset = workflow.getDataSet();\n</code></pre> <p>Since datasets are just groups of data, understanding basic operations with data is primordial.</p>","tags":["boilerplate","dataset","java","data"]},{"location":"cookbooks/dataset_basics/#data-object","title":"Data object","text":"<p>In Fast2, a data has 3 different informations:</p> <ul> <li>its name,</li> <li>its type (<code>String</code> or <code>int</code>)</li> <li>its value(s)</li> </ul> <p>The following line retrieve the data as object :</p> <pre><code>Data data = dataset.getData(dataName);\n</code></pre>","tags":["boilerplate","dataset","java","data"]},{"location":"cookbooks/dataset_basics/#name","title":"Name","text":"<p>Getting the name of a data just goes like:</p> <pre><code>String dataName = data.getSymbolicName();\n</code></pre>","tags":["boilerplate","dataset","java","data"]},{"location":"cookbooks/dataset_basics/#type","title":"Type","text":"<p>If no type has been defined when the data has been created, the data type will be <code>null</code>.</p> <p>However Fast2 will treat the value of the data as a regular <code>String</code>.</p> <pre><code>String dataType = data.getType();\n</code></pre>","tags":["boilerplate","dataset","java","data"]},{"location":"cookbooks/dataset_basics/#values","title":"Value(s)","text":"<p>When dealing with data, some can be single-valued while others can be multi-valued.</p> <p>The returned object will differ accordingly.</p> <pre><code>String dataValue = data.getValue();\n\nList&lt;String&gt; dataValues = data.getValues();\n</code></pre> <p>Data values can be added along the way, even when the data has already been created with a given value to begin with:</p> <pre><code>data.addValue(value);\n</code></pre> <p> </p>","tags":["boilerplate","dataset","java","data"]},{"location":"cookbooks/dataset_basics/#properties","title":"Properties","text":"<p>A data can be dealt with just like any other object with properties.</p> <p>Therefore, adding a property, removing it or getting it are just as simple as you would think:</p> <pre><code>data.setProperty(name, value);\n\nString value = data.getProperty(name);\n\ndata.removeProperty(name);\n</code></pre>","tags":["boilerplate","dataset","java","data"]},{"location":"cookbooks/dataset_basics/#add-data","title":"Add data","text":"<p>Several ways of adding data to the dataset are available, depending on the type of value you are willing to store:</p> <pre><code>Data myData = myDataset.addData(name, \"String\", value);  // String\nData myData = myDataset.addData(name, null, value);\n\nData myData = myDataset.addData(name, \"boolean\", true);  // boolean\n\nData myData = myDataset.addData(name, type, 10);         // long, int\n\nData myData = myDataset.addData(name, \"String\");             // list or arrays of String\nmyData.getValues().addAll(Arrays.asList(\"a\", \"b\", \"c\"));\n\ndocument.getDataSet().addData(\"multivalued\", \"String\").getValues().addAll(Arrays.asList(\"value #1\", \"value #2\"));\n</code></pre> <p>Adding a new data with the same name as an already stored one, will result in overwriting the existing value with the new one.</p>","tags":["boilerplate","dataset","java","data"]},{"location":"cookbooks/dataset_basics/#iterating-through-all-data","title":"Iterating through all data","text":"<p>Data mapping often requires to cover all data, no matter their name. To do so, the easiest way is to get them as a list:</p> <pre><code>List&lt;Data&gt; allData = myDataset.getData();\n\nfor(Data data : allData){\n    // ...\n}\n</code></pre>","tags":["boilerplate","dataset","java","data"]},{"location":"cookbooks/dataset_basics/#retrieve-data-values","title":"Retrieve data value(s)","text":"<p>The following line retrieve the data as object :</p> <pre><code>Data data = dataset.getData(dataName);\n</code></pre>","tags":["boilerplate","dataset","java","data"]},{"location":"cookbooks/dataset_basics/#single-valued-data","title":"Single-valued data","text":"<p>The dataset offers a shortcut to get the value(s) of any data:</p> <pre><code>// 1st way : via data object\nString value = myDataSet.getData(dataName).getValue();\n\n// or\n\n// 2nd way : dataset shortcut\nString value = myDataSet.getDataValue(dataName);\n</code></pre>","tags":["boilerplate","dataset","java","data"]},{"location":"cookbooks/dataset_basics/#multi-valued-data","title":"Multi-valued data","text":"<pre><code>// 1st way : via data object\nList&lt;String&gt; value = myDataSet.getData(dataName).getValues();\n\n// or\n\n// 2nd way : dataset shortcut\nList&lt;String&gt; value = myDataSet.getDataValues(dataName);\n</code></pre>","tags":["boilerplate","dataset","java","data"]},{"location":"cookbooks/dataset_basics/#remove-data","title":"Remove data","text":"<p>If the data has been found and could successfully be removed, the following method will return <code>TRUE</code>:</p> <pre><code>boolean removedSuccessfully = myDataset.removeData(name);\n</code></pre>","tags":["boilerplate","dataset","java","data"]},{"location":"cookbooks/dataset_basics/#check-if-data-exists","title":"Check if data exists","text":"<p>Rely on this method to make sure not to overwrite any existing data, nor having a <code>DataNotFoundException</code> exception.</p> <pre><code>boolean exists = myDataset.hasData(name);\n</code></pre>","tags":["boilerplate","dataset","java","data"]},{"location":"cookbooks/dataset_basics/#datanotfound-exception","title":"DataNotFound exception","text":"<p>When operations are performed on non-existing data, an exception of type <code>DataNotFoundException</code> is thrown.</p>","tags":["boilerplate","dataset","java","data"]},{"location":"cookbooks/document_basics/","title":"Learn how to deal with documents","text":"<p>The documents are a main part of any migration, if not the purpose of it. Here are the basics for an appropriate understanding of the Java API of the document object.</p> <p>For a better understanding of the following, the document structure needs to be clearly visualized. If required, go back to the definition of such an object in Fast2.</p>","tags":["boilerplate","document","dataset","content","java"]},{"location":"cookbooks/document_basics/#creation","title":"Creation","text":"<p>As explained in the basics of punnet a document can be created on the fly:</p> <pre><code>Document myDoc = myPunnet.addDocument(DocumentId.id());\n</code></pre> <p>If required, the document ID can be force by adding a parameter into the document ID creation:</p> <pre><code>Document myDoc = myPunnet.addDocument(DocumentId.id(\"myDocId\"));\n</code></pre> <p>However the ID can be forced after the document creation:</p> <pre><code>myDoc.setDocumentId(DocumentId.id(\"myDocId\"));\n</code></pre> <p>Later on, its ID can be retrieved just like the punnet's:</p> <pre><code>DocumentId myId = myDoc.getDocumentId();\n</code></pre>","tags":["boilerplate","document","dataset","content","java"]},{"location":"cookbooks/document_basics/#dataset","title":"DataSet","text":"<p>The purpose of the document dataset is to store metadata closely related to its entity. When data are not too tighly related to the content of a document, chances are they will be stored as this dataset level. The mime-type does not follow this rule, though.</p> <p>This dataset can be access via an usual getter:</p> <pre><code>DataSet myDataset = myDoc.getDataSet();\n</code></pre> <p>A document is built with an empty dataset by default.</p> <p>For more information concerning the dataset, head out to the dedicated section.</p>","tags":["boilerplate","document","dataset","content","java"]},{"location":"cookbooks/document_basics/#contents","title":"Contents","text":"<p>In Fast2, a document can have no to several contents.</p> <p>No-content cases could be like:</p> <ul> <li>the document does not have a content, originally</li> <li>the content has already been migrated</li> <li>the migration is just an update with only a few metadata to send to the destination</li> </ul> <p></p> <p>Several-contents cases could be like:</p> <ul> <li>the document has attachments (1 content per attachment)</li> <li>the document has content of different types (e.g. a PDF file alongside a TIFF file)</li> </ul> <p>However the ratio 1-content-for-1-document is quite common.</p> <p>Contents are accessed via the <code>ContentSet</code> which basically is a collection of <code>ContentContainer</code>s:</p> <pre><code>ContentSet myContents = myDoc.getContentSet();\n</code></pre> <p>A document is built with an empty contentset by default.</p> <p>For more information concerning the contentset, head out to the dedicated section.</p>","tags":["boilerplate","document","dataset","content","java"]},{"location":"cookbooks/document_basics/#mime-type","title":"Mime-type","text":"<p>All documents provide a shortcut to their first content mime-type, under the <code>mimeType</code> data stored in the document dataset:</p> <pre><code>String myMimetype = myDoc.getMimeType();\n</code></pre> <p>This data can also be set from the document level:</p> <pre><code>myDoc.setMimeType(\"myMimetype\");\n</code></pre> <p>As said earlier, this method is just a shortcut to add a mime-type data into the document dataset.</p>","tags":["boilerplate","document","dataset","content","java"]},{"location":"cookbooks/document_basics/#folders","title":"Folders","text":"<p>The document folderset can be used for folders-only migration and well as folder-as-a-whole ones.</p> <p>A folderset can contains one or several folder references, and is access as follows:</p> <pre><code>FolderSet myFolders = myDoc.getFolders();\n</code></pre> <p>A document is built with an empty folderset by default.</p> <p>For more information concerning the folders, head out to the dedicated section.</p>","tags":["boilerplate","document","dataset","content","java"]},{"location":"cookbooks/document_basics/#annotations","title":"Annotations","text":"<p>The document can embed zero to several annotations alongside its contents or data.</p> <p>The collection of these annotations is called an <code>AnnotationSet</code>, and can be accessed as follows:</p> <pre><code>AnnotationSet myAnnotationSet = myDoc.getAnnotationSet();\nList&lt;Annotation&gt; myAnnotions = myAnnotationSet.getAnnotationList();\n\nmyAnnotationSet.addAnnotation(myAnnotation);\n\nAnnotation newAnnotation =  myAnnotationSet.addAnnotation(myAnnotatioContent);\n</code></pre> <p>A document is built with an empty annotationset by default.</p> <p>From a Fast2 standpoint, a annotation is just a object composed by an ID and a content.</p>","tags":["boilerplate","document","dataset","content","java"]},{"location":"cookbooks/folders_basics/","title":"Folders basics","text":""},{"location":"cookbooks/folders_basics/#page-under-construction","title":"Page under construction","text":""},{"location":"cookbooks/from-zip-to-punnet/","title":"From ZIP to punnet","text":"<p>Dealing with archive files was never close to seldom in the past times, and surely won't ever be !</p> <p>Let's guide you here through the common process for retrieving data, content, parsing files withing archive binaries, with our ETL tool.</p>"},{"location":"cookbooks/from-zip-to-punnet/#where-do-we-come-from","title":"\ud83e\uddd0 Where do we come from ?","text":"<p>For the educational aspect of this topic, let us consider a folder gathering all the different archives, matching the following structure:</p> <pre><code>\u251c\u2500 ZIP archive/\n\u2502       \u251c\u2500 metadata.json\n\u2502       \u2514\u2500 content.pdf\n\u251c\u2500  ZIP archive/\n\u2502       \u251c\u2500 metadata.json\n\u2502       \u2514\u2500 content.pdf\n\u2514\u2500 ...\n</code></pre> <p>Each ZIP archive embeds a PDF content as flat file, alongside a JSON listing the metadata which we'll have to attach to the PDF document (before any injection-or-else phase).</p> <p>The metadata contained in the JSON files are simply arranged like so:</p> <pre><code>{\n  \"agency\": \"Agency_name\",\n  \"customerNumber\": \"658217041\",\n  \"contractNumber\": \"0121443-01\",\n  \"operationDate\": \"20170523000000\",\n  \"docType\": \"Bill\",\n  \"fiscalYear\": \"2016\",\n  \"treatmentType\": \"Archiving\"\n}\n</code></pre>"},{"location":"cookbooks/from-zip-to-punnet/#where-to-go","title":"\ud83e\udd14 Where to go ?","text":"<p>At a glance, we are just 3 (major) steps away from having a PDF content in our punnet, with a basic dataset populated from the JSON metadata :</p> <ol> <li>First we need to import these ZIP archives into Fast2</li> <li>Then we need to dive into the ZIP \"documents\" one after the other,</li> <li>And finally focus on the JSON content to parse and map the embedded properties.</li> </ol> <p> </p> <p>Since our purpose is to dive into the ZIP files, we first need to gather them all with the LocalSource task, providing the parent folder where all these archives are currently being stored. The only required parameter is the path of the parent folder(s).</p> <p>The second step is now to open these files up, in order to provide access to both the PDF content and the JSON file, revealing at the same time the metadata we are looking for. Such exposure can be achieved by using the DispatchingArchive task.</p> <p>Once accessible, the JSON file can be parsed by the JSTransform task. Choice is yours regarding where to store the data found in the JSON content of our ZIP archive, here they will be added to the dataset of the document.</p> <p>Not a big deal, right ? Let's then tackle this challenge right away, shall we !!</p> <p></p> <p> </p>"},{"location":"cookbooks/from-zip-to-punnet/#way-to-go","title":"\ud83d\ude80 Way to go !","text":"<p>Inside Fast2, the map design is now pretty straightforward, given our ideas are rather clear in terms of the mission the overall order of the operations.</p> <p>The map is even quite close to the 3 steps detailed earlier. The DispatchingArchive task just needs to be preceeded by a MimeTypeFinder task to highlight the archive format (here the ZIP extension is correct, but you could deal with archives without any extension, or mis-identified format).</p> <p>That way, we end up with 4 tasks :</p> <ul> <li>LocalSource, to collect the documents from local storage,</li> <li>MimeTypeFinder, to assert the archive file format,</li> <li>DispatchingArchive, to open up the ZIPs,</li> <li>JSTransform, to focus on the JSONs and parse its content.</li> </ul> <p></p> <p>Although the configuration of the 3 first tasks can be easily guessed, the JSTransform may need some extra consideration: the focus on the JSON content of the ZIP content of the document of the punnet (see where we are heading, here ? \ud83d\udc40) plus the parsing phase all happen here.</p> <p>The base script for this task (as it is presented here) almost suits our need, except a minor tweaking to reach down the subcontent:</p> <pre><code>// First, get the document\nvar doc = punnet.getDocumentList().get(0);\n\n// get JSON sub-content of ZIP-content of the document\nvar zipContent = doc.getContentSet().getContent().get(0);\nvar jsonContent = zipContent.getSubContents().get(1); // empirical decision, PDF comes first\nvar bytes = manager\n  .getPunnetContentFactory()\n  .getContentAsByteArray(jsonContent);\n\nvar String = Java.type(\"java.lang.String\");\nvar lines = new String(bytes);\n\n// Then, parse this fragment as JSON\nvar jsonObject = JSON.parse(lines);\n\n// Fetch all properties from existing fragment and create them as Document data\nfor (pty in jsonObject)\n  doc.getDataSet().addData(pty, \"String\", jsonObject[pty]);\n</code></pre> <p>You might even bring it further, with content deletion or architectural changed of the punnet (e.g. bringing the PDF content as direct content in the punnet, while deleting the ZIP details as they are no longer required).</p> <p>Head out now to the Run screen, start your campaign and just... enjoy !</p> <p>At the latest stage of your workflow, the document dataset is filled with the properties found in the JSON and integrated as metadata.</p> <pre><code>\"data\": {\n    \"absoluteParentPath\": \"G:/path/to/folder\",\n    \"absolutePath\": \"G:/path/to/folder/ZIP_archive.zip\",\n    \"agency\": \"Agency_name\",\n    \"canExecute\": true,\n    \"canRead\": true,\n    \"canWrite\": true,\n    \"contractNumber\": \"0121443-01\",\n    \"customerNumber\": \"658217041\",\n    \"docType\": \"Bill\",\n    \"fileName\": \"ZIP_archive.zip\",\n    \"fiscalYear\": \"2016\",\n    \"lastModified\": {\n        \"type\": \"Date\",\n        \"value\": \"Tue Apr 05 11:50:08 CEST 2022\"\n    },\n    \"length\": {\n        \"value\": \"82009\"\n    },\n    \"mimeType\": \"application/zip\",\n    \"operationDate\": \"20170523000000\",\n    \"treatmentType\": \"Archiving\"\n},\n\"documentId\": \"ZIP_archive.zip\",\n\"folders\": [...]\n</code></pre>"},{"location":"cookbooks/from-zip-to-punnet/#fast2-1-zip-0","title":"\ud83d\udc4f Fast2: 1, ZIP: 0","text":"<p>Congrats, you've made it ! From ZIP archives as input, you now end up with a usable PDF file, ready for OCR or conversion, and its metadata.</p> <p>If this use-case echoes your early needs, other tasks can be tied to this map to reach a higher level of complexity characteristic of real-world migration projects.</p>"},{"location":"cookbooks/jdbc-for-sql/","title":"JDBC : How to link Fast2 and SQL DB","text":"<p>To extract from or inject in a SQL DataBase, Fast2 use JDBC as a connector with SQL.</p>"},{"location":"cookbooks/jdbc-for-sql/#requirements","title":"Requirements","text":"<p>To use JDBC you must download the library related to your SQL DataBase.</p>"},{"location":"cookbooks/jdbc-for-sql/#jdbc-and-sqlserver-2019","title":"JDBC and SQLServer 2019","text":"<p>To begin, download the JDBC Driver for SQLServer</p> <p>You must choose the right version for your JDK !</p> <p>You have two ways to check it :</p> <ol> <li> <p>From a command line:</p> <pre><code>echo %JAVA_HOME%\n</code></pre> </li> <li> <p>Or, check it in your Fast2: <code>FAST2_HOME/config/env.properties</code></p> </li> </ol> <p>After that you can add:</p> <ul> <li>The .jar file in your Fast2: <code>FAST2_HOME/Worker-libs/</code></li> <li>The .dll in you java folders <code>java/java-version/jre/bin</code></li> </ul> <p>Use the SQL Server Configuration Manager to start the TCP port.</p>"},{"location":"cookbooks/jdbc-for-sql/#example-injection-on-a-sql-database","title":"Example: Injection on a SQL DataBase","text":"<p>For the educational aspect of this topic, let us take this map as an example</p> <p></p> <p>and consider this table to inject in:</p> <pre><code>CREATE TABLE table_test_connection\n(\n    column_A int primary key,\n    column_B varchar(100)\n)\n</code></pre>"},{"location":"cookbooks/jdbc-for-sql/#how-to-configure-the-sqlstatementtask","title":"How to configure the SQLStatementTask","text":"<p>Basically, two fields are mandory:</p> <ul> <li> <p>The JDBC link to establish the connection between Fast2 and SQLServer. To generate it, use the Microsoft Documentation</p> <p></p> <p>For example, you can use :</p> <pre><code>jdbc:sqlserver://localhost;databaseName=demo;encrypt=false;integratedSecurity=true;\n</code></pre> <p>If you do not want to put your credentials in the login URL, you can encrypt your password by entering your credentials by filling in the fields below.</p> <p></p> </li> <li> <p>The query to insert or update your database.</p> <pre><code>INSERT INTO table_test_connection (column_A, column_B) VALUES ('${punnetId}', \"test\");\n</code></pre> <p></p> </li> </ul> <p>Now let's start your Fast2 map and check that your table has new values !</p> <pre><code>SELECT * from table_test_connection;\n</code></pre> <p></p>"},{"location":"cookbooks/jdbc-for-sql/#fast2-1-jdbc-sql-0","title":"\ud83d\udc4f Fast2: 1, JDBC &amp; SQL: 0","text":"<p>Congrats, you've made it !  Now you can also use the JDBC connection for other tasks such as SQLMultiQueryTask or SQLSource.  In addition to inserting or updating your database, you can also use these tasks to remove the contents of your tables !</p>"},{"location":"cookbooks/js-sort-documents/","title":"Js sort documents","text":"<p>As we have seen before in the punnet structure, punnets can be composed with several different documents, each one of them embedding its own data and values.</p> <p>Whether it be for the purpose of processing order of these documents or any other operation requiring these same documents to be sorted in a different order, the catalog provides sufficient tooling to tackle this challenge.</p> <p>For the matter, we will consider having to sort the documents based on a <code>Date</code> data, which will go by the name of \"creation_date\".</p>"},{"location":"cookbooks/js-sort-documents/#where-do-we-come-from","title":"\ud83e\uddd0 Where do we come from ?","text":"<p>For the educational aspect of this topic, let us consider a punnet gathering several documents, all with the same data : <code>creation_date</code>, currently <code>String</code>-typed.</p> <p>Our punnet would look like this:</p> <pre><code>\u251c\u2500 Punnet\n\u2502     \u251c\u2500 document_1\n\u2502     \u2502       \u2514\u2500 dataset\n\u2502     \u2502             \u251c\u2500 creation_date=03/3/2020 3:03:03 PM\n\u2502     \u2502             \u2514\u2500 ...\n\u2502     \u251c\u2500 document_2\n\u2502     \u2502       \u2514\u2500 dataset\n\u2502     \u2502             \u251c\u2500 creation_date=01/1/2020 1:01:01 PM\n\u2502     \u2502             \u2514\u2500 ...\n\u2502     \u251c\u2500 document_3\n\u2502     \u2502       \u2514\u2500 dataset\n\u2502     \u2502             \u251c\u2500 creation_date=02/2/2020 2:02:02 PM\n\u2502     \u2502             \u2514\u2500 ...\n\u2502     \u2514\u2500 ...\n\u2514\u2500 ...\n</code></pre> <p>As we can see, the correct order should be document_2, then document_3 and finally document_1.</p>"},{"location":"cookbooks/js-sort-documents/#where-to-go","title":"\ud83e\udd14 Where to go ?","text":"<p>At a glance, we are just couple steps away from sorting our documents : we need to go over all documents, dig into their dataset and retrieve the value of the sorting criteria.</p> <p>However we need to go through a String-to-Date conversion so the sorting will be done correctly over datetimes values, instead of alphabetical values.</p> <p>Check</p> <p>We will just reorganise all the documents within the punnet, they will be considered like tiles to rearrange, but we need not to mix their own data up (for obvious data integrity reasons).</p>"},{"location":"cookbooks/js-sort-documents/#way-to-go","title":"\ud83d\ude80 Way to go !","text":"<p>The JSTransform task will be our hobbyhorse here since it offers the ability to handle the punnet at a pretty low cost in terms of performance and setup.</p>"},{"location":"cookbooks/js-sort-documents/#javascript-elaboration","title":"\u2697\ufe0f JavaScript elaboration","text":"<p>You will need to add a new JSTransform task right after any task in your workflow have the punnet with all the documents (ex/ a ContentExtractor with all versions of a document extracted).</p> <p>This JavaScript-ish task will be configured with the following script :</p> <pre><code>// Java types required for Java objects\nvar SimpleDateFormat = Java.type(\"java.text.SimpleDateFormat\");\nvar Document = Java.type(\"com.fast2.model.punnet.Document\");\nvar Collections = Java.type(\"java.util.Collections\");\n\n// Global parameters\nvar dataToSort = \"creation_date\";\nvar dateFormat = \"MM/d/yyyy h:mm:ss aa\";\n\nvar formatter = new SimpleDateFormat(dateFormat);\n\nvar compareByDate = function (doc1, doc2) {\n  try {\n    return formatter\n      .parse(doc1.getDataSet().getDataValue(dataToSort))\n      .compareTo(formatter.parse(doc2.getDataSet().getDataValue(dataToSort)));\n  } catch (e) {}\n  return 0;\n};\n\nCollections.sort(punnet.getDocuments(), compareByDate);\n</code></pre> <p>Explanations :</p> <ul> <li>L7 : the data which you want to sort, in our case the <code>creation_date</code></li> <li>L8 : the date format we deduced from the <code>String</code> value of the previous data </li> <li>L12-L17 : we need to parse the value as date, to compare the date as so instead of regular <code>String</code> values (which could be too approximative) </li> </ul> <p>The output of this task will be the same documents in the punnet, just ordered by creation date ascending.</p> <p></p> <p>Head out now to the Run screen, and start your campaign.</p>"},{"location":"cookbooks/js-sort-documents/#result","title":"\ud83c\udfc1 Result","text":"<p>At the latest stage of your workflow, the document dataset is filled with the properties found in the JSON and integrated as metadata.</p> <pre><code>\u251c\u2500 Punnet\n\u2502     \u251c\u2500 document_2\n\u2502     \u2502       \u2514\u2500 dataset\n\u2502     \u2502             \u251c\u2500 creation_date=01/1/2020 1:01:01 PM\n\u2502     \u2502             \u2514\u2500 ...\n\u2502     \u251c\u2500 document_3\n\u2502     \u2502       \u2514\u2500 dataset\n\u2502     \u2502             \u251c\u2500 creation_date=02/2/2020 2:02:02 PM\n\u2502     \u2502             \u2514\u2500 ...\n\u2502     \u251c\u2500 document_4\n\u2502     \u2502       \u2514\u2500 dataset\n\u2502     \u2502             \u251c\u2500 creation_date=03/3/2020 3:03:03 PM\n\u2502     \u2502             \u2514\u2500 ...\n\u2502     \u2514\u2500 ...\n\u2514\u2500 ...\n</code></pre>"},{"location":"cookbooks/js-sort-documents/#lets-sum-up","title":"\ud83d\udc4f Let's sum up","text":"<p>We can bring this scenario further by sorting based on 2 or more data, regular <code>int</code> values or else.</p> <p>Since its just sorting, you might want to sort the documents in the reverse order. In this example, we left the default behavior (ascending), but a minor tweak to the previous script and you'll be good to go !</p> <p>If this use-case echoes your early needs, other tasks can be tied to this map to reach a higher level of complexity characteristic of real-world migration projects.</p>"},{"location":"cookbooks/punnet_basics/","title":"Learn how to deal with punnets","text":"<p>Since the punnet is the pivot format into Fast2, all documents, folders and metadata can only be manipulated through this object. Here are the basics for an appropriate understanding of the Java API of the punnet object.</p> <p>For a better understanding of the following, the punnet structure needs to be clearly visualized. If required, go back to the definition of such an object in Fast2.</p>","tags":["boilerplate","punnet","content","java"]},{"location":"cookbooks/punnet_basics/#creating-a-punnet","title":"Creating a punnet","text":"<p>The creation of a punnet is an operation which should only take place in source tasks, as all other tasks only process punnets given to the as input.</p> <p>To create a punnet:</p> <pre><code>Punnet myPunnet = task.getManager().getPunnetFactory().createEmptyPunnet();\n</code></pre> <p>The punnet ID will be automatically computed by Fast2, following certain models based on the task producing the punnet. This ID can be useful to track the punnet over different tasks, as its value will remain unchanged.</p>","tags":["boilerplate","punnet","content","java"]},{"location":"cookbooks/punnet_basics/#id","title":"ID","text":"<p>To force the ID of the punnet, a <code>String</code> value can be passed as argument.</p> <pre><code>myPunnet.setPunnetId(PunnetId.id(\"myId\"));\n</code></pre> <p>Retrieving the ID of the punnet just goes as so:</p> <pre><code>PunnetId punnetId = myPunnet.getPunnetId();\n</code></pre>","tags":["boilerplate","punnet","content","java"]},{"location":"cookbooks/punnet_basics/#sending-a-punnet-into-the-campaign","title":"Sending a punnet into the campaign","text":"<p>The source tasks are responsible for not only create the punnet, but also send it in the migration workflow.</p> <p>Once the punnet is created and its components are correctly formed, the last step of the source will rely on the <code>Consumer</code> input parameter of the main method of the connector :</p> <pre><code>consumer.push(myPunnet);\n</code></pre>","tags":["boilerplate","punnet","content","java"]},{"location":"cookbooks/punnet_basics/#documents","title":"Documents","text":"<p>Punnets may or may not embed document(s).</p> <p>Several-documents cases could be like:</p> <ul> <li>the migration strategy is to group in a punnet all documents stored in a given folder</li> <li>the migration strategy is to group in a punnet all documents matching a criterion (depending of the configuration fields of the source)</li> <li>a punnet embed a released version of a document and all its past versions.</li> </ul> <p>Whatever the reason, the documents can be added to the punnet in two ways:</p> <ol><li> The document was already existing:  <pre><code>Document myDoc = myPunnet.addDocument(myDocument);\n</code></pre> </li><li> The document needs to be created, which can be done on the fly: <pre><code>Document myDoc = myPunnet.addDocument(DocumentId.id());\n</code></pre> </li></ol> <p>All documents can be access via the list of all documents stored in the punnet:</p> <pre><code>List&lt;Document&gt; myDocuments = myPunnet.getDocuments();\n</code></pre> <p>As any Java list, documents can be removed as long as the correct index is provided.</p> <p>For more information concerning the documents, head out to the dedicated section.</p>","tags":["boilerplate","punnet","content","java"]},{"location":"cookbooks/punnet_basics/#dataset","title":"DataSet","text":"<p>The purpose of the punnet dataset is to store metadata not closely related to any folder or document specifically.</p> <p>This dataset can be access via an usual getter:</p> <pre><code>DataSet myDataset = myPunnet.getDataSet();\n</code></pre> <p>A punnet is built with an empty dataset by default.</p> <p>For more information concerning the dataset, head out to the dedicated section.</p>","tags":["boilerplate","punnet","content","java"]},{"location":"cookbooks/punnet_basics/#folders","title":"Folders","text":"<p>The punnet folderset can be used for folders-only migration and well as folder-as-a-whole ones, where a punnet will contain a folder reference and all the documents previously filed into this folder.</p> <p>A folderset can contains one or several folder references, and is access as follows:</p> <pre><code>FolderSet myFolders = myPunnet.getFolders();\n</code></pre> <p>A punnet is built with an empty folderset by default.</p>","tags":["boilerplate","punnet","content","java"]},{"location":"cookbooks/upload-content-and-metadata-in-s3/","title":"Upload content and metadata in a S3 bucket","text":"<p>Injecting metadata into an S3 bucket needs to be done differently that what could be done with a regular content management system where a document is a set of contents and metadata. This constraint is even enforced when we upload documents into a SnowBall drive.</p> <p>Let's quickly review here how storing both content and metadata in a S3 bucket can be achieved with Fast2.</p>","tags":["xml","pattern","document","serialization","AWS S3"]},{"location":"cookbooks/upload-content-and-metadata-in-s3/#where-do-we-come-from","title":"\ud83e\uddd0 Where do we come from ?","text":"<p>Let's suppose just extracted a document from a well known CMS solution, which created a regular punnet with a set of metadata and one content (ex/ a PDF file).</p> <p>Injecting this document directly into a S3 bucket would just create a new binary file with the ID of the document as the name of the file in the bucket, and that would be all. Each and every metadata would have been lost in the way.</p>","tags":["xml","pattern","document","serialization","AWS S3"]},{"location":"cookbooks/upload-content-and-metadata-in-s3/#where-to-go","title":"\ud83e\udd14 Where to go ?","text":"<p>To counteract this loss, we need to get Fast2 to add these metadata as a content too.</p> <p>This can easily be done with the off-the-shelf tasks of Fast2, namely the PunnetSerializer task and the AlterDocumentContent task. Respectively, these tasks will create a new binary file with the metadata as XML inside, according to the Fast2 data model which you can find here.</p> <p>In the end, we expect the bucket to have 2 contents for 1 document :</p> <ul> <li>1 content in PDF, the original content of our document, whose name is the ID of the document with the correct extension (<code>.pdf</code>) </li> <li>1 content in XML, filled with the metadata of the original document, whose name is the ID of the document with the correct extension (<code>.xml</code>)</li> </ul>","tags":["xml","pattern","document","serialization","AWS S3"]},{"location":"cookbooks/upload-content-and-metadata-in-s3/#way-to-go","title":"\ud83d\ude80 Way to go !","text":"<p>Let's first create an XML file out of the metadata of the punnet, attach this created file to the document, and inject them later into our bucket.</p>","tags":["xml","pattern","document","serialization","AWS S3"]},{"location":"cookbooks/upload-content-and-metadata-in-s3/#from-metadata-to-xml","title":"\u2697\ufe0f From metadata to XML","text":"<p>Once our document fully extracted from the source CMS (via the tasks Source and ContentExtractor), we have the content and the metadata in a punnet.</p> <p>The PunnetSerializer will convert the in-memory dataset record into XML format, in the default storage architecture (namely <code>$FAST2_HOME/files/&lt;campaign&gt;/&lt;task&gt;/&lt;documentId&gt;</code>). This path is the one we will have to provide in the next step of the workflow, which is the AlterDocumentContent task.</p> <p>In our case, the pattern for the content to add is : <pre><code>./files/myCampaign/PunnetSerializer/${documentId}\n</code></pre> </p> <p>Eventually, the migration workflow will end up looking like this :</p> <p></p> <p>However, if we run it, we see the following result in the destination S3 bucket :</p> <p></p> <p>This can be explained by the fact that, when injecting, the S3 connector will upload both contents with the same name (which happens to be the documentId of the document). And as you might guess, 2 different documents with the same name induces the oldest one to be overwritten by the second.</p> <p>We are just a tweak away of having these 2 contents alongside though, and that will need to happen in the AWSInjector connector.</p>","tags":["xml","pattern","document","serialization","AWS S3"]},{"location":"cookbooks/upload-content-and-metadata-in-s3/#differentiate-the-2-contents","title":"\u2702\ufe0f Differentiate the 2 contents","text":"<p>Here, the tricky part is to identify the type of content we are dealing with.</p> <p>We know that the original document is a PDF and the PunnetSerializer generates an XML. So let's know Fast2 that information by creating the mimetype metadata on each content (as shown on the map screenshot earlier).</p> <p>From now on, we can use a pattern to append the extension based on the content type value, accessing the <code>${CurrentContainer}</code> object.</p> <p>The final pattern to use as \"Destination file name\" from the injector configuration is the following : <pre><code>${documentId}.${CurrentContainer.mimeType.substring(CurrentContainer.mimeType.indexOf(\"/\")+1)}\n</code></pre> In the task configuration, the field to update is the \"Destination file name\" : </p>","tags":["xml","pattern","document","serialization","AWS S3"]},{"location":"cookbooks/upload-content-and-metadata-in-s3/#result","title":"\ud83c\udfc1 Result","text":"<p>This little edit will get Fast2 to build the final name on the fly for each content, and this is exactly what we needed to get the final result in our bucket :</p> <p></p>","tags":["xml","pattern","document","serialization","AWS S3"]},{"location":"cookbooks/upload-content-and-metadata-in-s3/#lets-wrap-up","title":"\ud83d\udc4f Let's wrap up","text":"<p>So now we have both contents and metadata with same name but different extension in our destination bucket, we could extract them easily with the AWSContentSource task by enabling the 2 options for such :</p> <li>Process S3 objects as punnets (ie. metadata as XML and associated content)</li> <li>Extract punnet contents (if required)</li> <p></p>","tags":["xml","pattern","document","serialization","AWS S3"]},{"location":"getting-started/","title":"Getting started with Fast2","text":"<p>This first section is your go-to resource for understanding and harnessing the power of Fast2 to build efficient and seamless document migration workflows. Whether you're new to the product or an experienced user, this documentation will provide you with all the necessary information to get started and create effective document migration workflows.</p> Overall Concepts <p>The \"Overall Concepts\" section provides a comprehensive overview of the principles and concepts behind Fast2. Gain a deep understanding of the underlying architecture, core functionalities, and key components that make Fast2 an industry-leading solution for document migration workflows. This section will help you grasp the fundamental concepts necessary to effectively use and configure the product.</p> Installation Guide <p>In the \"Installation Guide\" section, you'll find detailed instructions on how to install and set up Fast2. This step-by-step guide will walk you through the installation process, including system requirements, software dependencies, and configuration settings. By following the instructions provided, you'll have Fast2 up and running in no time.</p> Creating Workflows <p>The \"Creating Workflows\" section is your go-to resource for building powerful document migration workflows using Fast2. Explore the various components, features, and configurations available to create customized workflows tailored to your specific requirements. This section will provide you with detailed instructions, examples, and best practices to guide you through the process of designing, configuring, and executing workflows using Fast2.</p>"},{"location":"getting-started/authentication/","title":"Authentication","text":""},{"location":"getting-started/authentication/#account-registration","title":"Account registration","text":"<p>When reaching the Fast2 UI for the first time, you will be prompted to create an account. </p> <p>To create a new account in Fast2, follow these steps:</p> <ol> <li> Fill in the Required Information: Enter the following details: First Name: Enter your first name. Last Name: Enter your last name. Email: Provide a valid email address. This will be used for login. Password: Choose a strong password. Remember that your password is crucial for securing your account. Confirm Password: Re-enter the same password to confirm it matches. </li> <li> Review the Password Guidelines: Ensure your password meets the security requirements: At least 8 characters long and maximum 16 characters long. </li> <li> Submit Your Information: Click on the \"Creating my account\" button to complete the registration. </li> </ol> <p>Warning</p> <p>It is essential to remember your password. Fast2 does not offer password recovery for forgotten passwords.</p>"},{"location":"getting-started/authentication/#login","title":"Login","text":"<p>Once you have registered, you can log in to the Fast2 UI using your email and password. </p>"},{"location":"getting-started/create-workflow/","title":"Create a map","text":"<p>Warning</p> <p>Fast2 does not check the integrity of workflows built by the user. It is the responsibility of the latter not to build incoherent maps.</p> <p>The very first step of every migration is to start building the workflow. Since Fast2 is an ETL, the sequence of all tasks needs to meet this philosophy :</p> <ol> <li>first you extract/retrieve the content,</li> <li>then you perform any required transformation to get the content compliant with the target system,</li> <li>finally you load the content and/or its metadata.</li> </ol> <p>With Fast2 started, go to the UI (default address http://localhost:1789/index.html). From here, you can create a new map browse your machine to import an existing one.</p> <p>Warning</p> <p>A map must start with a Source task, picked up from the list in the task configuration section.</p> <p>Any change about the map configuration/structure needs to happen in one place only : the design place. Changing the map name, adding or configuring either tasks or links, all these operations will take place in the Design Place.</p> <p>To add any task to the map, toggle the right panel and search for the task. The dynamic search bar filters out all matching task based either on their name or description. To select a task, click on its name and it will appear in the design area. You will be able to configure it straight afterwards, since the right panel now displays the configuration fields of the task you just added.</p> <p></p> <p>For task and link configuration, please head towards the task configuration and link configuration sections.</p>"},{"location":"getting-started/create-workflow/#set-and-edit-map-name","title":"Set and edit map name","text":"<p>The map name can either be set from the pop-up when creating/duplicating a map, or changed later on.</p> <p>Note</p> <ol> <li>A map name cannot be empty.</li> <li>Every map must have a single and unique name, whatever its version.</li> </ol> <p>When the map is displayed, the name can be updated by directly from the top banner. Once its name edited, the map needs to be saved, otherwise the name will remain as was.</p>"},{"location":"getting-started/create-workflow/#download-a-map","title":"Download a map","text":"<p>Any map can be downloaded directly through the Fast2 UI. Select the map you want then click on download icon located at the top banner.</p> <p>You can also reach maps from the installation folder of Fast2, in the <code>/maps</code> folder.</p> <p>Fast2 also stores maps into the database instance.</p>"},{"location":"getting-started/create-workflow/#upload-a-map","title":"Upload a map","text":"<p>\u2139\ufe0f Note: When uploading a map locally using the <code>/maps</code> folder, only files ending with <code>.map.xml</code> will be taken into account. Other files will be ignored.</p> <p>V1 maps are compatible with the V2, but not the other way around. V2 maps are compatible with the V2025.</p> <p>Click on the browse icon at the top banner and select the map to upload. Fast2 will automatically switch to the freshly uploaded map.</p> <p>If you upload multiple times the same map, Fast2 will create a new copy of the map by putting at the end the next suffix <code>_V-n</code>, where n is the version number of your map.</p>"},{"location":"getting-started/create-workflow/#delete-a-map","title":"Delete a map","text":"<p>Info</p> <p>Maps can only be deleted from the Configuration Place</p> <p>To go on the configuration place, click on the gear icon at the top right banner. Use the checkboxes to select the map(s) you want to delete then click on the bin icon.</p> <p>However, a backup copy is still saved in the database in case you want to restore it later.</p>"},{"location":"getting-started/create-workflow/#tasks","title":"Tasks","text":"<p>Info</p> <p>Tasks can only by added, configured and removed from the Design Place.</p>"},{"location":"getting-started/create-workflow/#add-task","title":"Add task","text":"<p>To add any task to the map, toggle the right panel and search for the task. The dynamic search bar filter all task matching based either on their name or description. Then select a task by clicking on its name. It now appears in the design area. You will be able to configure it straight afterwards, since the right panel now displays the configuration fields of the task you just added.</p> <p></p>"},{"location":"getting-started/create-workflow/#configure-task","title":"Configure task","text":"<p>To configure a task, hover it in the design area. When it gets dark grey, hit the gear icon : the task is now highlighted and the right panel displays the configuration fields for you to fill.</p> <p></p>"},{"location":"getting-started/create-workflow/#delete-task","title":"Delete task","text":"<p>The deletion of a task is a 2-step long procedure. To delete a task, hover it in the design area. When it gets dark grey, click on the trash icon. On the confirmation pop-up, make sure you perform the operation on the task you really intended to delete.</p> <p></p>"},{"location":"getting-started/create-workflow/#links","title":"Links","text":"<p>Info</p> <p>Links can only be added, configured and removed from the Design Place.</p>"},{"location":"getting-started/create-workflow/#add-link","title":"Add link","text":"<p>To add a link between two tasks, click and hold the orange link of the originator, and drag it onto the receiver task widget. One task can have multiple input and output links.</p> <p>A link can only be added between two tasks. That implies the deletion of any link attached to a specific task once this one is deleted.</p> <p></p> <p>Warning</p> <p>Two tasks cannot be linked both ways.</p>"},{"location":"getting-started/create-workflow/#configure-link","title":"Configure link","text":"Link condition Details PatternCondition Set specific condition with java language Otherwise Punnet which doesn't match other conditions will pass Consider using when a task has at least 2 multiple output links AlwaysTrue All punnets will pass, no matter what AlwaysFalse All punnets will be blocked, no matter what PunnetInException All punnets in exception will pass ContentMimeTypeMatches Filter depending on document mimetype NumberOfDocuments Filter depending on the number of document carried by the punnet PunnetHasData If an expected data exists the punnet will pass (punnet level) DocumentHasData If an expected data exists the punnet will pass (document level) Or Use multiple link conditions and if one of them is ok, the punnet will pass And Use multiple link conditions and if all of them are ok, the punnet will pass Not Use any link condition but with negatively"},{"location":"getting-started/create-workflow/#delete-link","title":"Delete link","text":"<p>Deleting a link is similar to deleting a task, 2-step long procedure. To delete a link, hover it in the design area. When it gets dark grey, click on the trash icon. On the confirmation pop-up, make sure you perform the operation on the link you really intended to delete.</p> <p></p>"},{"location":"getting-started/create-workflow/#run-a-map","title":"Run a map","text":"<p>Info</p> <p>A map can only be executed from the Run Place</p> <p>From the toggle button you are able to switch between the Design and the Run places.</p> <p>Next to this toggle button, you'll find the control buttons. It's with these three buttons that you will be able to interact with the campaign.</p> <p></p> <p>From left to right :</p> <ul> <li>Run as new: When a campaign is run for the first time , a pop-up will ask you to put a name. Otherwise, a new campaign is created keeping the original campaign name and incrementing the <code>_Try</code> number.</li> <li>Rerun: Fast2 will run the same campaign again. No any campaign will be created.</li> <li>Stop: For a running campaign, you have the opportunity to stop its process. Notice that the stop button becomes a Resume button once the campaign is stopped.</li> </ul> <p>Info</p> <p>A map must be run as new for the first time</p> <p>When the map has at least been run once as new it is possible to replay a new run over it without necessarily doing as new. To do so, click on the blue play button surrounded by an arrow. Results for all replayed campaigns will be aggregated.</p> <p>You can see in the table below the allowed actons depending on the campaign status.</p> Campaign Status Action(s) allowed Started Stop Stopped Start as new Resume Undefined Start as new Rerun Finished Start as new Rerun"},{"location":"getting-started/create-workflow/#new-campaign-name","title":"New campaign name","text":"<p>You can create a new series of campaigns with a new name for a given campaign by modifying the campaign name textBox. If the new campaign name does not already exist you are automatically forwarded to the new one and ready to run it. It's mainly a creation than a modification.</p> <p>You cannot change the campaign name for an already existing one. The modification is aborted and the original name is putted back.</p>"},{"location":"getting-started/create-workflow/#example","title":"Example","text":"<p>Supposing you have a map named Production. You've decided to run this map and click on the <code>Run as new</code> button. Put the name of your campaign in the pop-up textBox, for example prodCampaign, and click on <code>Start</code>.</p> <p>Fast2 will run your campaign but renaming it in prodCampaign_Try1. By hitting the <code>Run as new</code> again the pop-up will not show again since the map owns already few campaigns, one actually. Instead, a new campaign will be run and called prodCampaign_Try2 and so on.</p> <p>Now, imagine that you want to rename your campaign with the name newCampaignName. Click on the campaign textBox, put your new name. You're gonna be redirected to a run place with your freshly created campaign. Hitting the <code>Run as new</code> and you will find you're campaign newCampaignName_Try1 running.</p> <p>At this moment you have two series of campaigns related to your map Production.</p>"},{"location":"getting-started/create-workflow/#map-versioning","title":"Map versioning","text":""},{"location":"getting-started/create-workflow/#benefits-of-versioning","title":"Benefits of versioning","text":"<p>Fast2 allows you to create multiple versions of the same map. This feature provides several significant benefits:</p> <ol> <li> Change Management and Tracking Historical Record: Versioning allows you to maintain a record of all changes made to a map. This is critical for understanding how workflows have evolved over time. Auditability: Regulatory or internal compliance often requires a clear audit trail. Versioned maps make it easy to demonstrate changes and decisions. </li> <li> Flexibility for Iteration Testing New Versions: You can test new map configurations while maintaining the stability of the current version in production. This reduces risk and allows for experimentation. Rollback Capabilities: If a new version introduces issues, you can quickly revert to a previous version. </li> <li> Support for Continuous Improvement Incremental Optimization: Maps can be improved incrementally while keeping a reliable baseline version in production. Data-Driven Updates: Analyze performance data from different versions to identify which version works best. </li> </ol> <p>Seamless version creation for the user: they have nothing to do and cannot create a version themselves (there is no manual version creation). The version number is incremented automatically. Current version you are working on is always available in the top right corner. </p>"},{"location":"getting-started/create-workflow/#map-versions-history","title":"Map versions history","text":"<p>You can access the map versions history by clicking on the <code>Maps Overview</code> button in the left navigation menu. If a map has several versions, you can expand and see all the versions by clicking on the last version. Note that current version and previous versions are highlighted differently (green and orange). </p> <p>Orange color for previous versions means that they cannot be edited. If you decide to view a previous version, it will be opened in read-only mode. </p> <p>For any reason, if you need to work and make changes to a previous version, you can duplicate it and create a new map from it. </p>"},{"location":"getting-started/create-workflow/#automatic-save-feature","title":"Automatic Save Feature","text":"<p>The automatic save functionality ensures that changes made to the workflow and its configurations are saved seamlessly, enhancing reliability and reducing the risk of data loss. Below are the differents statuses of the save button:</p> <ul> <li>Not saved: The map has not been saved yet (Opensearch database is not reachable). </li> <li>Saved: The map has been saved successfully. </li> <li>Saving...: The map is currently being saved. </li> </ul>"},{"location":"getting-started/create-workflow/#when-does-auto-save-trigger","title":"When Does Auto Save Trigger?","text":"<p>The auto save is triggered under the following conditions:</p> <ol> <li> Configuration Changes: Any changes made to tasks or links configuration fields are saved as soon as the focus is lost from the edited field.  </li> <li> Tasks and Links: Adding or deleting a task triggers an automatic save. Adding or deleting a link between tasks also triggers an automatic save. </li> <li> Task Movements: Moving tasks within the map also triggers an automatic save. </li> </ol>"},{"location":"getting-started/create-workflow/#what-gets-saved","title":"What Gets Saved?","text":"<p>The following elements are included in the automatic save process:</p> <ul> <li>The tasks within the map, including their configuration settings and positions.</li> <li>The map name.</li> <li>The shared objects within the map.</li> <li>The links between tasks.</li> </ul>"},{"location":"getting-started/create-workflow/#specific-case-map-shared-objects","title":"Specific Case: Map Shared Objects","text":"<p>Modifications to a shared object within the Shared Objects place also trigger an automatic save, not limited to edits made in the main Edit place. </p> <p>This ensures that all updates, regardless of where or how they are performed, are reliably captured.</p>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<p>The installation of Fast2 requires a few environment specifications to run properly :</p> What Description RAM 8GB+ We highly recommend having at least 8GB. When switching to production environments, 16GB or 32GB will be required since more documents will be handled at once, and heavy tasks (e.g. conversion, extraction) might get short on resources. Processor 8 CPUs Processor capabilities need to be aligned with migration requirements, such as data mapping, content conversion and heavy I/O. Storage 128GB+ Although the contents dealt by Fast2 will be temporarily stored (and deleted afterwards if asked), the server needs enough storage for the files/contents alongside the database tracking all the migration information. Java JDK-8, JDK-11 Any provider will fit (Oracle, OpenJDK, etc). If you have multiple JDK/JRE already installed, specify the correct one in the <code>./config/env.properties</code> file. OS Windows\u00a07+, Linux All versions of Windows 7+ are supported. All common distros of Linux are supported (Ubuntu, RedHat, CentOS, etc)Power architecture are supported as well (except the ones running in AIX), but only Java parts will work seamlessly whereas third-party software (e.g. imagemagick, libreoffice, etc) might not, as they have not all have been developed for such platforms.  Although the broker will not run correctly on an Windows 2003, a worker can still run on it, remotely, and communicate with a broker installed on a more recent version. Bandwidth 1GB The more calls, payloads, and contents Fast2 will have to deal with, the bigger the network bandwidth must be to reduce latency. If 250-500MB might do for lower environments, we recommend 1GB for Production environments. <p>While setting up the production server for Fast2, make sure to scale the Fast2 machine accordingly. You may need to increase the allocated memory for both the broker and the background database. If you planned to deal with campaigns of a few millions of documents, setting 8GB of memory for the broker and 8GB for the database as well is a good starting point.</p> <p>Warning</p> <p>If you decide to go for a custom Elasticsearch database, make sure to confirm the compatibility with your environment at Elasticsearch Support Matrix.</p>"},{"location":"getting-started/installation/#fast2-packages","title":"Fast2 packages","text":"<p>The Fast2 distribution you need depends on your target environment. It exists three way to deploy a Fast2 :</p> <p>  On premise: regular package, as an all-in-one zip file  AWS: Standard AMIs  K8S: Docker Images</p> <p>Each distribution ships the following</p> <ul> <li>A broker with one embedded worker and a user interface</li> <li>An additional worker with all tasks catalog</li> <li>A template to create workers with custom tasks</li> </ul>"},{"location":"getting-started/installation/#root-folder-anatomy","title":"Root folder anatomy","text":"Item Purpose  config Configuration files, broker endpoint, Java home  logs Logging files for both broker and worker(s)  maps XML files of all maps accessible from the UI  opensearch-X.Y.Z or elasticsearch-X.Y.Z Either Elasticsearch or OpenSearch  service All files required to start Fast2 as a service  worker-libs/* All libraries and dependencies for tasks executions  fast2-broker-package-X.Y.Z.jar Broker unit  fast2-worker-package-X.Y.Z.jar Worker main unit  startup-broker.bat Binary file for Windows  startup-broker.sh Binary file for Linux  startup-worker.bat Binary file for Windows  startup-worker.sh Binary file for Linux"},{"location":"getting-started/installation/#start-up-sequence","title":"Start-up sequence","text":"<p>When Fast2 is started, either as a standalone application or a service, its different modules share a precisely defined roll-out schedule:</p> <ul> <li>First, the broker and its internal databse are started. The connection between these 2 components has to be effective, otherwise Fast2 will automatically shut down after a couple of attempts to reach the database;</li> <li>The worker is then triggered, and has to register itself to the broker.</li> <li>Finally, the dashboard will be started if asked so, and if the binaries have been detected. First, Fast2 will try to connect to any dashboard instance running on the configured port.</li> </ul> <p>There is no direct connection between the broker and the dashboard. The only exchange area is the Elasticsearch database, as explained in the architecture section.</p>"},{"location":"getting-started/installation/#start-fast2-broker","title":"Start Fast2 Broker","text":"<p>Once the regular Fast2 package is unzipped, Fast2 can be launched right away.</p> <p>Whether Fast2 is launched from the batch file or as a service on your environment, the UI will be available at http://localhost:1789/.</p> <p>By default, Fast2 Broker starts an embedded Elastic Search and an embedded Fast2 Worker.</p> <p>All commands below are to be run under the Fast2 install path (where the Zip has been unzipped).</p>"},{"location":"getting-started/installation/#from-command-line","title":"From command line","text":"Windows Linux <p>Go into the Fast2 install folder, and run :</p> <pre><code>C:\\path-to-fast2\\&gt; startup-broker.bat\n</code></pre> <p>Administrator rights might be required since Fast2 will handle some port communications.</p> <p>The following Linux installation steps work for most of Unix-based sytems. Elasticsearch cannot be started from root user, you will need to create a secondary user to start the database binary alongside your Fast2 process.</p> <p>Once connected as the latter user, start Elasticsearch via its binaries.</p> <p>Then, since you started Elasticsearch manually, disable the command triggering Fast2 to start the embedded Elasticsearch, from the <code>config/application.properties</code> file :</p> <pre><code>broker.elasticsearch.embedded.enabled=false\n</code></pre> <p>You can now properly execute the following script:</p> <pre><code>$ ./startup-broker.sh\n</code></pre> <p>To end the Fast2 process, just hit <code>Ctrl+C</code> in the command line the startup file opened.</p>"},{"location":"getting-started/installation/#as-service","title":"As service","text":"Windows Linux <p>Go into the Fast2 installation folder, and open the Windows Command Prompt.</p> <p>To install the service :</p> <pre><code>C:\\path-to-fast2\\service\\windows&gt; Fast2_broker_service.exe install\n</code></pre> <p>Your machine may prompt a message asking to download .NET components. Please click [OK] and proceed.</p> <p>Once this command is complete, you should see in your services registory a newly installed Fast2 service. You can start/stop/restart it as any other service, or via the Command Prompt (just replace <code>install</code> in the previous command by start/stop/uninstall/restart/status).</p> <p>The logs of the service will be available from the <code>path-to-fast2\\service\\log</code> folder.</p> <p>There are several ways to create a service under linux distribution. We will do it through systemd. Its major benefit is that it has been the default init system for the majority of linux distributions (Ubuntu, Red Hat, Fedora...).</p> <p></p>"},{"location":"getting-started/installation/#create-a-user-for-fast2","title":"Create a user for Fast2","text":"<p>Since the embedded database cannot be started in sudo mode, you must use an existing user that meets your requirements or create a new one on the Linux machine. This will allow the broker to successfully initiate the database startup</p> <p>Let's condider here our user to be fast2user.</p> <p>Open the <code>./startup-broker.sh</code> file and update the last line to switch users (with <code>su fast2user -c</code>) for the Java command:  </p> <p> Original line <code>\"$JAVA\" -Xmx$BROKER_MAX_MEMORY ... -jar fast2-broker-package-X.Y.Z.jar</code> Your updated line <code>su fast2user -c</code><code>\"$JAVA -Xmx$BROKER_MAX_MEMORY ... -jar fast2-broker-package-X.Y.Z.jar\"</code> </p>"},{"location":"getting-started/installation/#execution-path","title":"Execution path","text":"<p>Edit the <code>ExecStart</code> field from the file <code>service/linux/fast2-broker.service</code>: it must point out to the Fast2 installation path.</p> <pre><code>[Unit]\nDescription=Fast2 Broker vX.Y.Z\n\n[Service]\nEnvironment=\"JAVA_HOME=/home/JDK/bin/java\"\nExecStart=/home/userName/fast2-complete-package-X.Y.Z/startup-broker.sh\nUser=fast2user\nGroup=fast2user\n\n[Install]\nWantedBy=default.target\n</code></pre> <ul> <li>The <code>[Unit]</code> section provides metadata and dependencies for the service.<ul> <li><code>Description</code>: Provides a human-readable description of the service. In this case, the service is named \"Fast2 Broker\".</li> </ul> </li> <li> <p>The <code>[Service]</code> section defines how the service behaves when it is started, stopped, or restarted.</p> <ul> <li> <p><code>Environment</code>: Sets environment variables that the service will use during execution.</p> <p>This line sets the <code>JAVA_HOME</code> environment variable, which is required for the Fast2 Broker service to run. The value is set to <code>/home/JDK/java</code>, which should be the path to the Java installation used by the service. However, the link to Java must be the final link (and not Ubuntu internal link to the Java installation). <pre><code>ubuntu@ip-...:~/2.11.0$ which java\n/usr/bin/java \u274c\n\nubuntu@ip-...:~/2.11.0$ readlink -f $(which java)\n/usr/lib/jvm/java-11-openjdk-amd64/bin/java \u2705\n</code></pre></p> <p>The value to set the <code>JAVA_HOME</code> environment variable will be, in this case, <code>Environment=\"JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64\"</code>.</p> </li> <li> <p><code>ExecStart</code>: Specifies the command that will be executed to start the service. This line specifies the startup command for the Fast2 Broker service. It points to the <code>startup-broker.sh</code> script located in the <code>fast2-complete-package-2.0.0</code> directory. When the service starts, this script is executed.</p> </li> <li><code>User</code>: Specifies the user account under which the service will run. This line indicates that the service should be run under the <code>fast2-user</code> user account. Running services as a non-root user is a security best practice.</li> <li><code>Group</code>: Specifies the group under which the service will run. This line sets the group ownership for the service process to <code>fast2-user</code>. This ensures that the service process has the correct permissions as defined by the user and group.</li> </ul> </li> <li> <p>The <code>[Install]</code> section defines how the service should be installed or integrated with systemd.</p> <ul> <li><code>WantedBy</code>: Specifies the target in which this service should be started. This line indicates that the service should be started as part of the <code>default.target</code>, which is the default system runlevel (usually equivalent to multi-user mode or graphical mode, depending on the system configuration).</li> </ul> </li> </ul> <p></p>"},{"location":"getting-started/installation/#symbolic-link","title":"Symbolic link","text":"<p>Now link it to the <code>/etc/systemd/system</code> directory through a symbolic link.</p> <pre><code>$ sudo ln -s SOURCE TARGET\n\n$ sudo ln -s service/linux/fast2-broker.service /etc/systemd/system\n</code></pre> <p></p> <p>Tip</p> <p>This is the moment where you might want to rename the Fast2 service file in case you have multiple instances of Fast2 installed on the same machine. For this,</p> <ul> <li>rename the file FAST2_HOME/services/linux/fast2-broker.service to FAST2_HOME/services/linux/fast2-broker-2.11.0.service for example</li> <li>run the <code>sudo ln -s ...</code> command with the new name, something like     <pre><code>sudo ln -s service/linux/fast2-broker-2.11.0.service /etc/systemd/system\n</code></pre></li> </ul> <p></p> <p>If the links are broken once they're created, you probably need to put an absolute path for the target as follow ;</p> <pre><code>$ sudo ln -s /home/userName/fast2-complete-package-2.0.0/service/linux/fast2-broker.service /etc/systemd/system\n</code></pre> <p>Next, reload systemd services unit and enable them :</p> <pre><code>$ sudo systemctl daemon-reload\n$ sudo systemctl enable fast2-broker.service\n</code></pre> <p>The terminal should prompt the following message :</p> <pre><code>Created symlink from /etc/systemd/system/default.target.wants/fast2-broker.service to /etc/systemd/system/fast2-broker.service.\n</code></pre> <p></p>"},{"location":"getting-started/installation/#script-uses","title":"Script uses","text":"<p>Test your script by starting it and then checking the status :</p> <pre><code>$ sudo service fast2-broker start\n$ service fast2-broker status\n</code></pre> <p>or</p> <pre><code>$ sudo systemctl start fast2-broker.service\n$ systemctl status fast2-broker.service\n</code></pre> <p>You can restart or stop the service at anytime with the commands :</p> <pre><code>$ service fast2 start | restart | stop | status\n</code></pre>"},{"location":"getting-started/installation/#start-fast2-worker","title":"Start Fast2 Worker","text":"<p>The Broker starts an embedded worker by default.</p>  Windows Linux <p>If you wish to start multiple workers, just hit :</p> <pre><code>C:\\path-to-fast2\\&gt; startup-worker.bat\n</code></pre> <pre><code>./startup-worker.sh\n</code></pre> <p>If the worker and broker are not booted up on the same machine, you need to setup the Broker host name in the worker configuration file. Edit the file <code>config/application.properties</code> and modify <code>broker.host</code> accordingly.</p> <p>You can setup Fast2 Worker as a service the same way you did for the Fast2 Broker. For a worker installed on a Windows machine, you need to edit 2 files :</p> <ul> <li>The <code>Fast2_broker_service.exe</code> file in the <code>service/windows</code> folder has to be renamed to <code>Fast2_worker_service.exe</code></li> <li>The <code>Fast2_broker_service.xml</code> file in the <code>service/windows</code> folder has to be renamed to <code>Fast2_worker_service.xml</code> and requires some changes :<ul> <li>The <code>id</code> tag has to be changed to something different than <code>Fast2</code> in case the broker has already been installed as a service on this machine. For instance,<code>Fast2-worker</code>.</li> <li>The <code>name</code> tag has to be changed to something different than <code>Fast2 Broker</code> to avoid any confusion in case the broker has already been installed as a service on this machine. For instance, <code>Fast2 Worker</code>.</li> <li>The <code>description</code> tag has to be changed to something different than <code>Fast2 Broker vX.Y.Z</code> to avoid any confusion in case the broker has already been installed as a service on this machine. For instance, <code>Fast2 Worker vX.Y.Z</code>.</li> <li>The <code>executable</code> tag has to be changed to point to the <code>startup-worker.bat</code> file which is at Fast2 root level.</li> </ul> </li> </ul> <p>The <code>Fast2_worker_service.xml</code> file will look like this : <pre><code>&lt;service&gt;\n    &lt;id&gt;Fast2WorkerDCTM&lt;/id&gt;\n    &lt;name&gt;Fast2 Worker DCTM&lt;/name&gt;\n    &lt;description&gt;Fast2 Worker DCTM v-2.12.1&lt;/description&gt;\n    &lt;!-- Fast2_service lives in service\\windows, rewind 2 levels to find home --&gt;\n    &lt;env name=\"FAST2_HOME\" value=\"%BASE%\\..\\..\" /&gt;\n    &lt;executable&gt;%BASE%\\..\\..\\startup-worker.bat&lt;/executable&gt;\n    &lt;logpath&gt;%BASE%\\..\\log&lt;/logpath&gt;\n    &lt;startmode&gt;Manual&lt;/startmode&gt;\n    &lt;log mode=\"roll-by-size\"&gt;\n        &lt;sizeThreshold&gt;10240&lt;/sizeThreshold&gt;\n        &lt;keepFiles&gt;8&lt;/keepFiles&gt;\n    &lt;/log&gt;\n&lt;/service&gt;\n</code></pre></p> <p>And then, to install the worker as a service : <pre><code>C:\\path-to-fast2\\service\\windows&gt; Fast2_worker_service.exe install\n</code></pre></p>"},{"location":"getting-started/overall-concepts/","title":"What you need to know before committing to Fast2","text":""},{"location":"getting-started/overall-concepts/#basic-jargon","title":"Basic jargon","text":"Source <p>A source is a Fast2 task whose role is to gather the documents or items to migrate. As they are identified, the source converts them into punnets.</p> Punnet <p>The Punnet is the pivot format which is used for data mapping, content conversions and folder management. This is the migration entity, processed and then forwarded by the workflow tasks.</p> Task <p>A task is either an extract-, transform- or injection-step that composes a workflow. Each task can be configured to match the user\u2019s needs. Once all tasks are completed in the specific order, the migration is over.</p> Map <p>A workflow (aka \"Map\") is a succession of tasks, where the output of the ones is the input of the following others. Each task can be considered as a step of the workflow.</p> Campaign <p>A campaign is the perimeter where a map is executed (once or several times). Different campaigns can either be cumulative or independent.</p> Worker <p>The Worker is the punnet processor, applying the changes onto the punnet, according to how the tasks have been configured by the user.</p> <p>They are waiting in silence to do their job. When a punnet needs to be processed by a task, the broker triggers the assigned worker.</p> <p>If the workload is too important, you can manually add workers to speed up processing.</p> Broker <p>The broker is the trump card of the migration. It is basically the workflow orchestrator, in charge of database communication, sending punnets to the worker(s) for them to process the operations.</p> <p>Scheduling, orchestrating or even managing queues : the broker is everywhere.</p> <p>His first job is to handle the workers. Worker coordination is a key point in terms of performance, knowing that there may be a multitude of them.</p> <p>In addition, the broker ensures the persistence and traceability of the data carried out by the punnets into the database, where logs, data and errors and more are stored.</p> <p> </p>"},{"location":"getting-started/overall-concepts/#architecture","title":"Architecture","text":""},{"location":"getting-started/overall-concepts/#fast2-objects","title":"Fast2 objects","text":""},{"location":"getting-started/overall-concepts/#folder","title":"Folder","text":"<p>Folder object represents a folder in the ECM or file system sense, and can have metadata as well as links to documents</p> <p>Info</p> <p>This type can be included into punnets and documents, and folders themselves.</p> <pre><code>\u3134 folder\n    \u3134 name\n    \u3134 path\n    \u3134 parent folder\n        \u3134 name\n        \u3134 path\n        \u3134 parent folder\n            \u3134 ...\n</code></pre>"},{"location":"getting-started/overall-concepts/#dataset","title":"Dataset","text":"<p>Data object represents metadata in the ECM sense. It contains a name, a type, and one or more values.</p> <p>Info</p> <p>This type can be included into punnets, documents and workflows.</p> <pre><code>\u3134 dataset\n    \u3134 metadata A (ex/ key: value)\n        \u3134 properties\n            \u3134 property\n            \u3134 property\n            \u3134 ...\n    \u3134 metadata B (ex/ key: [value A, value B])\n    \u3134 ...\n</code></pre>"},{"location":"getting-started/overall-concepts/#content","title":"Content (aka 'ContentContainer')","text":"<p>Content object materializes document content that can be simple or made up of several pages. It can be materialized by a relative or absolute path to its storage location or stored directly in memory / in an XML file.</p> <p>Info</p> <p>This type can be included into documents and annotations.</p> <pre><code>\u3134 content\n    \u3134 URL\n    \u3134 mime-type\n    \u3134 properties\n        \u3134 property\n        \u3134 property\n        \u3134 ...\n    \u3134 subcontents\n        \u3134 content\n        \u3134 content\n        \u3134 ...\n</code></pre>"},{"location":"getting-started/overall-concepts/#annotations","title":"Annotations","text":"<p>Annotation object represents an annotation (post-its, arrow\u2026) affixed to the content of a document. This object is not conceptualized in all ECM systems.</p> <pre><code>\u3134 annotation\n    \u3134 ID\n    \u3134 content\n</code></pre>"},{"location":"getting-started/overall-concepts/#document","title":"Document","text":"<p>A document can also contains its own data, its content with annotations and the folder where it is stored.</p> <p>Info</p> <p>This type can be included into punnets and workflows.</p> <pre><code>\u3134 document\n    \u3134 documentId\n    \u3134 dataset\n    \u3134 contents\n    \u3134 mime-type\n    \u3134 folders\n    \u3134 annotations\n</code></pre>"},{"location":"getting-started/overall-concepts/#workflow","title":"Workflow","text":"<pre><code>\u3134 workflows\n    \u3134 dataset\n    \u3134 associated documents\n        \u3134 document\n        \u3134 document\n        \u3134 ...\n</code></pre>"},{"location":"getting-started/overall-concepts/#punnet","title":"Punnet","text":"<p>As introduced above, the punnet gathers all the different assets to migrate.</p> <pre><code>\u3134 punnet\n    \u3134 punnetId\n    \u3134 documents\n        \u3134 document\n        \u3134 document\n        \u3134 ...\n    \u3134 dataset\n    \u3134 workflows\n    \u3134 folders\n</code></pre> <p>When serialized in XML format, it will look roughly like :</p> <pre><code>&lt;?xml version='1.0' encoding='UTF-8'?&gt;\n&lt;ns:punnet xmlns:ns=\"http://www.arondor.com/xml/document\" punnetId=\"34c5434c-4234-4fa2-9f91-7882a899a994#1\"&gt;\n    &lt;ns:documentset&gt;\n        &lt;ns:document documentId=\"34c5434c-4234-4fa2-9f91-7882a899a994\"&gt;\n            &lt;ns:contentset&gt;\n                &lt;com.arondor.fast2p8.model.punnet.ContentContainer contentStorage=\"URL\"&gt;\n                    &lt;ns:url&gt;C:/samples/file.pdf&lt;/ns:url&gt;\n                &lt;/com.arondor.fast2p8.model.punnet.ContentContainer&gt;\n            &lt;/ns:contentset&gt;\n            &lt;ns:dataset&gt;\n                &lt;ns:data name=\"name\" type=\"String\"&gt;\n                    &lt;ns:value&gt;sample&lt;/ns:value&gt;\n                &lt;/ns:data&gt;\n            &lt;/ns:dataset&gt;\n            &lt;ns:folderset&gt;\n                &lt;ns:folder parent-path=\"/primary-folder/subfolder\" name=\"sample\"&gt;\n                    &lt;ns:dataset /&gt;\n                &lt;/ns:folder&gt;\n            &lt;/ns:folderset&gt;\n            &lt;ns:annotationset /&gt;\n        &lt;/ns:document&gt;\n    &lt;/ns:documentset&gt;\n    &lt;ns:dataset /&gt;\n    &lt;folderSet /&gt;\n&lt;/ns:punnet&gt;\n</code></pre>"},{"location":"getting-started/overall-concepts/#lifecycle","title":"Lifecycle","text":"<p>The punnet will iterate through the follwing lifecycle until the last step is reached.</p> <pre><code>graph TD\n    A(Created) --&gt; B(Queued);\n    B --&gt; C(Processing);\n    C --&gt; D{ };\n    D --&gt;|Success| F(Processed OK);\n    D --&gt;|Failure| E(Processed KO);\n    F -. Next task ? .-&gt; B;\n    E -.-&gt; |Retry| H( );\n    F -.-&gt; |Retry| H;\n    H -.-&gt; I( );\n    I -.-&gt;|Previous try| J{ };\n    I -.-&gt; B;\n    J -.-&gt;|KO| L[SupersededException];\n    J -.-&gt;|OK| K[SupersededOK];</code></pre>"},{"location":"getting-started/overall-concepts/#task","title":"Task","text":"<p>Task can be represented as a processing unit to be applied to a punnet. A punnet comes at the entry of the task, as an input. The task performs operations and then outputs the modified punnet.</p> <p>During the processing of each task, statistics are collected allowing to know the number of punnets processed per second. This is the actual throughput of the task and it is of course dependent on the environment (neighboring tasks, multi-thread\u2026) From this speed, Fast2 tries to estimate the average time left for all the tasks.</p> <p>One of the benefits of these statistics is the ability to visualize bottlenecks. Sometimes some tasks have a longer processing time than others. Thanks to the visualization of the queues, it is quite easy to know which task is greedy.</p> <p>When multiple tasks are linked together it represents a processing chain or a workflow where each punnet will be processed task by task. We will call this object a campaign.</p>"},{"location":"getting-started/overall-concepts/#map","title":"Map \u2015 workflow","text":"<p>Map is the Fast2 word for the workflow. It is a collection of tasks.</p> <p></p>"},{"location":"getting-started/overall-concepts/#campaign","title":"Campaign \u2015 workflow instance","text":"<p>As we have just seen, a campaign is made up of several tasks. In other words, it represents an instance of a map.</p> <p>Warning</p> <p>A campaign has a unique name</p> <p>Despite this uniqueness, each campaign can be ran multiple times. The statistical data of the new run will be added to the previous run(s).</p> <p>Other runs can be added on top of this one.</p> <p>A user has the opportunity to stop any campaign when he wants. He can always resume the campaign later, or start a fresh one.</p> <p>A retry feature is also available after each campaign. This makes possible to filter certain punnets and to replay them directly in the campaign. For instance, retry each punnet in exception. You can even select which type of exception you want.</p>"},{"location":"getting-started/overall-concepts/#lifecycle_1","title":"Lifecycle","text":"<pre><code>graph LR\n  A(Undefined) --&gt; B(Starting);\n  B --&gt; C(Started);\n  C --&gt; D(Running);\n  D -.-&gt;|Stops source iterator| F(Stopping);\n  D --&gt; E(Finished);\n  F -.-&gt;|Restart source iterator| B;</code></pre>"},{"location":"getting-started/overall-concepts/#color-bubble-indicators","title":"Color Bubble Indicators","text":"<p>For each task, the color bubble indicates the status of punnet processing.</p> <p></p> <p>Each colored bubble shows a specific metric:</p> <p>\ud83d\udfe1 Yellow (Top) \u2013 Number of punnets waiting to be processed</p> <p>\ud83d\udd35 Blue (Left) \u2013 Number of punnets currently being processed</p> <p>\ud83d\udd34 Red (Right) \u2013 Number of failures</p> <p>\ud83d\udfe0 Orange (Bottom Center) \u2013 Processing speed, in punnets per second</p> <p>\ud83d\udfe2 Green (Right-Center) \u2013 Number of successfully processed punnets</p>"},{"location":"getting-started/overall-concepts/#operating","title":"Operating","text":""},{"location":"setup-environments/","title":"How is this section relevant to my migration ?","text":"<p>When integrating a tool with legacy systems such as the ones you can find in this section, extra configuration is often required to account for their specificities and ensure smooth connectivity. Here are some key reasons why additional configuration may be necessary:</p> <ol> <li> <p>Protocol Differences</p> <p>Legacy systems often use proprietary protocols or communication methods that differ from standard protocols used by modern tools. Configuring the tool to understand and communicate with these protocols is crucial for successful integration.</p> </li> <li> <p>Data Mapping</p> <p>Legacy systems may have unique data structures, file formats, or metadata schemas. The tool needs to be configured to properly interpret and map these elements during the migration process to ensure data integrity and consistency.</p> </li> <li> <p>Authentication and Security</p> <p>Legacy systems might have specific authentication mechanisms, access controls, or security requirements. The tool must be configured to authenticate with the legacy system and adhere to its security protocols to ensure authorized access and protect sensitive information.</p> </li> <li> <p>Legacy API Limitations</p> <p>Older systems may have limited or outdated APIs, making it necessary to configure the tool to work within these limitations. This could involve adapting data transfer methods, handling batch processing, or optimizing performance to account for the system's capabilities.</p> </li> <li> <p>Legacy System Dependencies</p> <p>Legacy systems may rely on other supporting software, databases, or middleware components. Configuring the tool to integrate with these dependencies ensures seamless interaction and proper functioning of the overall system.</p> </li> </ol> <p>Overall, the extra configuration required when connecting a tool to legacy systems is essential for bridging the gap between modern and outdated technologies, enabling smooth data migration, and ensuring effective communication and interoperability between the tool and the underlying infrastructure.</p>"},{"location":"setup-environments/documentum/","title":"Documentum","text":"<p>This section here is about the raw requirement to get the worker successfully communicate with a Documentum server, either for extraction or injection.</p> <p>Note</p> <p>Since Documentum architecture involves particular port and access management, a worker should be started on the same server where Documentum is running. Check out the deployment variants topic for more information</p>"},{"location":"setup-environments/documentum/#dependencies-and-additional-binaries","title":"Dependencies and additional binaries","text":"<p>Following Documentum-specific configuration files and libraries must be added into <code>./worker-libs/</code> folder of the worker extracting from Documentum :</p> <ul> <li><code>dfc.keystore</code></li> <li><code>dfc.properties</code></li> <li><code>dfc-x.y.z.jar</code>, which can be retrieved from the Documentum installation folder</li> <li><code>commons-lang-x.y.jar</code>, matching the DFC JAR version. This dependency is accessible from the official Apache Commons website (for a <code>dfc-6.7.XXX-YYY.jar</code>, use the <code>commons-lang-2.4.jar</code>)</li> </ul> <p>It also is necessary to remove the <code>fast2-worker-package-X.Y.Z.jar/BOOT-INF/lib/log4j-over-slf4j.jar</code> log dependency from the worker.</p>"},{"location":"setup-environments/documentum/#worker-specific-configuration","title":"Worker-specific configuration","text":"<p>The remote worker needs specific configuration too, which are to be configured from the <code>./config/application.properties</code> file :</p> Configuration field Description <code>worker.queue.regex</code> Documentum extraction dedicated queues \u00a0\u00a0\u00a0ex/ <code>worker.queue.regex=Dctm.*</code> <code>broker.url</code> Since the broker will be remotely accessed, the worker needs to be aware of where to reach it. <code>worker.content.factory</code> This field has to be set to <code>remote</code> so the temporary binary contents will be stored on the broker server."},{"location":"setup-environments/ibm-cmod/","title":"Ibm cmod","text":"<p>This section here is about the raw requirement to get Fast2 to communicate with an IBM CMOD server.</p> <p>Note</p> <pre><code>The very first thing to do is check out the [Content Manager OnDemand - Setting up the development environment](https://www.ibm.com/docs/en/cmofm/10.5.0?topic=applications-setting-up-development-environment) documentation\n</code></pre> <p>Store under the <code>LD_LIBRARY_PATH</code> environment variable the path of the libs where the worker will have to look up for the CMOD libs (ex/ <code>/opt/fast2/ondemand/V10.5/www</code> vs <code>/opt/fast2/ondemand/V10.5/www/lib64</code>).</p>"},{"location":"setup-environments/ibm-cmod/#linux","title":"Linux","text":"<p>Make sure the 2 following <code>.rpm</code> packages, shipped in ODWEK client bundle package, are properly installed</p> <ul> <li>gskssl64-{ver}.linux.x86_64.rpm</li> <li>gskcrypt64-{ver}.linux.x86_64.rpm</li> </ul> <p>by running the following command :</p> <pre><code>$ ldd /path/to/libars3wapi64.so\n</code></pre> <p>The missing dependent libraries will be highlighted like so :</p> <pre><code>libgsk8ssl_64.so =&gt; not found\nlibgsk8iccs_64.so =&gt; not found\nlibgsk8km_64.so =&gt; not found\n</code></pre> <p>When they are present they should be resolved to <code>/lib64/lib*.so</code>.</p> <p>Warning</p> <pre><code>CMOD ODWEK client library requires to be installed in `/opt/ibm/cmod/V{ver}` folder.\n\n(This value is hard-coded in the `libarswapi64.so` library)\n</code></pre>"},{"location":"setup-environments/ibm-cmod/#configure-fast2","title":"Configure Fast2","text":""},{"location":"setup-environments/ibm-cmod/#required-libs","title":"Required libs","text":"<ol> <li> <p>Copy all following libraries into a dedicated directory at the root of Fast2 (ex/ <code>FAST2_HOME/cmod-dlls/</code>):</p> <p><ul> <li>ars3wapi64.dll</li> <li>arsgsk64.dll</li> <li>icudt48.dll</li> <li>icuin48.dll</li> <li>icui048.dll</li> <li>icule48.dll</li> <li>iculx48.dll</li> <li>icuuc48.dll</li> </ul></p> </li> <li> <p>Declare the folder in <code>FAST2_HOME/config/application.properties</code> so the worker will load the libraries :     <pre><code>worker.java.library.path=cmod-dlls/\n</code></pre></p> </li> </ol>"},{"location":"setup-environments/ibm-cmod/#update-path-environment-variable","title":"Update PATH environment variable","text":"<p>In <code>&lt;FAST2_HOME&gt;/startup-broker.bat</code> (resp. <code>&lt;FAST2_HOME&gt;/startup-broker.sh</code>)</p> <pre><code>SET PATH=%PATH%;cmod-dlls\\\n\n%JAVA% -Djava.library.path=cmod-dlls\\dll64\\ -Dfile.encoding...\n</code></pre>"},{"location":"setup-environments/ibm-cmod/#troubleshooting","title":"Troubleshooting","text":""},{"location":"setup-environments/ibm-cmod/#error-opening-folder-dll","title":"Error opening folder DLL","text":"<pre><code>java.lang.RuntimeException: Error opening folder : C:\\...\\www\\ars3wapi32.dll: Can't load IA 32-bit .dll on a AMD 64-bit platform\n  at com.fast2.cmod.CMODSource.fillHitIterator(CMODSource.java:217)\n  at com.fast2.cmod.CMODSource.produce(CMODSource.java:103)\n  at com.fast2.worker.SourceWorker.processCampaignSource(SourceWorker.java:114)\n  at com.fast2.worker.SourceWorker.lambda$run$2(SourceWorker.java:61)\n  at com.fast2.worker.NoFail.noFail(NoFail.java:31)\n  at com.fast2.worker.SourceWorker.run(SourceWorker.java:61)\n  at com.fast2.worker.QueueWatcher$5.run(QueueWatcher.java:299)\n Caused by: java.lang.UnsatisfiedLinkError: C:\\...\\www\\ars3wapi32.dll: Can't load IA 32-bit .dll on a AMD 64-bit platform\n  at java.lang.ClassLoader$NativeLibrary.load(Native Method)\n  at java.lang.ClassLoader.loadLibrary0(ClassLoader.java:1934)\n</code></pre> <p>This error can be thrown due to either a misconfiguration of the <code>worker.java.library.path</code> key in the <code>application.properties</code> files, inducing the worker not to find the libs.</p> <p>It can also be due to the <code>cmod-dlls/</code> folder not declared in the <code>PATH</code> environment variable, from the startup script files.</p>"}]}